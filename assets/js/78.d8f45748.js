(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{446:function(t,s,a){"use strict";a.r(s);var v=a(47),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[t._v("#")]),t._v(" 远程仓库")]),t._v(" "),a("blockquote",[a("p",[t._v("远程"),a("small",[t._v("（remote）")]),t._v("版本库也叫上游"),a("small",[t._v("（origin）")]),t._v("版本库")])]),t._v(" "),a("p",[t._v("通常我们并不常亲自建立远程仓库，而是委托给『第三方』。")]),t._v(" "),a("p",[t._v("常见的操作是，先在第三方上创建『远程 Git 文档库』，然后复制"),a("small",[t._v("（Clone）")]),t._v("出一个『本地 Git 文档库』。")]),t._v(" "),a("h2",{attrs:{id:"在托管网站上创建远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在托管网站上创建远程仓库"}},[t._v("#")]),t._v(" 在托管网站上创建远程仓库")]),t._v(" "),a("p",[t._v("常见的代码托管仓库有：")]),t._v(" "),a("ul",[a("li",[t._v("国外：github、gitlib")]),t._v(" "),a("li",[t._v("国内：gitee、Coding")])]),t._v(" "),a("p",[t._v("在托管网站上创建项目后，通常项目目录下是空的，可以通过以下 2 种途径初始化该项目：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("创建新版本库")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone git@148.70.1.4:HeMiao/reader-html.git\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" reader-html\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("touch")]),t._v(" README.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" README.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"add README"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master\n")])])])]),t._v(" "),a("li",[a("p",[t._v("已存在的文件夹或 Git 仓库")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("existing_folder"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin git@148.70.1.4:HeMiao/reader-html.git\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"克隆远程仓库至本地"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#克隆远程仓库至本地"}},[t._v("#")]),t._v(" 克隆远程仓库至本地")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git clone <远程文档库的路径> <本地文档库的文件夹名称>\n")])])]),a("p",[t._v("更具体的的格式为：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git clone <http://Web服务器地址/远程文档库路径> <本地文档库名称>\n")])])]),a("blockquote",[a("p",[t._v("例如：git clone https://github.com/<用户名>/<项目名>.git")])]),t._v(" "),a("p",[t._v("如果你在托管网站上添加了你本机的 ssh-key，那么还可以使用如下格式：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git clone Git账号@SSH服务器地址:远程文档库路径 本地文档库路径\n")])])]),a("blockquote",[a("p",[t._v("例如：git clone git@github.com:<用户名>/<项目名>.git")])]),t._v(" "),a("p",[t._v("本地 Git 文档库 和 远程 Git 文档库之间是有『关系』的。这种关系体现在 Git 的配置项的 "),a("strong",[t._v("origin")]),t._v(" 属性上。使用 "),a("strong",[t._v("git config -l")]),t._v(" 可以看到：")]),t._v(" "),a("div",{staticClass:"language-properties extra-class"},[a("pre",{pre:!0,attrs:{class:"language-properties"}},[a("code",[t._v("...\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("remote.origin.url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("远程Git文档库地址")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("remote.origin.fetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("+refs/heads/*:refs/remotes/origin/*")]),t._v("\n...\n")])])]),a("blockquote",[a("p",[t._v("在日常工作中，"),a("strong",[t._v("git clone")]),t._v(" 命令一个项目通常只会执行一次。")])]),t._v(" "),a("h2",{attrs:{id:"推送"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推送"}},[t._v("#")]),t._v(" 推送")]),t._v(" "),a("p",[t._v("当我们完成对本地文档库的修改，可以将这些修改『"),a("strong",[t._v("推送")]),t._v("』到远程 Git 仓库：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git push origin [分支名称]\n")])])]),a("p",[a("strong",[t._v("git push")]),t._v(" 有两种模式：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("推送本地『"),a("strong",[t._v("所有")]),t._v("』分支，")])]),t._v(" "),a("li",[a("p",[t._v("推送『"),a("strong",[t._v("当前")]),t._v("』分支。")])]),t._v(" "),a("li",[a("p",[t._v("如多使用第一种模式，配置：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global push.default matching\n")])])])]),t._v(" "),a("li",[a("p",[t._v("第二种模式，配置：")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global push.default simple\n")])])])])]),t._v(" "),a("p",[t._v("第二种模式更安全，推荐使用第二种。")]),t._v(" "),a("p",[t._v("无论哪种传送模式，只要执行 "),a("strong",[t._v("git push --all")]),t._v(" 都是推送所有分支。")]),t._v(" "),a("h2",{attrs:{id:"推送冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推送冲突"}},[t._v("#")]),t._v(" 推送冲突")]),t._v(" "),a("p",[t._v("如果远程分支并非你一个人独有，那么很有可能由于别人的提交，导致远程分支向前演进，从而导致 push 失败。此时需要『"),a("strong",[t._v("三步合并法")]),t._v("』解决冲突问题。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("从远程 Git 文档库取回当前所在分支的最新数据。")])]),t._v(" "),a("li",[a("p",[t._v("把远程 Git 文档库的分支合并到本地 Git 的分支。这一步可能会出现冲突。解决冲突，合并代码。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("add-commit-push")]),t._v(" 三联，提交并推送本地数据至远程 Git 文档库。")])])]),t._v(" "),a("p",[a("strong",[t._v("git pull")]),t._v(" 命令可以完成前两部操作。它等价于：先执行 "),a("strong",[t._v("git fetch")]),t._v("，再执行 "),a("strong",[t._v("git rebase origin/master")]),t._v(" 。")]),t._v(" "),a("h2",{attrs:{id:"大道理、小细节和套话"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大道理、小细节和套话"}},[t._v("#")]),t._v(" 大道理、小细节和套话")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("xxx 只和 xxx 玩，yyy 只和 yyy 玩：")]),t._v(" "),a("p",[t._v("当你要推送"),a("small",[t._v("（push，逻辑上就是上传）")]),t._v("本地的 xxx 分支时，你上传的目的地一定是远程的 xxx 分支；")]),t._v(" "),a("p",[t._v("当你要拉取"),a("small",[t._v("（push，逻辑上就是下载）")]),t._v("远程的 yyy 分支时，你下载的目的地一定是本地的 yyy 分支；")]),t._v(" "),a("p",[t._v("理论上虽然可以，但是实际上我们并不会让本地的 xxx 分支和远程的 yyy 分支有推拉关系。即，本地 xxx 分支只和远程 xxx 分支『玩』，本地 yyy 分支只和远程的 yyy 分支『玩』。")])]),t._v(" "),a("li",[a("p",[t._v("推拉"),a("small",[t._v("（push/pull）")]),t._v("都是在更新：")]),t._v(" "),a("p",[t._v("推送"),a("small",[t._v("（push）")]),t._v("操作的执行的潜在前提是：你的本地 xxx 分支上的代码一定更『新』"),a("small",[t._v("（版本更高）")]),t._v("，否则，你为什么要上传呢？")]),t._v(" "),a("p",[t._v("拉取"),a("small",[t._v("（pull）")]),t._v("操作的执行的潜在前提是：你的远程 xxx 分支上的代码一定更『新』"),a("small",[t._v("（版本更高）")]),t._v("，否则，你为什么要下载呢？")]),t._v(" "),a("p",[a("strong",[t._v("推拉都是在更新，只是『方向』不同")]),t._v("：推送，是用本地 xxx 分支更新远程 xxx 分支；拉取，是用远程 xxx 分支更新本地 xxx 分支。")])]),t._v(" "),a("li",[a("p",[t._v("合理使用『简称』少费口舌：")]),t._v(" "),a("p",[t._v("通过 git push 命令推送本地 xxx 分支代码到远程 xxx 分支，实现远程 xxx 分支的代码的更新，简称：通过推送 xxx 分支来更新远程 xxx 分支。")]),t._v(" "),a("p",[t._v("通过 git pull 命令拉取远程 yyy 分支代码到本地 yyy 分支，实现本地 yyy 分支的代码的更新，简称：通过拉取 yyy 分支来更新本地 yyy 分支。")])]),t._v(" "),a("li",[a("p",[t._v("故意推拉『旧代码』是为了放弃：")]),t._v(" "),a("p",[t._v("可以推送"),a("small",[t._v("（上传）")]),t._v("旧代码，在此之前，你的远程 xxx 分支的代码更新，版本更高，而你推送"),a("small",[t._v("（上传）")]),t._v("的旧代码会覆盖掉远程的新代码；")]),t._v(" "),a("p",[t._v("也可以拉取"),a("small",[t._v("（下载）")]),t._v("旧代码，在此之前，你的本地 yyy 分支的代码更新，版本更高，而你拉取"),a("small",[t._v("（下载）")]),t._v("的旧代码会覆盖掉本地新代码；")]),t._v(" "),a("p",[t._v("通常情况下，你不太可能会用旧代码更新新代码，如果你这么干了，意味着你是想废弃新代码中『新』的那部分内容。")])])]),t._v(" "),a("p",[t._v("『完』")])])}),[],!1,null,null,null);s.default=_.exports}}]);