(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{440:function(t,v,_){"use strict";_.r(v);var s=_(47),e=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"撤销"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#撤销"}},[t._v("#")]),t._v(" 撤销")]),t._v(" "),_("h2",{attrs:{id:"撤销场景一-代码实现思路有问题-我要放弃刚才的编码工作-docsify-ignore"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#撤销场景一-代码实现思路有问题-我要放弃刚才的编码工作-docsify-ignore"}},[t._v("#")]),t._v(" 撤销场景一：代码实现思路有问题，我要放弃刚才的编码工作 {docsify-ignore}")]),t._v(" "),_("p",[t._v("比如，你准备着手完成某个分配给你的任务，你去编写这个任务的实现代码，"),_("small",[t._v("（在这个过程中你一致没有执行过 "),_("strong",[t._v("git stage")]),t._v(" 或 "),_("strong",[t._v("git add")]),t._v(" 命令）")]),t._v("，突然，你发现你的实现思路是错误的，那么你对于你的磁盘上的文件"),_("small",[t._v("（即，工作区中的文件）")]),t._v("的修改就是无效、无意义的，那么你需要对你做过的所有的工作做反向操作，放弃你的错误的工作成果。")]),t._v(" "),_("p",[t._v("如果撤销成功，那么撤销后，你的工作区、暂存区和版本库就重新一致了。")]),t._v(" "),_("p",[t._v("这种情况下，你只需要执行 "),_("strong",[t._v("git checkout -- <文件名>")]),t._v(" 命令即可。")]),t._v(" "),_("p",[t._v("意思就是，取本地版本库中的最新版本来覆盖工作目录中的内容。")]),t._v(" "),_("p",[t._v("这种情况下，你可以单独指定撤销某个文件的修改。")]),t._v(" "),_("h2",{attrs:{id:"撤销场景二-代码实现方案二更好-我要放弃代码实现方案一-docsify-ignore"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#撤销场景二-代码实现方案二更好-我要放弃代码实现方案一-docsify-ignore"}},[t._v("#")]),t._v(" 撤销场景二：代码实现方案二更好，我要放弃代码实现方案一 {docsify-ignore}")]),t._v(" "),_("p",[t._v("比如，你已经完成了某个分配给你的任务，并通过 "),_("strong",[t._v("git stage")]),t._v(" 或 "),_("strong",[t._v("git add")]),t._v(" 命令将其提交到了暂存区。考虑到可能还有更好的方案，你没有执行 "),_("strong",[t._v("git commit")]),t._v(" 命令，将它提交到本地版本库。")]),t._v(" "),_("p",[t._v("经过第二轮的奋战,你在你的工作区中，完成了任务的第二种实现，通过比较，你觉得你后实现的方案二要好于之前的方案一，因此，你决定『放弃』暂存区的方案一。")]),t._v(" "),_("p",[t._v("这种情况下，你通过 "),_("strong",[t._v("git reset --mixed <file>...")]),t._v(" 命令能实现如下效果：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-reset-3.png",alt:"git-reset-3"}})]),t._v(" "),_("p",[_("strong",[t._v("mixed")]),t._v(" 方式的 "),_("strong",[t._v("git reset")]),t._v(" 只会撤销你提交到暂存区的内容，而保留工作区的内容。")]),t._v(" "),_("blockquote",[_("p",[t._v("keep working copy but reset index")])]),t._v(" "),_("p",[t._v("这里有 2 点值得注意的地方：")]),t._v(" "),_("ol",[_("li",[_("p",[_("strong",[t._v("git reset --mixed")]),t._v(" 可以接指定的文件或目录作为参数，这种情况下只撤销这些文件和目录提交到暂存区的内容；它也可以不接参数，这样是撤销所有提价到暂存区的内容。")])]),t._v(" "),_("li",[_("p",[t._v("当你使用 "),_("strong",[t._v("git reset --mixed")]),t._v(" 时，Git 会提示你这条命令 "),_("code",[t._v("is deprecated")]),t._v("，它建议你用 "),_("strong",[t._v("git reset --")]),t._v(" 替代。"),_("small",[t._v("即，不要出现 "),_("code",[t._v("mixed")]),t._v(" 单词。")])])])]),t._v(" "),_("h2",{attrs:{id:"撤销场景三-任务取消-不管是方案几-都要放弃掉-docsify-ignore"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#撤销场景三-任务取消-不管是方案几-都要放弃掉-docsify-ignore"}},[t._v("#")]),t._v(" 撤销场景三：任务取消，不管是方案几，都要放弃掉 {docsify-ignore}")]),t._v(" "),_("p",[_("strong",[t._v("git reset --hard")]),t._v(" 能实现如下效果：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-reset-4.png",alt:"git-reset-4"}})]),t._v(" "),_("p",[_("strong",[t._v("hard")]),t._v(" 方式的 "),_("strong",[t._v("git reset")]),t._v(" 会同时撤销你对工作区的改动，以及你所提交到暂存区的内容。从而一步到位地回到『当初什么都没动过的样子』。")]),t._v(" "),_("blockquote",[_("p",[t._v("discard all changes")])]),t._v(" "),_("p",[t._v("这里有 1 点值得注意的地方：")]),t._v(" "),_("p",[_("strong",[t._v("git reset --hard")]),t._v(" 命令不能带参数。他直接就撤销了所有的变动。你无法指定『仅仅』撤销某个文件的变动。")]),t._v(" "),_("hr"),t._v(" "),_("p",[t._v("上一章曾经说过，Git 在监管你的文件时，如果发现你改动了你的文件或文件夹"),_("small",[t._v("（即，工作区的内容发生变动）")]),t._v("，它期望你作出『调整』，以保证『"),_("strong",[t._v("工作区和本地仓库的一致性")]),t._v("』。")]),t._v(" "),_("p",[t._v("『提交变更』是调整手段之一，『"),_("strong",[t._v("撤销")]),t._v("』则是另一种调整手段。")]),t._v(" "),_("p",[t._v("我们将『不一致』的情况由简单到复杂分为以下 2 种：")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("未添加。即，未执行过 "),_("strong",[t._v("git stage")]),_("small",[t._v("（"),_("strong",[t._v("git add")]),t._v("）")]),t._v("命令 。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-reset-1.png",alt:"git-reset-1"}})])]),t._v(" "),_("li",[_("p",[t._v("已添加，未提交。即，未执行过 "),_("strong",[t._v("git commit")]),t._v(" 命令。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-reset-2.png",alt:"git-reset-2"}})])])]),t._v(" "),_("h2",{attrs:{id:"提交到本地版本库后的撤销"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提交到本地版本库后的撤销"}},[t._v("#")]),t._v(" 提交到本地版本库后的撤销")]),t._v(" "),_("blockquote",[_("p",[t._v("理论上来说，提交之后就不应该撤销了。因为提交之后，工作区和本地仓库"),_("small",[t._v("（还包括暂存区）")]),t._v("的内容就一致了。在 Git 看来这种情况是正常的、理想中的、它所追求的状态。")])]),t._v(" "),_("p",[t._v("考虑到手滑的情况，如果你提交了变更，白纸黑字地记录在了 Git 的历史记录中，但是后又发现这个变更本不应该提交，这种情况下，还是需要撤销提交后的变更。")]),t._v(" "),_("blockquote",[_("p",[t._v("你可能发现了 "),_("strong",[t._v("git reset")]),t._v(" 命令的选项，除了有 "),_("strong",[t._v("--mixed")]),t._v(" 和 "),_("strong",[t._v("--hard")]),t._v(" 之外，还有一种："),_("strong",[t._v("--soft")]),t._v(" 。")])]),t._v(" "),_("p",[_("strong",[t._v("git reset --soft")]),t._v(" 命令就可以用来实现撤销已提交的变更。")]),t._v(" "),_("p",[_("strong",[t._v("git reset --soft")]),t._v(" 命令的本意是：移动 HEAD 到指定的提交上。而 HEAD 指针是你的分支的逻辑上的"),_("small",[t._v("（当前的）")]),t._v("终点。")]),t._v(" "),_("p",[t._v("例如：")]),t._v(" "),_("p",[t._v("你的 Git 仓库的历史记录历经演进，当前到了 v4 版本，在你历史记录的演进过程中，HEAD 指针也是持续前进的，当前它也指向了 v4 版本。")]),t._v(" "),_("p",[t._v("当你使用 "),_("strong",[t._v("git reset --soft HEAD^1")]),t._v(" 时，你就人为地将 HEAD 指针指向了你的上一个版本。即，你人为人为 v3 版本就是『最新版』。")]),t._v(" "),_("p",[t._v("最关键的在于：在你移动 HEAD 指针的过程中，你的工作区的文件的实际内容仍然停留在了 v4 版本的样子。"),_("small",[t._v("你的暂存区中的内容同时也是 v4 版。")])]),t._v(" "),_("p",[t._v("简单来说，这就实现了『时间的回拨』，现在你仿佛回到了你当初开发 v4 版本的样子：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("你基于最新版本 v3 版作出了改动，并将改动添加到了暂存区。")])]),t._v(" "),_("li",[_("p",[t._v("此时，你正准备"),_("small",[t._v("（还没有）")]),t._v("提交你的变更。如果接下来你执行 "),_("strong",[t._v("git commit")]),t._v(" 那么你的最新版将从 v3 版演进到 v4 版本。")])])]),t._v(" "),_("blockquote",[_("p",[t._v("则就是你曾经作过的事情，你又回到了当初的那个临提交前时刻。")])]),t._v(" "),_("p",[t._v("到这里，你可以选择撤销、放弃你对工作目录作出的修改"),_("small",[t._v("（以及添加到暂存区的内容）")]),t._v("。这就相当于你回到了过去的那个『十字路口』选择放弃演进 v4 版本，从而让 Git 仍停留在 v3 版。")]),t._v(" "),_("p",[t._v("那么，因为你手滑而出现过的 v4 版本，就从 Git 的历史上消失了。")]),t._v(" "),_("blockquote",[_("p",[t._v("如果愿意，你可以回到更久之前，让更多的曾经出现过的历史版本都消失。")])]),t._v(" "),_("hr"),t._v(" "),_("div",{staticClass:"language-shell extra-class"},[_("pre",{pre:!0,attrs:{class:"language-shell"}},[_("code",[_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --graph\n")])])]),_("p",[t._v("每一个 Commit 节点都会有一个父节点，HEAD 节点的父节点可以写成 "),_("strong",[t._v("HEAD^1")]),t._v("，可简写成 "),_("strong",[t._v("HEAD^")]),t._v(" 。"),_("small",[t._v("另一种表示方式为 "),_("strong",[t._v("HEAD~1")]),t._v(" 。")])]),t._v(" "),_("div",{staticClass:"custom-block warning"},[_("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),_("p",[t._v("当前节点的"),_("em",[t._v("爷爷节点")]),t._v(" 表示为："),_("code",[t._v("HEAD~2")]),t._v("，注意不能写成 "),_("code",[t._v("HEAD^2")]),t._v("（它表示另一种含义）。")])])])}),[],!1,null,null,null);v.default=e.exports}}]);