(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{451:function(t,e,v){"use strict";v.r(e);var s=v(47),_=Object(s.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("https://bonobogitserver.com/install/")]),t._v(" "),v("h2",{attrs:{id:"工作流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作流"}},[t._v("#")]),t._v(" 工作流")]),t._v(" "),v("h3",{attrs:{id:"github-工作流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#github-工作流"}},[t._v("#")]),t._v(" Github 工作流")]),t._v(" "),v("p",[t._v("Github Flow 是 Github 网站推荐使用的一种工作流，它充分利用了 Github 网站的 "),v("code",[t._v("fork")]),t._v(" 和 "),v("code",[t._v("pull request")]),t._v(" 功能，提供了一种简化高效的 Git 使用方式。")]),t._v(" "),v("p",[t._v("总体流程非常简单，如下图：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/github-flow.png",alt:"github-flow.png"}})]),t._v(" "),v("p",[t._v("整个开发流程大致如下：")]),t._v(" "),v("ol",[v("li",[t._v("令 "),v("code",[t._v("master")]),t._v(" 分支时常保持可以部署发布的状态；")]),t._v(" "),v("li",[t._v("进行新的作业时要从 master 分支创建新分支，新分支名称要具有描述性；")]),t._v(" "),v("li",[t._v("在 "),v("code",[t._v("2")]),t._v(" 新建的本地仓库分支中进行提交；")]),t._v(" "),v("li",[t._v("在功能分支上实现功能后，发起 Pull Request 让其他开发者进行审查。"),v("small",[t._v("发起 Pull Request 之前可以将 maseter 分支上的最新代码合并到功能分支。")]),t._v("；")]),t._v(" "),v("li",[t._v("确认作业完成后与 master 分支合并；")]),t._v(" "),v("li",[t._v("删除作业分支。")])]),t._v(" "),v("p",[t._v("Github flow 的缺点在于：合并代码的权利在中央仓库的【管理者】手里，那么当【其它开发】人员发起 pull request 的时候，管理者在合并代码时，他需要很清除提交者的代码的各个细节，否则就会出现提交者的代码扰乱了中央仓库，导致中央仓库代码错误的情况。")]),t._v(" "),v("p",[t._v("在这种条件下，管理者会非常的小心翼翼。当管理者对 pull request 的代码不能完全确定的情况下，管理者要么就会直接拒绝 pull request，要么还是会找到提交者当面沟通，这样一来，这个流程并不高效。")]),t._v(" "),v("h2",{attrs:{id:"git-flow-工作流"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-flow-工作流"}},[t._v("#")]),t._v(" Git Flow 工作流")]),t._v(" "),v("p",[t._v("最早诞生，并被广泛认可和使用的的工作流是荷兰程序员 Vincent Driessen 于 2010 年在其博客《A successful Git branching model》中提出的 "),v("strong",[t._v("Git Flow")]),t._v("，这也是第一次出现 Git 工作流的概念。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/gitflow_1.png",alt:"图片"}})]),t._v(" "),v("p",[t._v("git-flow 的分支策略引入了 "),v("strong",[t._v("中央集权型管理系统")]),t._v(" 的长处来整合分布式开发的优点，进而结合双方的优点。"),v("small",[t._v("毕竟当年是 2010 年，Subversion 是主流，程序员仍普遍认为必须要有一个中央仓库。")])]),t._v(" "),v("p",[t._v("git-flow 提议以固定的模式在中央代码库中建立 "),v("strong",[t._v("两个主分支（长存分支）")]),t._v("，在各个开发人员的代码库中建立 "),v("strong",[t._v("三个辅助分支（临时分支）")]),t._v("。")]),t._v(" "),v("p",[t._v("三个辅助分支都是短期分支，一旦完成就会被合并进 develop 或 master 分支，然后被删除。相对应的是，两个主分支是长期分支，一直都存在。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"left"}},[t._v("分支")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"left"}},[v("strong",[t._v("Master")])]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("长存分支")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("为发布而建的分支。每次发布时都打上标签。")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[v("strong",[t._v("Develop")])]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("长存分支")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("开发用的分支。发布之前的最新版本。")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("feature")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("临时分支")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("从 Develop 分支中分离出来，用于开发特定功能的分支。"),v("br"),t._v("功能开发结束后被合并到 Develop 分支。")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("release")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("临时分支")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("从 Develop 分支中分离出来，为发布作准备的分支（即，测试分支）。"),v("br"),t._v("该分支不能再添加新功能，只有 bug 修复。测试结束后被合并到 Master 和 Develop 分支。")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("hotfix")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("临时分支")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("主要在发布后的产品发生故障时紧急建立的分支。"),v("br"),t._v("直接从 Master 分离，bug 修正后再合并到 Master 并打上标签。"),v("br"),t._v("于此同时，它还要合并到 Develop 分支 和 release 分支。")])])])]),t._v(" "),v("blockquote",[v("p",[t._v("由于 Git Flow 在现实中很少被使用，因此此处不展开讲解。")])]),t._v(" "),v("p",[t._v("git-flow 的优点在于各个分支作用清晰，按照其规则，管理起来十分简单。但是，它的问题在于有些复杂：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("需要记忆的内容较多，在实施之前需要对整个流程进行系统地学习；")])]),t._v(" "),v("li",[v("p",[t._v("程序员必须理解自己正在进行的修改会对那些分支造成影响；")])]),t._v(" "),v("li",[v("p",[t._v("一个分支的工作结束后，有时需要与多个目标分支合并；")])]),t._v(" "),v("li",[v("p",[t._v("git-flow 提供的 git-flow 脚本可以简化对 git-flow 的使用，但是使用 GUI 工具的情况下，有些工具无法支持 git-flow 脚本。")])])]),t._v(" "),v("h2",{attrs:{id:"git-commit-log-规范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-log-规范"}},[t._v("#")]),t._v(" Git Commit Log 规范")]),t._v(" "),v("p",[t._v("Commit Log 包含三部分 header、body、footer 其中 header 是必须的，格式固定，body 在变更有必要详细解释时使用。"),v("small",[t._v("相较而言，footer 重要性最薄弱。")])]),t._v(" "),v("h3",{attrs:{id:"commit-log-格式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#commit-log-格式"}},[t._v("#")]),t._v(" commit log 格式")]),t._v(" "),v("div",{staticClass:"language-text extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("&lt;types>(&lt;scopes>): &lt;subject>\n&lt;空行>\n&lt;body>\n&lt;空行>\n&lt;footer>\n")])])]),v("div",{staticClass:"custom-block warning"},[v("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),v("p",[t._v("冒号后面必须有一个小写空格，types 和 scopes 可为多个，中间用逗号分隔。")])]),t._v(" "),v("p",[t._v("举例：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("仅 header：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("fix(service,dao): 修改产品类型时不过滤产品Type\n")])])])]),t._v(" "),v("li",[v("p",[t._v("仅 header，涉及模块较多用 * 代替")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("refactor(*): 修改 DTO 模型前缀\n")])])])]),t._v(" "),v("li",[v("p",[t._v("有 header 和 body")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("fix(language-service): Improve signature selection for pipes with args\n\nPipes with arguments like `slice:0` or `slice:0:1` should not produce diagnostic errors.\n")])])])]),t._v(" "),v("li",[v("p",[t._v("有 header、body、footer")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("func(core,logic): 添加礼包审核\n\n添加商品编辑审核状态和回调，blablablabla\n\nPRD：https://km.sankuai.com/page/194127085\n")])])])])]),t._v(" "),v("h3",{attrs:{id:"type"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[t._v("#")]),t._v(" Type")]),t._v(" "),v("p",[t._v("英文，小写。必须为下列中一个或多个：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"left"}},[t._v("type")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("func")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("function，小功能。注意：feat 改成 func 了 ，避免大家按 feature 这个大粒度来提交，期望是按小功能点分批提交，另外避免跟 feature 分支规范混淆。")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("fix")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("bug 修复，包括编码过程中的逻辑修复，不特指线上 bug 修复")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("refactor")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("重构代码，非 bug 修复和性能优化，包括编码过程中的代码结构调整，不特指重构项目")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("impr")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("improvement，小的代码设计改进")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("perf")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("性能优化")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("apm")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("仅监控打点、异常日志处理相关")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("chore")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("无关紧要的改动，例如删除用不到的注解、调整日志内容等")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("jvm")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("仅 JVM 参数变更")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("pom")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("仅依赖和版本变化")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("conf")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("仅配置变化，Spring 配置、properties 文件")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("docs")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("仅文档变更")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("style")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("代码格式调整，如 import 清理，代码格式化")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("test")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("单测和自动化 case 相关")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("typo")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("修复小的拼写错误")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("wip")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("work in progress，少用，用于开发中的不完整提交，新工程开始时偶尔使用")])])])]),t._v(" "),v("h3",{attrs:{id:"scope"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#scope"}},[t._v("#")]),t._v(" Scope")]),t._v(" "),v("p",[t._v("英文，小写。表示变更的包或模块范围，可多个组合，若涉及范围较大，可用 "),v("code",[t._v("*")]),t._v(" 代替。各服务可以自行定义，组内同学可轻易理解。")]),t._v(" "),v("p",[t._v("通用 scope 列表如下：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"left"}},[t._v("scope")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("dto")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("dto 结构变化")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("core")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("core 包")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("service")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("service 层代码")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("dao")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("dao 层代码")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("sql")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("sql 代码变更")])])])]),t._v(" "),v("p",[t._v("除上述通用字段外，Scope 中各方向可自行定义关键字。例如以下为商品平台中所定义字段：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"left"}},[t._v("scope")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("price")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("价格相关")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("stock")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("库存相关")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("product")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("商品相关")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("idl")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("IDL 文件变化")])])])]),t._v(" "),v("h3",{attrs:{id:"subject"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#subject"}},[t._v("#")]),t._v(" Subject")]),t._v(" "),v("p",[t._v("中文。标题简述修改，结尾不要有句号。")]),t._v(" "),v("h3",{attrs:{id:"body"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#body"}},[t._v("#")]),t._v(" Body")]),t._v(" "),v("p",[t._v("中文。修改的背景（为什么做这次修改），说明修改逻辑。")]),t._v(" "),v("h3",{attrs:{id:"footer"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#footer"}},[t._v("#")]),t._v(" Footer")]),t._v(" "),v("p",[t._v("中文。可以放置需求wiki或task链接，对以后其他同学blame很有用。")]),t._v(" "),v("h2",{attrs:{id:"基于-issues-的简单项目管理与流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基于-issues-的简单项目管理与流程"}},[t._v("#")]),t._v(" 基于 Issues 的简单项目管理与流程")]),t._v(" "),v("p",[t._v("无论是国外的 Github、GitLab，还是国内的 GitEE，亦或者是自己搭建 Gogs 服务器，它们除了提供基于 Git 的基本代码托管服务外。还具备很多与软件开发协作相关的其他功能。比如 issues、PullRequests 等。")]),t._v(" "),v("p",[t._v("利用它们提供的这些功能，我们可以实践一些简单的项目管理和协作流程。这套流程借鉴于很多成功的开源项目，非常适合在小型开发团队里面使用。")]),t._v(" "),v("h3",{attrs:{id:"使用-issues-来管理需求与缺陷"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用-issues-来管理需求与缺陷"}},[t._v("#")]),t._v(" 使用 issues 来管理需求与缺陷")]),t._v(" "),v("p",[t._v("issues 类似于『"),v("strong",[t._v("工单系统")]),t._v("』，是一个发布项目相关信息的地方。项目的所有成员都可以创建新的 issue，其他成员可以在 issue 下进行相关的讨论。")]),t._v(" "),v("p",[t._v("issues 本身是一个非常简单的功能，但是如果配合『"),v("strong",[t._v("标签")]),t._v("』、『"),v("strong",[t._v("里程碑")]),t._v("』等功能一起使用，就可以承担起一定的项目管理工作。")]),t._v(" "),v("h4",{attrs:{id:"录入-issue"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#录入-issue"}},[t._v("#")]),t._v(" 录入 issue")]),t._v(" "),v("p",[t._v("在项目的开发过程中，我们会碰到很多新的需求、软件 bug 等。这些需求与 bug ，就是 issue 最大的来源，它们都可以作为 issue 录入到项目的 issues 中。")]),t._v(" "),v("p",[t._v("因为 issue 的录入门槛很低，鼓励项目成员录入 issue 后，项目很容易就会出现大量的 issues。所以我们应该严格控制每个 issue 的内容质量，确保其他人可以通过这个 issue 获取足够多的信息，提高沟通效率。")]),t._v(" "),v("p",[t._v("不光是和需求和 bug，任何和项目有关的内容都可以录入到 issue 中。")]),t._v(" "),v("ul",[v("li",[v("h3",[t._v("需求型 issue")]),t._v(" "),v("p",[t._v("如果你要录入一个需求类的 issue，最好在内容主体中包含下面这些内容：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("用一句话描述你的需求，并用它作为标题")])]),t._v(" "),v("li",[v("p",[t._v("这个需求是解决什么问题的？")])]),t._v(" "),v("li",[v("p",[t._v("这个需求对软件现有功能会造成什么影响？")])]),t._v(" "),v("li",[v("p",[t._v("这个需求应该实现什么样的功能？")])]),t._v(" "),v("li",[v("p",[t._v("这个需求是否依赖其他模块提供相关支持？")])]),t._v(" "),v("li",[v("p",[v("small",[t._v("『可选』")]),t._v(" 这个需求有哪些实现方式？")])]),t._v(" "),v("li",[v("p",[v("small",[t._v("『可选』")]),t._v(" 这些可选的实现方式分别有哪些优缺点？")])])])]),t._v(" "),v("li",[v("h3",[t._v("Bug 型 issue")]),t._v(" "),v("p",[t._v("如果你要录入一个 bug issue，最好在内容主体中包含下面这些内容：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("提供出现问题的软件版本号、操作系统环境等相关信息")])]),t._v(" "),v("li",[v("p",[t._v("提供能够稳定复现问题的相关步骤")])]),t._v(" "),v("li",[v("p",[t._v("描述期待行为与当前行为")])]),t._v(" "),v("li",[v("p",[v("small",[t._v("『可选』")]),t._v(" 你对这个 bug 原因的相关分析")])])])])]),t._v(" "),v("h3",{attrs:{id:"review-issue-并为其打上标签"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#review-issue-并为其打上标签"}},[t._v("#")]),t._v(" Review issue 并为其打上标签")]),t._v(" "),v("p",[t._v("当 issue 被创建后，应该等待项目的 owner"),v("small",[t._v("（owner 指项目的所有者，是对项目各方面都比较了解的人，可以为多个人）")]),t._v("对 issue 进行 Review。")]),t._v(" "),v("p",[t._v("Review 时，如果 owner 觉得这个 issue 满足下面的任意条件：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("与项目本身的功能、市场定位有冲突")])]),t._v(" "),v("li",[v("p",[t._v("与现存 issue 有重复")])]),t._v(" "),v("li",[v("p",[t._v("其他不应该被保留的情况")])]),t._v(" "),v("li",[v("p",[t._v("则应该在评论中说明相关情况，并关闭该 issue。如果经过上面的过滤后，觉得 issue 应该被继续跟进，那就应该为它打上标签，方便之后的筛选、排期等工作。")])])]),t._v(" "),v("p",[t._v("『"),v("strong",[t._v("标签")]),t._v("』是 issue 的核心特性，为了更好的使用它，我建议采用 "),v("strong",[v("code",[t._v("{type}/{value}")])]),t._v(" 这样的二维标签，"),v("small",[t._v("来取代传统的 "),v("code",[t._v("{value}")]),t._v(" 单维标签")]),t._v("，下面是一些常用的 issue 标签：")]),t._v(" "),v("ul",[v("li",[v("h3",[v("strong",[t._v("优先级标签")])]),t._v(" "),v("p",[t._v("优先级"),v("small",[t._v("（priority）")]),t._v("是最重要的标签之一。它直接影响 bug 需要被响应的速度、或需求的具体排期。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"left"}},[t._v("级别")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("说明                                             ")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("priority/P0")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("十分紧急")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("priority/P1")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("较为紧急")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("priority/P2")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("普通")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("priority/P3")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("不紧急")])])])]),t._v(" "),v("p",[t._v("如果使用的是 Gitee，Gitee 上的 issue 有『"),v("strong",[t._v("优先级")]),t._v("』这个属性，它有：严重、主要、次要、不重要这 4 个值。可以用『"),v("strong",[t._v("优先级")]),t._v("』设置来替代我们自定义的 "),v("em",[v("strong",[t._v("priority")])]),t._v(" 标签。")])]),t._v(" "),v("li",[v("h3",[v("strong",[t._v("类型标签")])]),t._v(" "),v("p",[t._v("kind"),v("small",[t._v("（类别）")]),t._v("表示 issue 属于哪种类型。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("kind/Bug")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("软件缺陷")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("kind/Feature")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("新功能")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("kind/Enhancement")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("改进项，模块代码重构等不影响项目功能但是改善工程质量的 issue 可归入此类")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("kind/Research")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("技术调研类，一般以输出某类结论或报告视为结束")])])])])]),t._v(" "),v("li",[v("h3",[t._v("工作量标签")]),t._v(" "),v("p",[t._v("size（工作量）表示 issue 需要大约花费多少时间/精力，可以用来做简单的工作量评估参考。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"left"}},[t._v("工作量")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("说明                                  ")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("size/LG")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("大")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("size/MD")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("中")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("size/SM")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("小")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("size/XS")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("极小")])])])])]),t._v(" "),v("li",[v("h3",[t._v("领域/模块标签")]),t._v(" "),v("p",[t._v("area 用于标记当前 issue 属于项目中的什么领域/模块。这个分类下的具体标签由项目本身决定。比如 area/apiserver、area/controller 等。给 issue 打上 area 标签后，项目不同模块的相关负责人可以更方便的找到自己负责的相关 issues。")]),t._v(" "),v("p",[t._v("例如：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"left"}},[t._v("模块")]),t._v(" "),v("th",{staticStyle:{"text-align":"left"}},[t._v("说明                                  ")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("area/xxx模块")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("...")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("area/yyy模块")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("...")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"left"}},[t._v("area/zzz模块")]),t._v(" "),v("td",{staticStyle:{"text-align":"left"}},[t._v("...")])])])])])]),t._v(" "),v("blockquote",[v("p",[t._v("一旦创建这 4 类标签，那么未来，每个 issue 都要被打上这 4 个标签。")]),t._v(" "),v("p",[t._v("标签是一个非常灵活的功能，在具体使用中，不必拘泥于上面列出来的这几种标签，可以根据当前项目特点随意调整。")])]),t._v(" "),v("h3",{attrs:{id:"issue-的后续操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#issue-的后续操作"}},[t._v("#")]),t._v(" issue 的后续操作")]),t._v(" "),v("p",[t._v("当 issue 被创建、打上标签以后，就可以进行后续操作了。issue 的后续操作主要包括下面几种：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("认领 issue：每一个 issue 都有一个 Assignee"),v("small",[t._v("（受理人）")]),t._v("，表示当前 issue 由谁在处理。在你准备开始具体的工作前，一定要记得将 issue 认领为自己所有。")]),t._v(" "),v("p",[t._v("在 issue 下进行讨论：在 issue 下可以围绕 issue 进行讨论，在讨论过程中，可以通过 "),v("em",[t._v("@USERNAME")]),t._v(" 的方式通知其他人关注当前 issue。")])]),t._v(" "),v("li",[v("p",[t._v("使用 issue 做项目里程碑管理")]),t._v(" "),v("p",[t._v("除了为 issue 打上标签以外，你还可以为 issue 绑定上 milestone"),v("small",[t._v("（里程碑）")]),t._v("，来将 issue 与某些特定的项目节点关联起来。之后便可以在 milestones 页面查看每一个里程碑的进展。")]),t._v(" "),v("p",[t._v("和 labels 一样，里程碑也是一个十分灵活的功能，你可以根据项目需要建立不同的里程碑，比如：")]),t._v(" "),v("p",[t._v("基于软件版本号：基于未来将要发布的版本号建立里程碑，比如 v1.0.3、v2.0.1 等等")]),t._v(" "),v("p",[t._v("基于时间周期：基于特定的时间周期。例如在敏捷开发中以一个 sprint 来建立里程碑，比如 Y2017-M7W3、Y2017-M7W4 等等。")])])]),t._v(" "),v("h4",{attrs:{id:"使用-issue-board"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用-issue-board"}},[t._v("#")]),t._v(" 使用 issue board")]),t._v(" "),v("p",[t._v("使用 issue board"),v("small",[t._v("（类似于敏捷开发中的“看板”）")]),t._v("，可以在一个页面看到当前处于不同阶段的所有 issues。这个功能非常适合站立晨会时使用。")]),t._v(" "),v("h4",{attrs:{id:"勤于关闭-issues"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#勤于关闭-issues"}},[t._v("#")]),t._v(" 勤于关闭 issues")]),t._v(" "),v("p",[t._v("随着项目越来越大，项目累积的 issue 也会越来越多。而这些 issue 中有很多已经失去它的价值。")]),t._v(" "),v("p",[t._v("所以，为了避免有价值的 issue 淹没在这些过时的信息当中，我们应该定期 Review 现有的 issues，关闭掉那些已经过时的 issues。")]),t._v(" "),v("h3",{attrs:{id:"基于-pull-request-的开发流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基于-pull-request-的开发流程"}},[t._v("#")]),t._v(" 基于 Pull Request 的开发流程")]),t._v(" "),v("p",[t._v("在 GitLab 上创建的项目，所有人都不应该直接往 master 分支推送代码。而是应该在其他分支"),v("small",[t._v("（或者 fork 项目的分支）")]),t._v("进行开发。并最终通过创建 "),v("code",[t._v("Pull Request")]),v("small",[t._v("（类似 GitLib 中叫 "),v("code",[t._v("Merge Request")]),t._v("）")]),t._v("将代码合并到 master 分支。")]),t._v(" "),v("h4",{attrs:{id:"创建-pull-request-并进行-code-review"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建-pull-request-并进行-code-review"}},[t._v("#")]),t._v(" 创建 Pull Request 并进行 Code Review")]),t._v(" "),v("p",[t._v("基于 PR 的开发流程如下：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("开发者在自己的分支下进行开发，开发完成后，创建将该分支合并到 Master 的 Pull Request，改动进入 Review 状态；")])]),t._v(" "),v("li",[v("p",[t._v("进入 Review 状态的代码，将由团队内的其他一位成员（经验比较丰富、或者对该工作模块比较熟悉）对代码改动进行 Code Review；")])]),t._v(" "),v("li",[v("p",[t._v("大家对 Reivew 结果进行讨论，并提交新的修改；")])]),t._v(" "),v("li",[v("p",[t._v("最终达成一致后，代码被 Merge 进 Master 分支；")])])]),t._v(" "),v("p",[t._v("灵活创建新分支来避免 PR 冲突\n我们一般会用类似于 dev_piglei 这样的分支名称进行开发，遵循着 “开发” -> “push 并创建 PR” -> “开发” 这样的工作流程。")]),t._v(" "),v("p",[t._v("但是，因为一个分支是严格对应到一个 PR 的，当你在同一个分支上开发不同功能时，如果 PR 一直处于 open 状态，那这些不同功能都会被推送到同一个 PR 上，对 Review 过程产生困扰。")]),t._v(" "),v("p",[t._v("为了避免这种情况，最好为不同的功能项创建不同的分支并各自创建 PR，比如 dev_feature_add_member、dev_feature_disabled_user。")]),t._v(" "),v("p",[t._v("在 git 工作流方面，git-flow 工作流是一个值得学习的内容")]),t._v(" "),v("h4",{attrs:{id:"分拆大的-pull-request"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分拆大的-pull-request"}},[t._v("#")]),t._v(" 分拆大的 Pull Request")]),t._v(" "),v("p",[t._v("如果开发一些比较大的需求，我们通常会将他们一次实现完，然后作为一个大的 PR 来提交 Review。")]),t._v(" "),v("p",[t._v("但是如果每个 PR 过于复杂，会大大影响 Code Review 的效率。所以，如果你要实现一个比较复杂的特性，建议将它拆解为多个比较小的 PR 来依次提交。")]),t._v(" "),v("p",[t._v("假如，你要为网站的 feed 页面从零开始添加 redis 缓存功能。可能一开始想的提交这个大 PR：")]),t._v(" "),v("ul",[v("li",[t._v("[PR] 添加基于 redis 的缓存模块并为 feed 页面添加缓存并主动过期")])]),t._v(" "),v("p",[t._v("但这个 PR 里面包含了太多内容，会增加 Review 的难度。所以可以试着将这个功能拆解为下面三个更小的 PR：")]),t._v(" "),v("ul",[v("li",[t._v("[PR] 添加基于缓存模块")]),t._v(" "),v("li",[t._v("[PR] 为缓存模块添加 Redis 作为存储后端")]),t._v(" "),v("li",[t._v("[PR] 为 feed 页面提供缓存，并主动过期")])]),t._v(" "),v("p",[t._v("谨记：超过 1000 行的代码改动 Review 起来非常困难。")]),t._v(" "),v("h2",{attrs:{id:"cherry-pick"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cherry-pick"}},[t._v("#")]),t._v(" cherry-pick")]),t._v(" "),v("p",[t._v("在工作中你可能遇到这样的情景：")]),t._v(" "),v("blockquote",[v("p",[t._v("你在你的工作分支上准备憋个大招：开发 A、B、C 三个功能，现在你已经完成了 A、B 功能，正在开发 C 功能。现在关键时间点到了，项目需要先打个版本进行测试，此时，项目经理会要求你将 A、B 两个功能先合到主分支中，暂时先不测试 C 功能。")])]),t._v(" "),v("p",[v("strong",[t._v("这种情况下你需要将你的分支中的部分 Commit『同步』到主分支，而不是全部。")])]),t._v(" "),v("p",[t._v("Git 通过 cherry-pick 功能支持从另一个分支上挑选其上的某个或某些 Commit 到当前分支，而不是合并整个分支。")]),t._v(" "),v("blockquote",[v("p",[t._v("当然，不使用 cherry-pick 功能，曲线救国地你也能实现你的目标，但是终归不如 cherry-pick 直接。")])]),t._v(" "),v("p",[t._v("在图形化界面上执行 cherry-pick 功能十分简单、直观。假设你要从 feature-1 分支上挑选某个分支合并到 master 分支。站在 master 分支的角度，对你『选中』的 feature-1 分支上的某个 Commit 执行 cherry-pick 功能即可。")]),t._v(" "),v("hr"),t._v(" "),v("p",[t._v("挑选 feature-1 分支的某个、某些 Commit 合并到 master 分支之后，master 分支和 feature-1 分支会含有同样 Commit。")]),t._v(" "),v("p",[t._v("这时你可以考虑在结合变基功能来优化整个记录树。在对 feature-1 变基时，Git 会发现 feature-1 和 master 有同样的 Commit，此时，你告诉 Git 在变基过程中忽略掉它即可。")]),t._v(" "),v("h2",{attrs:{id:"标签"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[t._v("#")]),t._v(" 标签")]),t._v(" "),v("p",[t._v("标签的作用是为为版本库的某个版本（通常是当前版本）作一个快照，并为其赋予一个更有意义的名称。")]),t._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[t._v("$ "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("标签名"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("分支名"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" -m "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"备注"')]),t._v("\n")])])]),v("p",[t._v("push 操作通常不会自动传送标签，因此，在 push 操作是需要额外指明。")]),t._v(" "),v("div",{staticClass:"language-shell extra-class"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[t._v("$ "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --tags\n")])])]),v("p",[t._v("通过 "),v("strong",[t._v("-l")]),t._v(" 选项的 "),v("strong",[t._v("git tag")]),t._v(" 命令可以查看所有标签。另外，通过 "),v("strong",[t._v("--decorate")]),t._v(" 选项的 log 命令，可以在日记中显示标签。")])])}),[],!1,null,null,null);e.default=_.exports}}]);