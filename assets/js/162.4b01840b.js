(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{530:function(t,a,s){"use strict";s.r(a);var n=s(47),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java-引用的强软弱虚"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-引用的强软弱虚"}},[t._v("#")]),t._v(" Java 引用的强软弱虚")]),t._v(" "),s("p",[t._v("Java 的引用的类型有四种：强引用、软引用、弱引用和虚引用。它们背后关系到 JVM 的垃圾回收机制回收内存的时机。")]),t._v(" "),s("blockquote",[s("p",[t._v("提前声明以下，这是纯理论概念，我们日常写代码的时候并不会涉及到软弱虚引用，通常只会涉及到强引用。")])]),t._v(" "),s("p",[t._v("强软弱虚四种类型的引用的概念其实并非 Java 语言所特有，例如，苹果公司的 Objective-C 语言中同样也有一样的概念。")]),t._v(" "),s("h2",{attrs:{id:"_1-objective-c-中的引用计数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-objective-c-中的引用计数"}},[t._v("#")]),t._v(" 1. Objective-C 中的引用计数")]),t._v(" "),s("p",[t._v("苹果公司的 Objective-C 语言是没有垃圾回收机制的，那么为了解决回收内存行为不当所造成的内存泄露和 double free 问题，苹果公司为 Objective-C 语言引入了【"),s("strong",[t._v("引用计数")]),t._v("】的概念，并将指针类型细化为强弱指针两种。")]),t._v(" "),s("blockquote",[s("p",[t._v("为了便于大家类比，我们后文就将 OC 中的指针“不严谨地”称为引用，将分配在堆空间的内存“不严谨地”称为对象。")])]),t._v(" "),s("p",[t._v("Objective-C 的编译器在编译 OC 源码的时候会去记录、统计一个对象的引用的数量，这个值也就是这个对象的【引用计数】。")]),t._v(" "),s("p",[t._v("当没有任何一个引用指向这个对象时，即这个对象的引用计数变为 0 时，编译器会在导致引用计数从 1 变为 0 的那条语句的后面，【帮】你加上一条释放内存空间的语句。")]),t._v(" "),s("p",[t._v("通过这样一种 "),s("code",[t._v("记录、统计对象的引用计数")]),t._v(" + "),s("code",[t._v("【帮】你加释放内存的代码")]),t._v(" 从而实现帮助 OC 程序员释放内存，管理内存空间，达到避免内存泄漏和 double free 的目的。")]),t._v(" "),s("p",[t._v("那这和【强弱引用】有什么关系？")]),t._v(" "),s("p",[s("strong",[t._v("并不是所有的引用都会导致对象的引用计数 +1")]),t._v(" 。")]),t._v(" "),s("p",[t._v("如果是一个强引用指向了对象，那么对象的引用计数 +1，如果是一个弱引用指向了对象，那么对象的引用计数不受影响。")]),t._v(" "),s("p",[t._v("伪代码如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("__strong "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" tom "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n__strong "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" jerry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n__weak "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" lucy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n__weak "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" lily "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jerry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\ntom "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\njerry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6")]),t._v("\n")])])]),s("p",[t._v("以上的代码中，有且仅有一个对象，而 "),s("code",[t._v("tom")]),t._v("、"),s("code",[t._v("jerry")]),t._v("、"),s("code",[t._v("lucy")]),t._v(" 和 "),s("code",[t._v("lily")]),t._v(" 是四个引用类型变量，它们都指向的是同一个对象。")]),t._v(" "),s("p",[s("code",[t._v("代码1")]),t._v(" 执行完后，Student 对象的引用计数为 1；"),s("code",[t._v("代码2")]),t._v("执行完后，Student 对象的引用计数 +1 变为 2，因为此时有两个强引用指向了这个对象；")]),t._v(" "),s("p",[s("code",[t._v("代码3")]),t._v(" 和 "),s("code",[t._v("代码4")]),t._v(" 执行完后，Student 对象的引用计数仍然为 2，因为，即便 lucy 和 lily 这两个引用确实指向的是这个对象，但是谁叫它们“低人一等”是 "),s("strong",[t._v("弱引用")]),t._v(" 呢。")]),t._v(" "),s("p",[s("code",[t._v("代码5")]),t._v(" 执行完后，Student 对象的引用计数从 2 降为 1，因为此时，只有 jerry 这一个强引用指向了 Student 对象；而 "),s("code",[t._v("代码6")]),t._v(" 执行完后，Student 对象的引用计数就将为了 0 。")]),t._v(" "),s("p",[t._v("在 OC 的编译器编译源码时，它会在 "),s("code",[t._v("代码6")]),t._v(" 之后【帮】我们加上一句释放 Student 对象所占内存空间的语句，即释放内存空间。")]),t._v(" "),s("blockquote",[s("p",[t._v("在内存和释放后，"),s("code",[t._v("lucy")]),t._v(" 和 "),s("code",[t._v("lily")]),t._v(" 这两个引用类型的变量实际上就指向了一块已回收的存空间，这个时候，你再通过 "),s("code",[t._v("lucy.xxx")]),t._v(" 和 "),s("code",[t._v("lily.xxx")]),t._v(" 来操作、访问这块内存空间的话，就会报运行时错误（大名鼎鼎的 Segment Fault）。")])]),t._v(" "),s("h2",{attrs:{id:"_2-java-中的强引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-java-中的强引用"}},[t._v("#")]),t._v(" 2. Java 中的强引用")]),t._v(" "),s("p",[t._v("Java 语言没有引用计数的概念，但是 Java 中的强弱引用的概念和 OC 中的强弱引用的概念是一模一样的。")]),t._v(" "),s("p",[t._v("强引用会影响对象被垃圾回收机制回收；而弱引用则对内存的回收无影响。")]),t._v(" "),s("p",[s("strong",[t._v("我们日常编码所涉及到的引用全部都是强引用")]),t._v("，例如：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" tom "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" jerry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" lucy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" lily "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jerry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上述代码中，有 4 个引用指向了同一个对象。只要至少还存在一个引用指向这个对象，那么，这个 Student 对象的内存空间就不会被 JVM 回收。")]),t._v(" "),s("p",[t._v("最极端的情况下，如果所有的对象都至少存在一个强引用指向它，而随着系统中的对象越来越多，到最后内存不够用了，JVM 会抛出 OutOfMemoryError 异常。")]),t._v(" "),s("p",[t._v("JVM 哪怕最后“忍无可忍”抛出异常，它也"),s("strong",[t._v("一定不会回收")]),t._v("仍然被使用的对象所占据的内容空间。逻辑上，也理应如此。")]),t._v(" "),s("h2",{attrs:{id:"_3-java-中的软引用和弱引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-java-中的软引用和弱引用"}},[t._v("#")]),t._v(" 3. Java 中的软引用和弱引用")]),t._v(" "),s("p",[t._v("和 OC 中的弱引用一样，Java 中的软弱引用也“低人一等”。软弱引用不会影响到 Java 的垃圾回收机制回收内存。")]),t._v(" "),s("p",[t._v("但是，软引用又比弱引用要“高”半个身位。")]),t._v(" "),s("h3",{attrs:{id:"java-中的软引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-中的软引用"}},[t._v("#")]),t._v(" Java 中的软引用")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" tom "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SoftReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" jerry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SoftReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ntom "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上述代码中的 jerry 就是一个弱引用。理论上，当 "),s("code",[t._v("tom = null")]),t._v(" 之后，Student 对象就应该被垃圾回收机制回收。")]),t._v(" "),s("p",[t._v("不过“理论是理论，现实是现实”，在 "),s("code",[t._v("tom = null")]),t._v(" 之后还有一些“小故事”。")]),t._v(" "),s("p",[t._v("“故事一”，JVM 的垃圾回收机制并不是时时刻刻保持运行的。由于垃圾回收器是一个优先级很低的线程，所以 JVM 的垃圾回收器是“间歇性、间歇性地起来干活”的。")]),t._v(" "),s("blockquote",[s("p",[t._v("另外，现在的 JVM 机制中，你手动调用 "),s("code",[t._v("System.gc();")]),t._v(" JVM 也不保证垃圾回收器立刻起来干活。")])]),t._v(" "),s("p",[t._v("因此，在你的 "),s("code",[t._v("tom = null")]),t._v(" 之后，即便是 Student 对象没有强引用指向了，即逻辑上没人用了，但是实际上它还是要在内存中存在一段时间的。")]),t._v(" "),s("p",[t._v("“故事二”，即便是“软引用低人一等”，但是，JVM 的垃圾回收器仍让会对有软引用指向的对象网开一面。如果内存还有“富余”，垃圾回收器就不会回收软引用所指向的内存的对象。")]),t._v(" "),s("p",[t._v("也就是说，垃圾回收器的逻辑的伪代码类似如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("对象"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("强引用数 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 准备释放内存")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("对象"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("软引用数 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" 内存够用"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 网开一面")]),t._v("\n        暂不释放对象内存"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        释放对象内存"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"java-中的弱引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-中的弱引用"}},[t._v("#")]),t._v(" Java 中的弱引用")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" tom "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" jerry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WeakReference")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("弱引用就没有软引用那么好命，JVM 的垃圾回收器不会对它网开一面，只要对象的没有强引用了，无论有多少弱引用指向这个对象，也无论此时内存够不够用，JVM 的垃圾回收器都会回收内存。")]),t._v(" "),s("blockquote",[s("p",[t._v("从这个角度看，其实你可以将 "),s("strong",[t._v("软引用")]),t._v(" 看做是 "),s("strong",[t._v("弱引用")]),t._v(" 的一种特殊情况。软引用是会被垃圾回收器网开一面的弱引用。")])]),t._v(" "),s("p",[t._v("不过，考虑上面所提到的垃圾回收器是一个优先级很低的线程，因此一个只有弱引用指向的对象，它还是有一段时间苟延残喘的：垃圾回收器还没起来干活，还没发现它。")]),t._v(" "),s("h3",{attrs:{id:"java-中的虚引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-中的虚引用"}},[t._v("#")]),t._v(" Java 中的虚引用")]),t._v(" "),s("p",[t._v("虚引用和弱引用一样，它不影响垃圾回收器回收内存。一个仅有虚引用的对象，一旦被垃圾回收器发现，就会被回收内存。")]),t._v(" "),s("p",[t._v("虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用的级别比弱引用更低：弱引用 "),s("strong",[t._v("可以")]),t._v(" 和引用队列（ReferenceQueue）联合使用；而虚引用 "),s("strong",[t._v("只能")]),t._v(" 和引用队列联合使用。")]),t._v(" "),s("h3",{attrs:{id:"扩展-为什么-oc-会提出弱引用的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展-为什么-oc-会提出弱引用的概念"}},[t._v("#")]),t._v(" 扩展：为什么 OC 会提出弱引用的概念？")]),t._v(" "),s("p",[t._v("Objective-C 的引用计数的概念可以帮助大家理解垃圾回收的概念，但是大家有没有发现，如果只有强引用的概念，仅凭对象的强引用的计数来决定这个对象是否应该被销毁，回收内存，会有一个问题："),s("strong",[t._v("循环引用")]),t._v(" 。")]),t._v(" "),s("p",[t._v("例如，有如下两个类定义：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Husband")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wife")]),t._v(" wife"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wife")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Husband")]),t._v(" husband"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("如果有丈夫、妻子两个对象互相引用，会出现什么问题？")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Husband")]),t._v(" tom "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Husband")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wife")]),t._v(" jerry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wife")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ntom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setWife")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jerry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\njerry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHusband")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("因为 tom 和 jerry 互相持有对方的一个强引用，因此，在 OC 中 "),s("strong",[t._v("丈夫和妻子对象的引用计数永不为 0")]),t._v(" ，这就是【循环引用】。这种情况下，靠 OC 的编译器去【帮】我们加释放内存的代码，编译器是不会【帮】这个忙的，在它看来，这两个对象【还在被使用】啊？！")]),t._v(" "),s("blockquote",[s("p",[t._v("对于这种情况，就只能靠程序员自己调用 "),s("code",[t._v("free()")]),t._v(" 手动释放。")])]),t._v(" "),s("p",[t._v("当然，这只是最简单的循环引用情况，更复杂一点的可能是 A->B->C->D->E->A 这么一大圈的循环引用。")]),t._v(" "),s("p",[t._v("所有，这种情况下，OC 引入弱引用的概念，将两者中的某一方所持有的对方的引用从强引用改为弱引用，让整个【圈】中的某一个对象的引用计数能够变为 0，从而从它开始逐个释放掉整个【圈】中的各个对象的内存，进而解决这个循环依赖引用问题。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("当然，在 Java 中我们不用考虑这个问题，因为判断多个对象之间是否存在循环引用问题，这个事情 JVM 的垃圾回收器它自己就干了，不需要我们像 OC 一样【亲自】通过弱引用来解决这个问题。")]),t._v(" "),s("p",[t._v("这也是我们日常编码中用不上软弱虚引用的原因。")])])}),[],!1,null,null,null);a.default=e.exports}}]);