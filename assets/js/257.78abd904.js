(window.webpackJsonp=window.webpackJsonp||[]).push([[257],{623:function(t,o,r){"use strict";r.r(o);var v=r(47),_=Object(v.a)({},(function(){var t=this,o=t.$createElement,r=t._self._c||o;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"自动配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自动配置"}},[t._v("#")]),t._v(" 自动配置")]),t._v(" "),r("p",[t._v("SpringBoot 通过 "),r("strong",[t._v("自动配置")]),t._v(" 简化了大量的繁复的配置信息。")]),t._v(" "),r("p",[t._v("启动类 Application 中有两处特别之处：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("注解："),r("strong",[t._v("@SpringBootApplication")])])]),t._v(" "),r("li",[r("p",[t._v("run 方法："),r("em",[r("strong",[t._v("SpringApplication.run(...)")])])])])]),t._v(" "),r("p",[r("strong",[t._v("@SpringBootApplication")]),t._v(" 注解至少等价于以下三个注解：")]),t._v(" "),r("ul",[r("li",[r("p",[r("strong",[t._v("@SpringBootConfiguration")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("该是来声明当前类是 SpringBoot 应用的配置类，"),r("strong",[t._v("一个项目中只能有一个")]),t._v("。")])]),t._v(" "),r("li",[r("p",[t._v("因为该注解的存在，Spring 会再去【找】所有添加了 "),r("strong",[t._v("@Configuration")]),t._v(" 的类，做相应的操作。")])])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("@EnableAutoConfiguration")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("该注解的作用是告诉 Spring Boot 基于 "),r("strong",[t._v(".pom")]),t._v(" 文件中添加的的 starter 依赖，进行自动配置。")])]),t._v(" "),r("li",[r("p",[t._v("例如，我们引入了 "),r("strong",[t._v("spring-boot-starter-web")]),t._v("，而这个启动器中帮我们添加了 tomcat、Spring MVC 的依赖。")])]),t._v(" "),r("li",[r("p",[t._v("SpringBoot 内部对大量的第三方库或 Spring 内部库进行了默认配置，"),r("strong",[t._v("这些配置是否生效，取决于我们是否引入了对应 starter")]),t._v(" 。")])])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("@ComponentScan")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("该注解提供了类似与 "),r("code",[t._v("<context:component-scan>")]),t._v(" 标签的作用。")])]),t._v(" "),r("li",[r("p",[t._v("通过 "),r("em",[t._v("basePackageClasses")]),t._v(" 或者 "),r("em",[t._v("basePackages")]),t._v(" 属性来指定要扫描的包。如果没有指定这些属性，那么将从声明这个注解的类所在的包开始，扫描包及子包。")])]),t._v(" "),r("li",[r("p",[t._v("因此，"),r("strong",[t._v("启动类需要放在一个比较前/浅的包目录中")]),t._v(" 。")])])])])]),t._v(" "),r("p",[r("strong",[t._v("spring-boot-autoconfigure.jar")]),t._v(" 中的 "),r("strong",[t._v("org.springframework.boot.autoconfigure")]),t._v(" 包下包含了各种框架/库的默认配置。")]),t._v(" "),r("hr"),t._v(" "),r("p",[t._v("由 Spring 负责提供的 用于快速整合 XXX 框架/组件的自动配置快速整合包，通常的命名规则是："),r("em",[t._v("spring-boot-starter-xxx")]),t._v(" 。例如：")]),t._v(" "),r("ul",[r("li",[r("p",[r("code",[t._v("spring-boot-starter-tomcat")])])]),t._v(" "),r("li",[r("p",[r("code",[t._v("spring-boot-starter-thymleaf")])])])]),t._v(" "),r("p",[t._v("这种由 Spring 提供的自动配置快速整合的包，其版本信息在 spring-boot-parent 中已定义，"),r("small",[t._v("（除非是真有需要，否则）")]),t._v("不需要指定版本信息。")]),t._v(" "),r("p",[t._v("由 XXX 框架/组件方负责提供的用于与 Spring 快速整合的包， 通常的命名规则是： "),r("em",[r("strong",[r("code",[t._v("xxx-spring-boot-starter")])])]),t._v(" 。例如：")]),t._v(" "),r("ul",[r("li",[r("p",[r("code",[t._v("mybatis-spring-boot-starter")])])]),t._v(" "),r("li",[r("p",[r("code",[t._v("druid-spring-boot-starter")])])])]),t._v(" "),r("p",[r("strong",[t._v("这种由 XXX 方提供的自动配置快速整合包，需要指定版本信息。")])])])}),[],!1,null,null,null);o.default=_.exports}}]);