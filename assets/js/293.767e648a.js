(window.webpackJsonp=window.webpackJsonp||[]).push([[293],{661:function(t,a,s){"use strict";s.r(a);var e=s(47),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"hystrix-dashboard-服务监控"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hystrix-dashboard-服务监控"}},[t._v("#")]),t._v(" Hystrix-DashBoard 服务监控")]),t._v(" "),s("h2",{attrs:{id:"_1-单服务监控"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-单服务监控"}},[t._v("#")]),t._v(" 1. 单服务监控")]),t._v(" "),s("p",[t._v("在使用了 Hystrix 进行服务熔断降级之后，我们亟待于有一种方式可以查看 Spring Cloud 微服务各个节点的哪些方法接口触发了熔断、请求成功数量、请求失败数量，包括断路器状态、服务请求频率等信息。")]),t._v(" "),s("p",[t._v("运维人员对这些信息进行观察、分析之后，才能有效的进行服务的扩容、调整，从而更好地满足微服务系统的高并发以及高可用的要求！")]),t._v(" "),s("p",[s("strong",[t._v("注意")]),t._v("：由于 Hystrix 是作用于服务的发起方的，所有我们这里贯彻的是请求发起方的 Hystrix 的实时信息，当然，这也间接反映出了请求接收方的运行状态。")]),t._v(" "),s("p",[t._v("在整个监控体系中，角色有 3 个：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("注册中心")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("服务提供者")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("服务调用者")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("eureka-server")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("eureka-client")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("eureka-client")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("em",[t._v("actuator")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("web")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("web")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}}),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("em",[t._v("actuator")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("hystrix")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}}),t._v(" "),s("td",{staticStyle:{"text-align":"left"}}),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("hystrix-dashboard")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}}),t._v(" "),s("td",{staticStyle:{"text-align":"left"}}),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("actuator")])])])])]),t._v(" "),s("h3",{attrs:{id:"step-1-对外暴露-hystrix-stream-端点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#step-1-对外暴露-hystrix-stream-端点"}},[t._v("#")]),t._v(" step 1. 对外暴露 "),s("strong",[t._v("hystrix.stream")]),t._v(" 端点")]),t._v(" "),s("p",[t._v("未来，Hystrix Dashboard 要通过访问 Hystrix 所在服务的 actuator 的 "),s("code",[t._v("hystrix.stream")]),t._v(" 端点，来获得 Hystrix 的运行情况，其中就包括Hystrix 所统计的对外发起调用的成功、失败、熔断等情况。")]),t._v(" "),s("p",[t._v("因此，我们首先要 "),s("strong",[t._v("hystrix.stream")]),t._v(" 端点可访问。否则，你访问该该端点的 URL 时会出现 404 错误。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("management")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("endpoints")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("web")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exposure")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" refresh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" health"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hystrix.stream\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#       include: "*"')]),t._v("\n")])])]),s("p",[t._v("通过配置，开放 actuator 的 "),s("strong",[t._v("hystrix.stream")]),t._v(" 端点后，你可以通过 "),s("a",{attrs:{href:"http://localhost:9090/actuator/hystrix.stream",target:"_blank",rel:"noopener noreferrer"}},[s("em",[t._v("http://localhost:9090/actuator/hystrix.stream")]),s("OutboundLink")],1),t._v(" 查看到服务调用者的熔断信息。")]),t._v(" "),s("p",[t._v("但是，在初次访问时，你会看到大量的滚动的 "),s("em",[s("strong",[t._v("ping")])]),t._v(" 字样，而无实际内容！这是因为，服务调用着还未发出对提供者的远程调用，因此 Hystrx 的熔断功能一次执行机会都没有。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-1.png",alt:"hystrix-dashboard-1"}})]),t._v(" "),s("p",[t._v("你需要手动触发服务调用者的某个功能，进而使它去向服务提供者发出远程请求。在此之后，你在页面上会看到滚动的大段的 Hystrix 相关信息。")]),t._v(" "),s("h3",{attrs:{id:"step-2-启用-hystrix-dashboard"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#step-2-启用-hystrix-dashboard"}},[t._v("#")]),t._v(" step 2: 启用 hystrix-dashboard")]),t._v(" "),s("p",[t._v("为『"),s("strong",[t._v("服务使用者")]),t._v("』添加 "),s("strong",[t._v("@EnableHystrixDashboard")]),t._v("，启用其 Hystrix Dashboard 功能。前提是它有 hystrix dashboard 依赖 。")]),t._v(" "),s("p",[t._v("在启用 Hystrix Dashboard 功能之后，通过网址 "),s("a",{attrs:{href:"%5Bhttp://localhost:9090/hystrix%5D"}},[s("em",[t._v("http://localhost:9090/hystrix")])]),t._v(" 你可以看到 Hystrix Dashboard 自带的监控页面。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-2.png",alt:"hystrix-dashboard-2"}})]),t._v(" "),s("p",[t._v("按照页面上的提示，在输入框中输入需要观测的 URI，也就是上一步中的那个 "),s("code",[t._v("actuator/hystrix.stream")]),t._v(" 网址。")]),t._v(" "),s("p",[t._v("理论上，你本应该看见该看见的内容，但是实际上并没有：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-3.png",alt:"hystrix-dashboard-3"}})]),t._v(" "),s("p",[t._v("并且，在『服务调用者』的控制台你会看见 WARN 信息：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("Origin parameter: http://localhost:9090/actuator/hystrix.stream is not "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" the allowed list of proxy "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("host")]),t._v(" names. If it should be allowed "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" it to hystrix.dashboard.proxyStreamAllowList\n")])])]),s("p",[t._v("按照提示信息，将你要观察的 URL 添加到 hystrix 的 "),s("strong",[t._v("proxy-stream-allow-list")]),t._v(" 配置项中。这相当于是一个白名单。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hystrix")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("dashboard")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("proxy-stream-allow-list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" localhost"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 127.0.0.1\n")])])]),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-4.png",alt:"hystrix-dashboard-4"}})]),t._v(" "),s("p",[t._v("页面上的关键指标如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-5.png",alt:"hystrix-dashboard-5"}})]),t._v(" "),s("h2",{attrs:{id:"_2-hystrix-dashboard-集群监控"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-hystrix-dashboard-集群监控"}},[t._v("#")]),t._v(" 2. Hystrix-dashboard 集群监控")]),t._v(" "),s("p",[t._v("我们只能每次监控一个服务。在大型的微服务系统中动则几百微服务，还是需要一种把监控信息聚合起来的方式，方便我们发现集群内个服务节点中的问题。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-6.png",alt:"hystrix-dashboard-6"}})]),t._v(" "),s("blockquote",[s("p",[t._v("我们上面的例子中，为了简便起见，hystrix-dashboard 和服务调用者是同一个项目。按道理，应该创建一个单独的 hystrix-dashboard 项目来监控其它各个服务的熔断器状态。")])]),t._v(" "),s("p",[t._v("新建一个 Turbine 项目：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("加依赖：")]),t._v(" "),s("ul",[s("li",[t._v("eureka-client")]),t._v(" "),s("li",[t._v("netflix-turbine")])])]),t._v(" "),s("li",[s("p",[t._v("加注解:")]),t._v(" "),s("p",[t._v("在启动类上使用 "),s("strong",[t._v("@EnableTurbine")]),t._v(" 注解开启 Turbine 功能。")])]),t._v(" "),s("li",[s("p",[t._v("加配置：")]),t._v(" "),s("p",[t._v("在 application.yml 加入 Eureka Client 和 Turbine 的相关配置：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10086")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 其它配置和 Eureka Client 配置略。")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("turbine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app-config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CONSUMER\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cluster-name-expression")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(' new String("default")\n  '),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("combine-host-port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[s("strong",[t._v("turbine.app-config")]),t._v("：指定需要收集监控信息的服务名，多个服务名之间用逗号分隔。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("turbine.combine-host-port")]),t._v("：设置为 "),s("code",[t._v("true")]),t._v(" ，可以让同一主机上的服务通过主机名与端口号的组合来进行区分。默认情况下会以 host 来区分不同的服务，这会使得在本地调试的时候，本机上的不同服务聚合成一个服务来统计。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("turbine.cluster-name-expression")]),t._v("：指定集群名称为"),s("strong",[t._v("default")]),t._v("。当我们服务数量非常多的时候，可以启动多个 Turbine 服务来构建不同的聚合集群，而这个参数可以用来区分这些不同的聚合集群，同时这个参数值可以在 Hystrix Dashboard 中用来定位不同的聚合集群，只需要在 Hystrix Stream 的 URL 中通过 cluster 参数来指定。")])])]),t._v(" "),s("p",[s("strong",[t._v("注意")]),t._v("："),s("code",[t._v("default")]),t._v(" 这个一定要用 "),s("code",[t._v('new String("...")')]),t._v(" 来『包』一下，否则有 bug 。")])])]),t._v(" "),s("p",[t._v("访问 Turbine 的 "),s("em",[t._v("http://localhost:10086/turbine.stream")]),t._v(" ，你可以看到如下的文字信息：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-7.png",alt:"hystrix-dashboard-7"}})]),t._v(" "),s("p",[t._v("访问 Hystrix Dashboard 并对http://localhost:10086/turbine.stream 聚合结果进行监控：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-8.png",alt:"hystrix-dashboard-8"}})])])}),[],!1,null,null,null);a.default=r.exports}}]);