(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{575:function(t,s,a){"use strict";a.r(s);var r=a(47),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"查询语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询语句"}},[t._v("#")]),t._v(" 查询语句")]),t._v(" "),a("p",[t._v("你可能使用得最频繁的 SQL 语句是 "),a("strong",[t._v("SELECT")]),t._v(" 语句，其用途是从一个或多个表中检索信息。")]),t._v(" "),a("p",[a("strong",[t._v("增删改查")]),t._v(" 四大操作中，"),a("strong",[t._v("查")]),t._v(" 操作与 "),a("strong",[t._v("增删改")]),t._v(" 操作的总和的比为 7:1 到 9:1 之间。")]),t._v(" "),a("p",[t._v("SELECT 操作属于 "),a("strong",[t._v("DML")]),t._v(" 和 "),a("strong",[t._v("DQL")]),t._v(" 两大类语句中的 DQL 。")]),t._v(" "),a("p",[t._v("要使用 "),a("strong",[t._v("SELECT")]),t._v(" 检索表中的数据，至少必须指定两组信息：")]),t._v(" "),a("ul",[a("li",[t._v("你想得到什么")]),t._v(" "),a("li",[t._v("你想从哪里得到它")])]),t._v(" "),a("h2",{attrs:{id:"select-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#select-语句"}},[t._v("#")]),t._v(" Select 语句")]),t._v(" "),a("h3",{attrs:{id:"检索单独的列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检索单独的列"}},[t._v("#")]),t._v(" 检索单独的列")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("SELECT 语句从 "),a("code",[t._v("指定表")]),t._v(" 中检索单个 "),a("code",[t._v("指定列")]),t._v(" 的数据。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("想要的 "),a("strong",[t._v("列名称")]),t._v(" 紧接 "),a("strong",[t._v("SELECT")]),t._v(" 关键字之后指定 。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("FROM")]),t._v(" 关键字指定要从中检索数据的 "),a("strong",[t._v("表名称")]),t._v(" 。")])])]),t._v(" "),a("p",[t._v("查询出来的数据没有进行过滤，也没有进行排序。")]),t._v(" "),a("p",[t._v("注意，必须用分号（"),a("em",[a("code",[t._v(";")])]),t._v("）作为 SQL 语句的结束标记。")]),t._v(" "),a("p",[t._v("SQL 语句不区分大小写，因此 "),a("em",[a("code",[t._v("SELECT")])]),t._v(" 等同于 "),a("em",[a("code",[t._v("select")])]),t._v("，也等同于 "),a("em",[a("code",[t._v("Select")])]),t._v("。但是，约定俗成的习惯是：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("所有 SQL 关键字使用全大写字母；")])]),t._v(" "),a("li",[a("p",[t._v("列名和表名使用全小写字母")])])]),t._v(" "),a("h3",{attrs:{id:"检索多列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检索多列"}},[t._v("#")]),t._v(" 检索多列")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("从表中检索多列，可以使用相同的 SELECT 语句。唯一的区别是：必须在 SELECT 关键字后面指定多个列名称，并且用逗号（"),a("strong",[a("code",[t._v(",")])]),t._v("）把每个列隔开。")]),t._v(" "),a("p",[t._v("注意，最后一个列名称后面不需要逗号。")]),t._v(" "),a("h3",{attrs:{id:"检索所有列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检索所有列"}},[t._v("#")]),t._v(" 检索所有列")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("除了指定单列和多列以外，还可以使用 SELECT 语句请求所有列，而不必单独列出它们。")]),t._v(" "),a("p",[t._v("这是通过使用星号（"),a("strong",[a("code",[t._v("*")])]),t._v("）通配符替代实际的列名做到的。")]),t._v(" "),a("p",[t._v("不过，一般来说，在实际工作中最好不要使用 "),a("strong",[a("code",[t._v("*")])]),t._v(" 通配符，除非是确实需要表中的每一列。因为检索不必要的列通常会降低检索效率。")]),t._v(" "),a("h3",{attrs:{id:"使用完全限定的表名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用完全限定的表名"}},[t._v("#")]),t._v(" 使用完全限定的表名")]),t._v(" "),a("p",[t._v("表的完全限定名："),a("code",[t._v("库名.表名")])]),t._v(" "),a("p",[t._v("列的完全限定名："),a("code",[t._v("表名.列名")])]),t._v(" "),a("h2",{attrs:{id:"对检索的数据进行排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对检索的数据进行排序"}},[t._v("#")]),t._v(" 对检索的数据进行排序")]),t._v(" "),a("h3",{attrs:{id:"对数据进行排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对数据进行排序"}},[t._v("#")]),t._v(" 对数据进行排序")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如果不进行排序，那么数据是以它们加到表中的顺序排列显示。")]),t._v(" "),a("p",[t._v("如果需要显示地对检索出的数据进行排序，可以使用 "),a("strong",[a("code",[t._v("ORDER BY")])]),t._v(" 子句。")]),t._v(" "),a("p",[a("strong",[t._v("ORDER BY")]),t._v(" 用于获取一列或多列的名称，并通过它们对数据进行排序。")]),t._v(" "),a("h3",{attrs:{id:"按多个列进行排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#按多个列进行排序"}},[t._v("#")]),t._v(" 按多个列进行排序")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("要按多个列进行排序，可以简单地指定列名，并用逗号隔开它们。")]),t._v(" "),a("p",[t._v("在以第一个列进行排序出现相等情况是，会以第二列为条件对相关行再进行排序，并以此类推。")]),t._v(" "),a("h3",{attrs:{id:"指定排序方向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指定排序方向"}},[t._v("#")]),t._v(" 指定排序方向")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("默认情况下，排序是以自然顺序进行。数字以从小到大，字母以字典顺序")])]),t._v(" "),a("p",[t._v("要按降序排序，必须指定关键字 "),a("strong",[t._v("DESC")]),t._v(" 。")]),t._v(" "),a("p",[t._v("注意，"),a("strong",[t._v("DESC")]),t._v(" 关键字只对直接位于它之前的列名起作用。如果想要在多个列上以降序排序，就要确保没个列都具有它自己的 DESC 关键字。")]),t._v(" "),a("p",[t._v("升序的关键字是 "),a("strong",[t._v("ASC")]),t._v("，不过，在实际中通常不使用它。")]),t._v(" "),a("h2",{attrs:{id:"过滤数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤数据"}},[t._v("#")]),t._v(" 过滤数据")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("过滤条件"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("只检索想要的特定的数据，这需要指定 "),a("strong",[t._v("搜索条件")]),t._v("，也称为 "),a("strong",[t._v("过滤条件")]),t._v("。")]),t._v(" "),a("p",[t._v("WHERE 子句的运算符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("运算符")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("=")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("相等性")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("!=")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不等性")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("<>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不等性")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("<")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("小于")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("<=")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("小于或等于")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v(">")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("大于")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v(">=")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("大于或等于")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("BETWEEN...AND...")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("在两个指定值之间")])])])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("当在 "),a("strong",[t._v("WHERE")]),t._v(" 条件中使用日期概念时，可以书写成字符串形式（即使用单引号引住），但是该字符串必须合法特定的格式："),a("strong",[a("code",[t._v("'yyyy-MM-dd'")])]),t._v(" 。")]),t._v(" "),a("p",[t._v("表示日期概念的字符串可以进行大小判断。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("在创建表时，标设计者可以指定单独的列中是否允许为空，即不包含任何值。")]),t._v(" "),a("p",[t._v("当某一列没有包含任何值时，则称之为 "),a("strong",[t._v("NULL")]),t._v(" 。")]),t._v(" "),a("p",[t._v("注意，没有值（No Value），并不是 0、空字符串 或者 空白字符串 。")]),t._v(" "),a("p",[t._v("SELECT 语句具有一个特殊的 WHERE 子句判断："),a("strong",[a("code",[t._v("IS NULL")])]),t._v("。可以使用它检索具有 NULL 值得列：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("于此同时，还有 "),a("strong",[a("code",[t._v("IS NOT NULL")])]),t._v(" 判断：检索非空。")]),t._v(" "),a("h2",{attrs:{id:"高级数据过滤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高级数据过滤"}},[t._v("#")]),t._v(" 高级数据过滤")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("过滤条件"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("过滤条件"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("过滤条件"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("过滤条件"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("除了用单个条件过滤数据，为了对过滤进行更大程度的控制，MySQL 允许指定多个 WHERE 子句。")]),t._v(" "),a("p",[t._v("可以用两种方式使用这些子句：作为 "),a("strong",[t._v("AND")]),t._v(" 子句，或者，作为 "),a("strong",[t._v("OR")]),t._v(" 子句。")]),t._v(" "),a("p",[a("strong",[t._v("AND")]),t._v(" 运算符相当于在给 "),a("strong",[t._v("WHERE")]),t._v(" 子句 "),a("strong",[t._v("追加条件")]),t._v(" 。")]),t._v(" "),a("p",[a("strong",[t._v("OR")]),t._v(" 运算符指示检索与任意一个条件匹配的行。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("和编程有类似的情况，AND 和 OR 的优先级并非同级。AND 的优先级要高于 OR 。")]),t._v(" "),a("p",[t._v("SQL 将在 OR 运算符之前处理 AND 运算符。所以，请多考虑使用圆括号（"),a("code",[t._v("()")]),t._v("）。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" deptno "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" deptno "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" sal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),t._v("\n")])])]),a("hr"),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("值"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("值"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在某些场合下，"),a("strong",[t._v("IN")]),t._v(" 运算符可以替代 "),a("strong",[t._v("OR")]),t._v(" 运算符，来指定可能匹配的任何条件的范围。")]),t._v(" "),a("p",[t._v("IN 运算符有以下优点：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("IN 运算符语法要清晰得多，并且更容易读取。")]),t._v(" "),a("li",[t._v("IN 运算符比 OR 运算符执行速度更快。")]),t._v(" "),a("li",[t._v("IN 的最大的优点是：IN 运算符可以包含另一条 SELECT 语句，从而构建更加灵活的 WHERE 子句。")])])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("WHERE 子句的 NOT 运算符只有一种功能：否定气候出现的任何条件。")]),t._v(" "),a("p",[t._v("最常见的 NOT 出现的场景有：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("IS NOT NULL")]),t._v(" "),a("li",[t._v("NOT IN")])])]),t._v(" "),a("h2",{attrs:{id:"模糊查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模糊查询"}},[t._v("#")]),t._v(" 模糊查询")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("表名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("列名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("LIKE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("通配字符串"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("通配符：用于匹配值得某些部分的特殊字符。")]),t._v(" "),a("p",[t._v("要在 WHERE 子句中使用通配符，必须使用 "),a("strong",[t._v("LIKE")]),t._v(" 运算符。LIKE 指示 MySQL 使用 "),a("strong",[t._v("通配")]),t._v(" 的方式，而不是直接相等性匹配来比较后面的条件。")]),t._v(" "),a("p",[t._v("最常见的通配符是 "),a("strong",[t._v("百分号")]),t._v("（%）。在搜索字符串中，"),a("strong",[a("code",[t._v("%")])]),t._v(" 意指『匹配出现任意次数的任意字符串』。")]),t._v(" "),a("p",[t._v("注意，"),a("strong",[a("code",[t._v("%")])]),t._v(" 可以匹配 0 个字符。")]),t._v(" "),a("p",[t._v("可以在搜索字符串中的任意位置使用通配符，也可以使用多个通配符。")]),t._v(" "),a("p",[t._v("另一个需要注意的地方，"),a("strong",[a("code",[t._v("%")])]),t._v(" 通配符不会匹配 "),a("strong",[a("code",[t._v("NULL")])]),t._v(" 。")]),t._v(" "),a("p",[t._v("另一个有用的通配符是 "),a("strong",[t._v("下划线")]),t._v("（_）。它只匹配单个字符。")]),t._v(" "),a("h2",{attrs:{id:"聚合函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚合函数"}},[t._v("#")]),t._v(" 聚合函数")]),t._v(" "),a("p",[t._v("有时操作数据库的目的是汇总数据，而并非罗列所有的数据。常见情况有：")]),t._v(" "),a("ul",[a("li",[t._v("确定表中行数（或满足某个特定条件的行数）。")]),t._v(" "),a("li",[t._v("获得表中行组的和。")]),t._v(" "),a("li",[t._v("找出表列中的最大、最小、平均值。")])]),t._v(" "),a("p",[t._v("标准 SQL 中提供了5个 "),a("strong",[t._v("聚集函数")]),t._v("（也叫"),a("strong",[t._v("聚合函数")]),t._v("）来提供这样的功能。")]),t._v(" "),a("p",[a("strong",[t._v("聚集函数")]),t._v("：运行在行组上，计算和返回单个值的函数。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("聚合函数")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("AVG()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回某列的平均值。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("COUNT()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回某列的行数。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("MAX()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回某列的最大值。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("MIN()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回某列的最小值。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("SUM()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回某列的和。")])])])]),t._v(" "),a("h3",{attrs:{id:"avg-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#avg-函数"}},[t._v("#")]),t._v(" AVG 函数")]),t._v(" "),a("p",[t._v("AVG ( ) 通过对表中行数计数并计算特定列值之和，求得该列的平均值。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prod_price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" avg_price\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" products"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("结合 SELECT 语句中的 WHERE，AVG ( ) 可以用于返回特定数据的平均值。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prod_price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" avg_price\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" products\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" vend_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DLL01'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("AVG( )  只能用来计算某 "),a("strong",[t._v("一个特定数值列")]),t._v(" 的平均值，而且列名必须作为函数参数给定。为了获得多个列的平均值，必须使用多个 AVG ( ) 函数。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("quantity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item_price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" orderitems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("AVG ( ) 函数会忽略值为 NULL 的行。")]),t._v(" "),a("h3",{attrs:{id:"count-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#count-函数"}},[t._v("#")]),t._v(" COUNT 函数")]),t._v(" "),a("p",[t._v("COUNT ( ) 函数进行计数，利用 "),a("strong",[t._v("Count ( )")]),t._v(" 函数确定表中行的数目或符合特定条件的行数。")]),t._v(" "),a("p",[t._v("Count ( ) 函数有两种形式：")]),t._v(" "),a("ul",[a("li",[t._v("使用 Count ( * ) 会计算所有行，包括值为 NULL 的行。")]),t._v(" "),a("li",[t._v("使用 Count ( 列名 ) 只会计算指定列中有值的行，即忽略值为 NULL 的行。")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" num_cust\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cust_email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" num_cust\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" customers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("结合 SELECT 语句中的 WHERE，Count ( ) 可以用于计算符合特定条件的行的数量。")]),t._v(" "),a("h3",{attrs:{id:"max-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-函数"}},[t._v("#")]),t._v(" MAX 函数")]),t._v(" "),a("p",[a("code",[t._v("MAX()")]),t._v(" 返回指定列中的最大值。Max() 函数必须指定列名，即 "),a("code",[t._v("Max(列名)")]),t._v(" 。")]),t._v(" "),a("p",[a("code",[t._v("MAX()")]),t._v(" 函数一般用于找出最大的数值和日期值。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prod_price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" max_price "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" products"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" max_date "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("MAX()")]),t._v(" 函数也会忽略值为 NULL 的行。")]),t._v(" "),a("h3",{attrs:{id:"min-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#min-函数"}},[t._v("#")]),t._v(" MIN 函数")]),t._v(" "),a("p",[t._v("MIN ( ) 的功能正好与"),a("code",[t._v("MAX()")]),t._v("相反，它返回指定列的最小值。它也必须指定列名，即 Min ( 列名 ) 。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prod_price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" max_price "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" products"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MIN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" max_date "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("MIN ( ) 函数也会忽略值为 NULL 的行。")]),t._v(" "),a("h3",{attrs:{id:"sum-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sum-函数"}},[t._v("#")]),t._v(" SUM 函数")]),t._v(" "),a("p",[t._v("SUM ( ) 用来返回指定列值的和。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("quantity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" items_orderd\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" orderitems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("结合 SELECT 语句中的 WHERE 子句，SUM ( ) 函数可以计算某些数据的总和。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("quantity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" items_orderd\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" orderitems\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" order_num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20005")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("利用标准的算术运算符，所有聚集函数都可以用来执行多个列上的计算。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("quantity"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("item_price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" items_orderd\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" orderitems\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" order_num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20005")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("SUM ( ) 函数也会忽略值为 NULL 的行。")]),t._v(" "),a("h2",{attrs:{id:"分组查询和-having-子句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组查询和-having-子句"}},[t._v("#")]),t._v(" 分组查询和 Having 子句")]),t._v(" "),a("h3",{attrs:{id:"分组查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组查询"}},[t._v("#")]),t._v(" 分组查询")]),t._v(" "),a("p",[t._v("可以这么认为：在没有指定分组前，所有查询出来的数据默认都在同一个“"),a("strong",[t._v("组")]),t._v("”里。聚集函数都是这对一个组进行计算，并得出一个结果。")]),t._v(" "),a("p",[t._v("使用 GROUP BY 子句可以将表中的数据分为几个组进行处理。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" vend_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" products "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" vend_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("GROUP BY")]),t._v(" 子句和 "),a("strong",[t._v("SELECT")]),t._v(" 子句一样，可以通过逗号分隔指定多列。")]),t._v(" "),a("p",[t._v("在使用分组和聚集函数时，"),a("strong",[t._v("SELECT")]),t._v(" 子句中"),a("strong",[t._v("只能")]),t._v("存在以下三种元素：")]),t._v(" "),a("ul",[a("li",[t._v("常数")]),t._v(" "),a("li",[t._v("聚集函数")]),t._v(" "),a("li",[t._v("GROUP BY 子句中指定的列名")])]),t._v(" "),a("p",[t._v("在 "),a("strong",[t._v("GROUP BY")]),t._v(" 子句中不能使用列的别名。")]),t._v(" "),a("p",[t._v("只有 "),a("strong",[t._v("SELECT")]),t._v(" 子句和 "),a("strong",[t._v("HAVING")]),t._v(" 子句中能够使用聚集函数，特别是 "),a("strong",[t._v("WHERE")]),t._v(" 子句中无法使用。")]),t._v(" "),a("h3",{attrs:{id:"having-子句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#having-子句"}},[t._v("#")]),t._v(" HAVING 子句")]),t._v(" "),a("p",[t._v("使用聚集函数对表中数据进行聚集操作时，为其指定条件的不是 WHERE 子句，而需要使用 HAVING 子句。")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("WHERE 子句，用于指定行所对应的条件。")]),t._v(" "),a("li",[t._v("HAVING 子句，用于指定组所对应的条件。")])])]),t._v(" "),a("p",[t._v("自此，SELECT 语句中各种子句的顺序是：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("SELECT 子句")]),t._v(" "),a("li",[t._v("FROM 子句")]),t._v(" "),a("li",[t._v("WHERE 子句")]),t._v(" "),a("li",[t._v("GROUP BY 子句")]),t._v(" "),a("li",[t._v("HAVING 子句")]),t._v(" "),a("li",[t._v("ORDER BY 子句")]),t._v(" "),a("li",[t._v("LIMIT 子句")])])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"使用子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用子查询"}},[t._v("#")]),t._v(" 使用子查询")]),t._v(" "),a("p",[t._v("SQL 允许创建 "),a("strong",[t._v("子查询")]),t._v("（Subquery）：嵌入在其他查询语句中的查询。")]),t._v(" "),a("p",[t._v("子查询最常见的场景是：由一条 SELECT 语句返回的结果充当另一条 SELECT 语句的 WHERE 子句的条件（通常结合 IN 使用）。")]),t._v(" "),a("h2",{attrs:{id:"表之间的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表之间的关系"}},[t._v("#")]),t._v(" 表之间的关系")]),t._v(" "),a("h3",{attrs:{id:"一对多-多对一-使用最为广泛"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一对多-多对一-使用最为广泛"}},[t._v("#")]),t._v(" 一对多/多对一（使用最为广泛）")]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("员工 - 部门")]),t._v(" "),a("li",[t._v("学生 - 班级")]),t._v(" "),a("li",[t._v("问题 - 答案")])])]),t._v(" "),a("p",[t._v("要点：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[a("code",[t._v("多方")]),t._v(" 是从表；"),a("code",[t._v("一方")]),t._v(" 是主表。")]),t._v(" "),a("li",[t._v("从表使用外键列 引用/关联 主表的主键列。")]),t._v(" "),a("li",[t._v("某些情况下从表中的外键列可以（短暂地）为 NULL 。")]),t._v(" "),a("li",[t._v("如果从表中的外键列中有值，那么该值必须是主表主键列中已有的值。")])])]),t._v(" "),a("h3",{attrs:{id:"多对多-双向的一对多关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多对多-双向的一对多关系"}},[t._v("#")]),t._v(" 多对多（双向的一对多关系）")]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("学生 - 课程")]),t._v(" "),a("li",[t._v("电影 - 演员")]),t._v(" "),a("li",[t._v("订单 - 商品")])])]),t._v(" "),a("p",[t._v("要点：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("使用 "),a("code",[t._v("中间表")]),t._v(" 维护双方的关系。")]),t._v(" "),a("li",[t._v("中间表有两个列，都是外键，分别引用双方的主键。")]),t._v(" "),a("li",[t._v("中间表的这两列可以组成一个联合主键，当然也可以有 单独的/独立的 主键列。")])])]),t._v(" "),a("h3",{attrs:{id:"一对一-使用相对较少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一对一-使用相对较少"}},[t._v("#")]),t._v(" 一对一（使用相对较少）")]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("员工 - 合同")]),t._v(" "),a("li",[t._v("市民 - 身份证")])])]),t._v(" "),a("p",[t._v("要点：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("类似于一对多的情况，概念上需要分出主从表。")]),t._v(" "),a("li",[t._v("从表的外键列 引用/关联 到主表的主键。")])])]),t._v(" "),a("h2",{attrs:{id:"_10-关联查询-sql-语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-关联查询-sql-语句"}},[t._v("#")]),t._v(" 10. 关联查询 SQL 语句")]),t._v(" "),a("p",[t._v("SQL 最强大的一个特性是能够在数据检索查询内自由地连接表。连接是使用 SELECT 可以执行的最重要的操作之一。")]),t._v(" "),a("p",[t._v("如果把数据存储在多个表中，怎样才能利用独立一条 SELECT 语句检索该数据？"),a("strong",[t._v("连接")]),t._v("（Join）。")]),t._v(" "),a("p",[a("strong",[t._v("连接")]),t._v(" 使用一种特殊的语法，可以把多个表连接起来，并返回单个输出集，并且连接可以自由地关联每个表中正确的行。")]),t._v(" "),a("h5",{attrs:{id:"内连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内连接"}},[t._v("#")]),t._v(" 内连接")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" 主表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("列"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 从表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("列"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 主表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 从表\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" 主表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("主键 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 从表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("外键 \n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" 过滤条件 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),a("p",[t._v("如果两个表中的列名没有同名的，即，列名无歧义，那么 "),a("strong",[a("code",[t._v("表名.")])]),t._v(" 部分可以省略。")]),t._v(" "),a("p",[t._v("INNER JOIN 写法：")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" 主表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("列"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 从表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("列"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 主表 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INNER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" 从表 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" 主表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("主键 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 从表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("外键\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" 过滤条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("列名 和 表名 都可以指定别名。以用于缩写。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" 列名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 别名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" 别名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("其中 "),a("strong",[a("code",[t._v("AS")])]),t._v(" 关键字可以省略。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" 列名 别名"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" 表名 别名 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"_11-外连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-外连接"}},[t._v("#")]),t._v(" 11. 外连接")]),t._v(" "),a("ul",[a("li",[t._v("左外连接")]),t._v(" "),a("li",[t._v("右外连接")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEFT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RIGHT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("注意，从表在左，主表在右。")]),t._v(" "),a("h2",{attrs:{id:"_12-自连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-自连接"}},[t._v("#")]),t._v(" 12. 自连接")]),t._v(" "),a("p",[t._v("自连接的关键是使用别名！")])])}),[],!1,null,null,null);s.default=e.exports}}]);