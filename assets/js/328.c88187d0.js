(window.webpackJsonp=window.webpackJsonp||[]).push([[328],{698:function(t,e,s){"use strict";s.r(e);var a=s(47),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"spring-security-中的-filter-和-authenticationprovier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-security-中的-filter-和-authenticationprovier"}},[t._v("#")]),t._v(" Spring Security 中的 Filter 和 AuthenticationProvier")]),t._v(" "),s("h2",{attrs:{id:"_1-servlet-filter-链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-servlet-filter-链"}},[t._v("#")]),t._v(" 1. Servlet Filter 链")]),t._v(" "),s("p",[t._v("我们先来看下最基础的 Servlet Filter 体系，在 Servlet Filter 体系中客户端发起一个请求过程是经过 0 到 N 个 Filter 然后交给 Servlet 处理。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-security/img/spring-boot-security-filter-01.png",alt:"spring-boot-security-filter-01.png"}})]),t._v(" "),s("p",[t._v("Filter 不但可以修改 HttpServletRequest 和 HttpServletResponse ，可以让我们在请求响应的前后做一些事情，甚至可以终止过滤器链 FilterChain 的传递。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("为了形象化『链』，一般的图形图像中将 Filter Chain 都是画成『前后』的关系，但是实质上，Filter 和 Filter 之间是嵌套的『内外』的关系。")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doFilter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletRequest")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServletResponse")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FilterChain")]),t._v(" chain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求被servlet 处理前 ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("condition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据条件来进入下一个过滤器 ")]),t._v("\n        chain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doFilter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求被执行完毕后处理一些事情 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("由于 Filter 仅影响下游 Filters 和 Servlet ，因此每个 Filter 调用的顺序非常重要。")]),t._v(" "),s("h2",{attrs:{id:"_2-spring-security-接入-servlet-filter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring-security-接入-servlet-filter"}},[t._v("#")]),t._v(" 2. Spring Security 接入 Servlet Filter")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-security/img/spring-boot-security-filter-02.png",alt:"spring-boot-security-filter-02.png"}})]),t._v(" "),s("p",[t._v("从上图我们可以看出 Spring Security 以一个单 Servlet Filter："),s("strong",[t._v("FilterChainProxy")]),t._v(" 存在于整个过滤器链中，而这个 FilterChainProxy 实际内部代理着众多的 Spring Security Filter 。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("上图中的 FilterChainProxy 和 Spring Security Filter 的关系，有点类似 Spring MVC 中的 DispacherServlet 和 Controller 之间的关系。")])]),t._v(" "),s("h2",{attrs:{id:"_3-spring-security-的-filter-链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-spring-security-的-filter-链"}},[t._v("#")]),t._v(" 3. Spring Security 的 Filter 链")]),t._v(" "),s("p",[t._v("Spring Security 会创建内置的 Spring Security Filter ，并将它们组建成 Filter Chain "),s("small",[t._v("（有人称它们为虚拟链，以便于与 Servlet 的 Filter Chain 区别）")]),t._v("，并通过 FilterChainProxy 接入到 Servlet 的 Fialter Chain 中。")]),t._v(" "),s("p",[t._v("我们之前通过 HttpSecurity 做出的配置只生成了一条链。简单来说，在 Spring Security 中每一个 HttpSecurity 生成一条过滤器链。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-security/img/spring-boot-security-filter-11.png",alt:"spring-boot-security-filter-11.png"}})]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("Spring Security 允许同时存在多个 Security Filter Chain ，不过要实现这种功效不能用普通的配置方式配置。")])]),t._v(" "),s("p",[t._v("每条过滤链就是一个 "),s("strong",[t._v("SecurityFilterChain")]),t._v(" ：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SecurityFilterChain")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断请求是否符合该过滤器链的要求 ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("matches")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应的过滤器链 ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFilters")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("默认的过滤器链中包含以下过滤器：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-security/img/spring-boot-security-filter-10.png",alt:"spring-boot-security-filter-10.png"}})]),t._v(" "),s("h2",{attrs:{id:"_4-多个-spring-security-filter-chain-了解、自学"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-多个-spring-security-filter-chain-了解、自学"}},[t._v("#")]),t._v(" 4. 多个 Spring Security Filter Chain（了解、自学）")]),t._v(" "),s("p",[t._v("Spring Security 允许有多条过滤器链并行，Spring Security 的 "),s("strong",[t._v("FilterChainProxy")]),t._v(" 可以代理多条过滤器链并根据不同的 URI 匹配策略进行分发。但是每个请求每次只能被分发到一条过滤器链。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-security/img/spring-boot-security-filter-03.png",alt:"spring-boot-security-filter-03.png"}})]),t._v(" "),s("p",[t._v("在这种情况下，每个 Security Filter Chain 就只对自己负责的请求有作用，而对其它请求则视而不见。或者说，其它请求也轮不到它来『滤』。不同的 Security FilterChain 之间是互斥而且平等的。")]),t._v(" "),s("p",[t._v("每个 Security Filer Chain 在代码层面仍然也都是一个 SecurityFilterChain 对象。")]),t._v(" "),s("p",[t._v("另外，这多个 Security Filter Chain 和 FilterChainProxy 的关系如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-security/img/spring-boot-security-filter-05.png",alt:"spring-boot-security-filter-05.png"}})]),t._v(" "),s("p",[t._v("不过，要实现多个过滤器链的同时存在，需要经过特殊配置"),s("small",[t._v("（而非我们之前的那种配置）")]),t._v("，一般情况下这种需求并不多。")]),t._v(" "),s("h2",{attrs:{id:"_5-filtersecurityinterceptor-和-exceptiontranslationfilter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-filtersecurityinterceptor-和-exceptiontranslationfilter"}},[t._v("#")]),t._v(" 5. FilterSecurityInterceptor 和 ExceptionTranslationFilter")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-security/img/spring-boot-security-filter-09.png",alt:"spring-boot-security-filter-09.png"}})]),t._v(" "),s("p",[t._v("Security Chain 中的大多数 Filter 都是上图中『绿色』的那种过滤器，我们可以通过配置去影响到它们，甚至是决定是否需要启用它。而有些特殊的过滤器则是出现在过滤链中的固定位置、起固定作用、无法通过配置去影响的。")]),t._v(" "),s("p",[t._v("Security Filter Chain 中的最后一个过滤器是 "),s("strong",[t._v("FilterSecurityInterceptor")]),s("small",[t._v("（上图中橙色的那个过滤器）")]),t._v("，它是整个过滤器链的『守门员』，它的背后就是 Controller"),s("small",[t._v("（在不考虑其它 Web Filter 的情况下）")]),t._v("。")]),t._v(" "),s("p",[t._v("当请求走到 FilterSecurityInterceptor 时，FilterSecurityInterceptor 会根据配置去判断当前的 Authentiion 是否满足当前 URI 的放行要求。")]),t._v(" "),s("ul",[s("li",[t._v("如果当前的 Authentication 不满足通行要求，那么 FilterSecurityInterceptor 会抛出异常；")]),t._v(" "),s("li",[t._v("如果当前的 Authentication 满足通行要求，那么 FilterSecurityInterceptor 就会放行请求，Controller 中的代码就会被触发执行。")])]),t._v(" "),s("p",[t._v("Spring Security 有一个很有意思、很巧妙的设计，当 FilterSecurityInterceptor 判断 Authentication 不满足通行条件时，它会抛出异常"),s("small",[t._v("（不同的『不满足』情况下会抛出不同的异常）")]),t._v("。由于 filter 实质上是嵌套的内外层关系，所以这个异常就抛给了 FilterSecurityInterceptor 的前一个 filter："),s("strong",[t._v("ExceptionTranslationFilter")]),t._v(" ，就上图中蓝色的那个。")]),t._v(" "),s("p",[t._v("ExceptionTranslationFilter 的核心代码逻辑就是一个 "),s("code",[t._v("try ... catch ...")]),t._v("，在捕获到异常之后，做不同的处理，例如跳转显示登陆页面，要求用户登录。")]),t._v(" "),s("h2",{attrs:{id:"_6-小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-小结"}},[t._v("#")]),t._v(" 6. 小结")]),t._v(" "),s("p",[t._v("FilterChainProxy"),s("small",[t._v("（它是 Web Filter 上的一员）")]),t._v("的作用就是拦截访问请求，然后根据请求从多个 SecurityFilterChain 筛选出符合要求的那个"),s("small",[t._v("（绝大多数项目也就只有一个 SecurityFilterChain）")]),t._v("，然后链式的执行这些 SecurityFilter，最后继续执行剩下的 Web Filter。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-security/img/spring-boot-security-filter-06.png",alt:"spring-boot-security-filter-06.png"}})]),t._v(" "),s("h2",{attrs:{id:"_7-usernamepasswordauthenticationfilter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-usernamepasswordauthenticationfilter"}},[t._v("#")]),t._v(" 7. UsernamePasswordAuthenticationFilter")]),t._v(" "),s("p",[t._v("UsernamePasswordAuthenticationFilter 是 Security Filter Chain 上最常见一员。它实现了 HTTP 登录认证功能。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-security/img/spring-boot-security-filter-07.png",alt:"spring-boot-security-filter-07.png"}})]),t._v(" "),s("p",[t._v("它的作用是拦截登录请求并获取账号和密码，然后把账号密码封装到认证凭据 UsernamePasswordAuthenticationToken 中，然后把凭据交给特定配置的 "),s("strong",[t._v("AuthenticationManager")]),t._v(" 去作认证。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("当然，此时凭证（Authentication）的状态是未授信、未认证。")])]),t._v(" "),s("p",[t._v("那么，我们的问题是："),s("strong",[t._v("AuthenticationManager")]),t._v(" 从哪儿来，它又是什么，它是如何对凭据进行认证的，认证成功的后续细节是什么，认证失败的后续细节是什么？")]),t._v(" "),s("h2",{attrs:{id:"_8-authenticationmanager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-authenticationmanager"}},[t._v("#")]),t._v(" 8. AuthenticationManager")]),t._v(" "),s("p",[s("strong",[t._v("AuthenticationManager")]),t._v(" 这个接口方法非常奇特，入参和返回值的类型都是 Authentication 。该接口的作用是对用户的未授信凭据进行认证，认证通过则返回授信状态的凭据，否则将抛出认证异常 AuthenticationException 。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("Authentication 就是由 UsernamePasswordAuthenticationFilter 构造出来的。")])]),t._v(" "),s("p",[t._v("也就是说，一个 Authentication 在『通过』AuthenticationManager 之后，它的状态会改变，从『未授信』变成『已授信』，或者抛出异常"),s("small",[t._v("（表示认证失败）")]),t._v("。")]),t._v(" "),s("p",[t._v("AuthenticationManager 是一个接口，我们用到的实际是它的实现类 "),s("strong",[t._v("ProviderManager")]),t._v(" 。")]),t._v(" "),s("p",[t._v("AuthenticationManager/ProviderManager 管理着多个 AuthenticationProvider ，而每一个 AuthenticationProvider 都代表着一个验证过程。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("和 SecurityFilterChain 一样，常规项目"),s("small",[t._v("（以普通的配置方式进行配置）")]),t._v("中，你的 Provider 只有一个。")]),t._v(" "),s("p",[t._v("如果你需要你的环境中有多个 Provider ，那么需要以特殊的方式进行配置。")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("作为『大哥』，FilterChainProxy 和 AuthenticationManager 大多数情况下都比较可怜，手底下的『小弟』都只有一个。")])]),t._v(" "),s("p",[t._v("每一个 AuthenticationProvider 都只支持特定类型的 Authentication ，然后是对适配到的 Authentication 进行认证，只要有一个 AuthenticationProvider 认证成功，那么就认为认证成功，所有的都没有通过才认为是认证失败。")]),t._v(" "),s("p",[t._v("简单来说，表面上开起来是 AuthenticationManager/ProviderManager 在对 Authentication 做认证，实际上，是它的『小弟们』在做。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-security/img/spring-boot-security-filter-08.png",alt:"spring-boot-security-filter-08.png"}})]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("作为『大哥』，AuthenticationManager/ProviderManager 和 FilterChainProxy 的行为有很大的不同：")]),t._v(" "),s("ul",[s("li",[t._v("当收到一个访问请求后，FilterChainProxy 是将工作交给它手下的某一个 SecurityFilterChain 去做；")]),t._v(" "),s("li",[t._v("当收到一个凭证后，AuthenticationManager 是将工作交给它手下的每一个 Provider 去做。")])])]),t._v(" "),s("p",[t._v("在 Spring Security 中 SecurityProvider 和 UserDetailsPasswordService 的关系是 1:1 的关系：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不能有多个。否则， 就中断。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDetailsService")]),t._v(" userDetailsService "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBeanOrNull")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDetailsService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("userDetailsService "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DaoAuthenticationProvider")]),t._v(" provider "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DaoAuthenticationProvider")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nprovider"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUserDetailsService")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("userDetailsService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("DaoAuthenticationProvider 是 ProviderManager 的『小弟』之一。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),s("p",[t._v("在一套配置中如果你存在多个 UserDetailsService 的 Spring Bean 将会影响 DaoAuthenticationProvider 的注入。")])])])}),[],!1,null,null,null);e.default=r.exports}}]);