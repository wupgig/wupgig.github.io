(window.webpackJsonp=window.webpackJsonp||[]).push([[254],{626:function(t,e,s){"use strict";s.r(e);var c=s(47),u=Object(c.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"securityutils-getsubject"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#securityutils-getsubject"}},[t._v("#")]),t._v(" SecurityUtils.getSubject()")]),t._v(" "),s("p",[t._v("总的来说，SecurityUtils.getSubject() 是每个请求创建一个 Subject, 并保存到 ThreadContext 的 resources(ThreadLocal<Map<Object, Object>>)变量中，也就是一个 http 请求一个 subject ，并绑定到当前线程。")]),t._v(" "),s("p",[t._v("问题来了："),s("code",[t._v("subject.login()")]),t._v(" 登陆认证成功后，下一次请求如何知道是那个用户的请求呢？")]),t._v(" "),s("p",[t._v("如果是 web 工程，直接从 web 容器获取 httpSession，然后再从 httpSession 获取 Principals ，本质就是从 cookie 获取用户信息，然后每次都设置 Principal，这样就知道是哪个用户的请求，并只得到这个用户有没有人认证成功，--本质：依赖于浏览器的 cookie 来维护 session 的")]),t._v(" "),s("p",[t._v("简单来说，逻辑上相当于 "),s("code",[t._v("subject1 == subject2")]),t._v(" 是 false，但是 "),s("code",[t._v("subject1.equals(subject2)")]),t._v(" 是 true  。")])])}),[],!1,null,null,null);e.default=u.exports}}]);