(window.webpackJsonp=window.webpackJsonp||[]).push([[217],{584:function(t,s,a){"use strict";a.r(s);var e=a(47),_=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"mysql-解决时区相关问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-解决时区相关问题"}},[t._v("#")]),t._v(" MySQL 解决时区相关问题")]),t._v(" "),a("p",[t._v("在使用 MySQL 的过程中，你可能会遇到时区相关问题，比如说时间显示错误、时区不是东八区、程序取得的时间和数据库存储的时间不一致等等问题。其实，这些问题都与数据库时区设置有关。")]),t._v(" "),a("h2",{attrs:{id:"time-zone-参数介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#time-zone-参数介绍"}},[t._v("#")]),t._v(" time_zone 参数介绍")]),t._v(" "),a("p",[a("strong",[t._v("time_zone")]),t._v(" 参数用来设置『每个』连接会话的时区，可以动态修改。默认值为 "),a("strong",[t._v("SYSTEM")]),t._v("，此时使用的是全局参数 "),a("strong",[t._v("system_time_zone")]),t._v(" 的值，而 "),a("strong",[t._v("system_time_zone")]),t._v(" 默认继承自当前系统的时区，即，"),a("strong",[t._v("默认情况下 MySQL 时区和系统时区相同")]),t._v("。")]),t._v(" "),a("p",[t._v("时区设置主要影响时区敏感的时间值的显示和存储。包括一些函数（如 "),a("code",[t._v("now()")]),t._v("、"),a("code",[t._v("curtime()")]),t._v("）显示的值，以及存储在 TIMESTAMP 类型中的值，但不影响 DATE、TIME 和 DATETIME 列中的值，因为这些数据类型在存取时未进行时区转换，而 TIMESTAMP 类型存入数据库的实际是 UTC 的时间，查询显示时会根据具体的时区来显示不同的时间。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("查看 linux 系统时间及时区")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("查看 MySQL 当前时区、时间")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" show global variables like "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%time_zone%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("验证")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("global")]),t._v(" time_zone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'+4:00'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 或")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" time_zone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'+4:00'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),a("p",[t._v("如果需要永久生效，还需写入配置文件中。例如将时区改为东八区，则需要在配置文件 "),a("code",[t._v("[mysqld]")]),t._v("部分增加一行：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("default_time_zone = '+8:00'\n")])])]),a("h2",{attrs:{id:"时区常见问题及如何避免"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时区常见问题及如何避免"}},[t._v("#")]),t._v(" 时区常见问题及如何避免")]),t._v(" "),a("h3",{attrs:{id:"mysql-内部时间不是北京时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql-内部时间不是北京时间"}},[t._v("#")]),t._v(" MySQL 内部时间不是北京时间")]),t._v(" "),a("p",[t._v("遇到这类问题，首先检查下系统时间及时区是否正确，然后看下 MySQL 的 "),a("code",[t._v("time_zone")]),t._v(" ，建议将 "),a("code",[t._v("time_zone")]),t._v(" 改为 "),a("code",[t._v("+8:00")]),t._v(" 。")]),t._v(" "),a("h3",{attrs:{id:"java-程序存取的时间与数据库中的时间相差-8-小时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-程序存取的时间与数据库中的时间相差-8-小时"}},[t._v("#")]),t._v(" Java 程序存取的时间与数据库中的时间相差 8 小时")]),t._v(" "),a("p",[t._v("出现此问题的原因大概率是程序时区与数据库时区不一致导致的。我们可以检查下两边的时区，如果想统一采用北京时间，则可以在 jdbc 连接串中增加 "),a("code",[t._v("serverTimezone=Asia/Shanghai")]),t._v(" ，"),a("small",[t._v("（并且确保 MySQL 方面也可以将 "),a("code",[t._v("time_zone")]),t._v(" 改为 "),a("code",[t._v("+8:00")]),t._v(" ）？")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("serverTimeZone")]),t._v(" 的作用就是指定 web 服务器和 mysql 服务器的会话期间的 mysql 服务器时区，就是临时指定 mysql 服务器的时区。")])]),t._v(" "),a("h3",{attrs:{id:"程序时间与数据库时间相差-13-小时或-14-小时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序时间与数据库时间相差-13-小时或-14-小时"}},[t._v("#")]),t._v(" 程序时间与数据库时间相差 13 小时或 14 小时")]),t._v(" "),a("p",[t._v("如果说相差 8 小时不够让人惊讶，那相差 13 小时可能会让很多人摸不着头脑。出现这个问题的原因是 JDBC 与 MySQL 对 “CST” 时区协商不一致。因为 CST 时区是一个很混乱的时区，有四种含义：")]),t._v(" "),a("ul",[a("li",[t._v("美国中部时间 Central Standard Time (USA) UTC-05:00 或 UTC-06:00")]),t._v(" "),a("li",[t._v("澳大利亚中部时间 Central Standard Time (Australia) UTC+09:30")]),t._v(" "),a("li",[t._v("中国标准时 China Standard Time UTC+08:00")]),t._v(" "),a("li",[t._v("古巴标准时 Cuba Standard Time UTC-04:00")])]),t._v(" "),a("p",[t._v("MySQL 中，如果 time_zone 为默认的 SYSTEM 值，则时区会继承为系统时区 CST，MySQL 内部将其认为是 UTC+08:00。而 jdbc 会将 CST 认为是美国中部时间，这就导致会相差 13 小时，如果处在冬令时还会相差 14 个小时。")]),t._v(" "),a("p",[t._v("解决此问题的方法也很简单，我们可以明确指定 MySQL 数据库的时区，"),a("strong",[t._v("不使用引发误解的 CST")]),t._v(" ，可以将 time_zone 改为'+8:00'，同时 jdbc 连接串中也可以增加 serverTimezone=Asia/Shanghai。")]),t._v(" "),a("h2",{attrs:{id:"如何避免出现时区问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何避免出现时区问题"}},[t._v("#")]),t._v(" 如何避免出现时区问题")]),t._v(" "),a("p",[t._v("如何避免上述时区问题，可能你心里也有了些方法，简要总结几点如下：")]),t._v(" "),a("ul",[a("li",[t._v("首先保证系统时区准确。")]),t._v(" "),a("li",[t._v("jdbc 连接串中指定时区，并与数据库时区一致。")]),t._v(" "),a("li",[t._v("time_zone 参数建议设置为 '+8:00'，不使用容易误解的 CST。")]),t._v(" "),a("li",[t._v("各环境数据库实例时区参数保持相同。")])]),t._v(" "),a("p",[t._v("另外，可能有的同学说了，我们数据库中 time_zone 参数选择的是默认的 SYSTEM 值，也没有发生程序时间和数据库时间不一致的问题。此时是否需要将 time_zone 改为'+8:00'？在这种情况下还是建议将 time_zone 改为'+8:00'，特别是经常查询 TIMESTAMP 字段，因为当 time_zone=system 的时候，查询 timestamp 字段会调用系统的时区做时区转换，有全局锁 __libc_lock_lock 的保护，可能导致线程并发环境下系统性能受限。而改为'+8:00'则不会触发系统时区转换，使用 MySQL 自身转换，大大提高了性能。")])])}),[],!1,null,null,null);s.default=_.exports}}]);