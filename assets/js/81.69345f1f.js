(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{448:function(t,v,_){"use strict";_.r(v);var e=_(47),i=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"动画图解-git-的-10-大命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#动画图解-git-的-10-大命令"}},[t._v("#")]),t._v(" 动画图解 Git 的 10 大命令")]),t._v(" "),_("h2",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),_("p",[t._v("尽管 Git 是一款非常强大的工具。")]),t._v(" "),_("p",[t._v("我发现在使用 Git 时，在头脑里可视化地想象它会非常有用：当我执行一个特定命令时，这些分支会如何交互，又会怎样影响历史记录？为什么当我在 "),_("code",[t._v("master")]),t._v(" 上执行硬重启，"),_("code",[t._v("force push")]),t._v(" 到原分支以及 "),_("code",[t._v("rimraf")]),t._v(" 我们的 "),_("code",[t._v(".git")]),t._v(" 文件夹时，我的同事哭了？我觉得创建一些最常用且最有用的 Git 命令的可视化示例会是一个完美的用例！下面我将介绍的很多命令都有可选参数——你可以使用这些参数来改变对应命令的行为。而我的示例只会涵盖命令的默认行为，而不会添加（或添加太多）可选配置！")]),t._v(" "),_("h2",{attrs:{id:"合并中-merging"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#合并中-merging"}},[t._v("#")]),t._v(" 合并中 Merging")]),t._v(" "),_("p",[t._v("拥有多个分支是很方便的，以使新变更彼此分离，并确保您不会意外将未经批准或破损的变更推到生产中。但一旦这些修改得到了批准许可，我们就可以将其部署到我们的生产分支中了！将更改从一个分支转移到另一个分支的一种方法是执行 "),_("code",[t._v("git merge")]),t._v("! Git 可以执行两种类型的合并："),_("code",[t._v("fast-forward")]),t._v(" 和 "),_("code",[t._v("no-fast-forward")]),t._v(" 现在这可能没有多大意义，所以让我们看一下差异！")]),t._v(" "),_("h3",{attrs:{id:"ff-fast-forward"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ff-fast-forward"}},[t._v("#")]),t._v(" --ff：Fast-forward")]),t._v(" "),_("p",[t._v("在当前分支相比于我们要合并的分支没有额外的提交"),_("small",[t._v("（commit）")]),t._v("时，可以执行 "),_("code",[t._v("fast-forward")]),t._v(" 合并。")]),t._v(" "),_("p",[t._v("Git 很懒，首先会尝试执行最简单的选项："),_("code",[t._v("fast-forward")]),t._v("！这类合并不会创建新的提交，而是会将我们正在合并的分支上的提交直接合并到当前分支。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-top-10-01.gif",alt:"git-top-10-01"}})]),t._v(" "),_("p",[t._v("完美！现在，我们 "),_("code",[t._v("dev")]),t._v(" 可以在分支上获得对 "),_("code",[t._v("master")]),t._v(" 分支所做的所有更改。那么 "),_("code",[t._v("no-fast-forward")]),t._v(" 又是什么意思呢？")]),t._v(" "),_("h3",{attrs:{id:"no-ff-no-fast-foward"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#no-ff-no-fast-foward"}},[t._v("#")]),t._v(" --no-ff：No-fast-foward")]),t._v(" "),_("p",[t._v("如果你的当前分支相比于你想要合并的分支没有任何提交，那当然很好，但很遗憾现实情况很少如此！")]),t._v(" "),_("p",[t._v("如果我们在当前分支上提交我们想要合并的分支不具备的改变，那么 git 将会执行 "),_("code",[t._v("no-fast-forward")]),t._v(" 合并。")]),t._v(" "),_("p",[t._v("使用 "),_("code",[t._v("no-fast-forward")]),t._v(" 合并时，Git 会在当前活动分支上创建新的 "),_("code",[t._v("merging commit")]),t._v(" 。")]),t._v(" "),_("p",[t._v("这个提交的父提交"),_("small",[t._v("（parent commit）")]),t._v("即指向这个活动分支，也指向我们想要合并的分支！")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-top-10-02.gif",alt:"git-top-10-02"}})]),t._v(" "),_("p",[t._v("没什么大不了的，完美的合并！")]),t._v(" "),_("p",[t._v("现在，我们在 "),_("code",[t._v("dev")]),t._v(" 分支上所做的所有改变都合并到了 "),_("code",[t._v("master")]),t._v(" 分支上。")]),t._v(" "),_("h2",{attrs:{id:"合并冲突-merge-conflicts"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#合并冲突-merge-conflicts"}},[t._v("#")]),t._v(" 合并冲突 Merge Conflicts")]),t._v(" "),_("p",[t._v("尽管 Git 能够很好地决定如何合并分支以及如何向文件添加修改，但它并不总是能完全自己做决定。")]),t._v(" "),_("p",[t._v("当我们想要合并的两个分支的同一文件中的同一行代码上有不同的修改，或者一个分支删除了一个文件而另一个分支修改了这个文件时，Git 就不知道如何取舍了。")]),t._v(" "),_("p",[t._v("在这样的情况下，Git 会询问你想要保留哪种选择？假设在这两个分支中，我们都编辑了 "),_("code",[t._v("README.md")]),t._v(" 的第一行。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-top-10-03.png",alt:"git-top-10-03"}})]),t._v(" "),_("p",[t._v("如果我们想把 "),_("code",[t._v("dev")]),t._v(" 合并到 "),_("code",[t._v("master")]),t._v(" ，就会出现一个合并冲突：你想要标题是 "),_("code",[t._v("Hello!")]),t._v(" 还是 "),_("code",[t._v("Hey!")]),t._v(" ？")]),t._v(" "),_("p",[t._v("当尝试合并这些分支时，Git 会向你展示冲突出现的位置。")]),t._v(" "),_("p",[t._v("我们可以手动移除我们不想保留的修改，保存这些修改，再次添加这个已修改的文件，然后提交这些修改。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-top-10-04.gif",alt:"git-top-10-04"}})]),t._v(" "),_("p",[t._v("完成！尽管合并冲突往往很让人厌烦，但这是合理的：Git 不应该瞎猜我们想要保留哪些修改。")]),t._v(" "),_("h2",{attrs:{id:"变基-rebasing"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#变基-rebasing"}},[t._v("#")]),t._v(" 变基（Rebasing）")]),t._v(" "),_("p",[t._v("我们刚看到可通过执行 "),_("code",[t._v("git merge")]),t._v(" 将一个分支的修改应用到另一个分支。")]),t._v(" "),_("p",[t._v("另一种可将一个分支的修改融入到另一个分支的方式是执行 "),_("code",[t._v("git rebase")]),t._v(" 。")]),t._v(" "),_("p",[_("code",[t._v("git rebase")]),t._v(" 会将当前分支的提交复制到指定的分支之上。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-top-10-05.gif",alt:"git-top-10-05"}})]),t._v(" "),_("p",[t._v("完美，现在我们在 "),_("code",[t._v("dev")]),t._v(" 分支上获取了 "),_("code",[t._v("master")]),t._v(" 分支上的所有修改。")]),t._v(" "),_("p",[t._v("变基与合并 有一个重大的区别：Git 不会尝试确定要保留或不保留哪些文件。我们执行 "),_("code",[t._v("rebase")]),t._v(" 的分支总是含有我们想要保留的最新近的修改！这样我们不会遇到任何合并冲突，而且可以保留一个漂亮的、线性的 Git 历史记录。")]),t._v(" "),_("p",[t._v("上面这个例子展示了在 "),_("code",[t._v("master")]),t._v(" 分支上的变基。但是，在更大型的项目中，你通常不需要这样的操作。"),_("code",[t._v("git rebase")]),t._v(" 在为复制的提交创建新的 hash 时会修改项目的历史记录。")]),t._v(" "),_("p",[t._v("如果你在开发一个 "),_("code",[t._v("feature")]),t._v(" 分支并且 "),_("code",[t._v("master")]),t._v(" 分支已经更新过，那么变基就很好用。你可以在你的分支上获取所有更新，这能防止未来出现合并冲突。")]),t._v(" "),_("h2",{attrs:{id:"交互式变基-interactive-rebase"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#交互式变基-interactive-rebase"}},[t._v("#")]),t._v(" 交互式变基（Interactive Rebase）")]),t._v(" "),_("p",[t._v("在为提交执行变基之前，我们可以修改它们！我们可以使用交互式变基来完成这一任务。交互式变基在你当前开发的分支上以及想要修改某些提交时会很有用。")]),t._v(" "),_("p",[t._v("在我们正在 "),_("code",[t._v("rebase")]),t._v(" 的提交上，我们可以执行以下 6 个动作：")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("reword")]),t._v("：修改提交信息；")]),t._v(" "),_("li",[_("strong",[t._v("edit")]),t._v("：修改此提交；")]),t._v(" "),_("li",[_("strong",[t._v("squash")]),t._v("：将提交融合到前一个提交中；")]),t._v(" "),_("li",[_("strong",[t._v("fixup")]),t._v("：将提交融合到前一个提交中，不保留该提交的日志消息；")]),t._v(" "),_("li",[_("strong",[t._v("exec")]),t._v("：在每个提交上运行我们想要 rebase 的命令；")]),t._v(" "),_("li",[_("strong",[t._v("drop")]),t._v("：移除该提交。")])]),t._v(" "),_("p",[t._v("很棒！这样我们就能完全控制我们的提交了。如果你想要移除一个提交，只需 drop 即可。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-top-10-06.gif",alt:"git-top-10-06"}})]),t._v(" "),_("p",[t._v("如果你想把多个提交融合到一起以便得到清晰的提交历史，那也没有问题！")]),t._v(" "),_("p",[t._v("交互式变基能为你在 rebase 时提供大量控制，甚至可以控制当前的活动分支。")]),t._v(" "),_("h2",{attrs:{id:"重置-resetting"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重置-resetting"}},[t._v("#")]),t._v(" 重置（Resetting）")]),t._v(" "),_("p",[t._v("当我们不想要之前提交的修改时，就会用到这个命令。也许这是一个 WIP 提交或者可能是引入了 "),_("code",[t._v("bug")]),t._v(" 的提交，这时候就要执行 "),_("code",[t._v("git reset")]),t._v(" 。")]),t._v(" "),_("p",[_("code",[t._v("git reset")]),t._v(" 能让我们不再使用当前台面上的文件，让我们可以控制 "),_("code",[t._v("HEAD")]),t._v(" 应该指向的位置。")]),t._v(" "),_("blockquote",[_("p",[t._v("git reset 执行的重置操作，也被称为「软重置」。")])]),t._v(" "),_("p",[t._v("软重置会将 "),_("code",[t._v("HEAD")]),t._v(" 移至指定的提交（或与HEAD 相比的提交的索引），而不会移除该提交之后加入的修改！")]),t._v(" "),_("p",[t._v("假设我们不想保留添加了一个 "),_("code",[t._v("style.css")]),t._v(" 文件的提交 "),_("code",[t._v("9e78i")]),t._v("，而且我们也不想保留添加了一个 "),_("code",[t._v("index.js")]),t._v(" 文件的提交 "),_("code",[t._v("035cc")]),t._v(" 。但是，我们确实又想要保留新添加的 "),_("code",[t._v("style.css")]),t._v(" 和 "),_("code",[t._v("index.js")]),t._v(" 文件！这是软重置的一个完美用例。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-top-10-07.gif",alt:"git-top-10-07"}})]),t._v(" "),_("p",[t._v("输入 "),_("code",[t._v("git status")]),t._v(" 后，你会看到我们仍然可以访问在之前的提交上做过的所有修改。这很好，这意味着我们可以修复这些文件的内容，之后再重新提交它们！")]),t._v(" "),_("h2",{attrs:{id:"还原-reverting"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#还原-reverting"}},[t._v("#")]),t._v(" 还原（Reverting）")]),t._v(" "),_("p",[t._v("另一种撤销修改的方法是执行 "),_("code",[t._v("git revert")]),t._v(" 。通过对特定的提交执行还原操作，我们会创建一个包含已还原修改的新提交。")]),t._v(" "),_("blockquote",[_("p",[t._v("git revert  执行的重置操作，也被称为「硬重置」。")])]),t._v(" "),_("p",[t._v("假设 "),_("code",[t._v("ec5be")]),t._v(" 添加了一个 "),_("code",[t._v("index.js")]),t._v(" 文件。但之后我们发现其实我们再也不需要由这个提交引入的修改了。那就还原 ec5be 提交吧！")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-top-10-08.gif",alt:"git-top-10-08"}})]),t._v(" "),_("p",[t._v("完美！提交 "),_("code",[t._v("9e78i")]),t._v(" 还原了由提交 "),_("code",[t._v("ec5be")]),t._v(" 引入的修改。在撤销特定的提交时，"),_("code",[t._v("git revert")]),t._v(" 非常有用，同时也不会修改分支的历史。")]),t._v(" "),_("h2",{attrs:{id:"拣选-cherry-picking"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#拣选-cherry-picking"}},[t._v("#")]),t._v(" 拣选（Cherry-picking）")]),t._v(" "),_("p",[t._v("当一个特定分支包含我们的活动分支需要的某个提交时，我们对那个提交执行 "),_("code",[t._v("cherry-pick")]),t._v(" ！对一个提交执行 cherry-pick 时，我们会在活动分支上创建一个新的提交，其中包含由拣选出来的提交所引入的修改。")]),t._v(" "),_("p",[t._v("假设 "),_("code",[t._v("dev")]),t._v("l 分支上的提交 "),_("code",[t._v("76d12")]),t._v(" 为 "),_("code",[t._v("index.js")]),t._v(" 文件添加了一项修改，而我们希望将其整合到 "),_("code",[t._v("master")]),t._v(" 分支中。我们并不想要整个 "),_("code",[t._v("dev")]),t._v(" 分支，而只需要这个提交！")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-top-10-09.gif",alt:"git-top-10-09"}})]),t._v(" "),_("p",[t._v("现在 "),_("code",[t._v("master")]),t._v(" 分支包含 "),_("code",[t._v("76d12")]),t._v(" 引入的修改了。")]),t._v(" "),_("h2",{attrs:{id:"取回-fetching"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#取回-fetching"}},[t._v("#")]),t._v(" 取回（Fetching）")]),t._v(" "),_("p",[t._v("如果你有一个远程 Git 分支，比如在 GitHub 上的分支，当远程分支上包含当前分支没有的提交时，可以使用取回。比如当合并了另一个分支或你的同事推送了一个快速修复时。")]),t._v(" "),_("p",[t._v("通过在这个远程分支上执行 "),_("code",[t._v("git fetch")]),t._v("，我们就可在本地获取这些修改。这不会以任何方式影响你的本地分支：fetch 只是单纯地下载新的数据而已。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-top-10-10.gif",alt:"git-top-10-10"}})]),t._v(" "),_("p",[t._v("现在我们可以看到自上次推送以来的所有修改了。这些新数据也已经在本地了，我们可以决定用这些新数据做什么了。")]),t._v(" "),_("h2",{attrs:{id:"拉取-pulling"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#拉取-pulling"}},[t._v("#")]),t._v(" 拉取（Pulling）")]),t._v(" "),_("p",[t._v("尽管 git fetch 可用于获取某个分支的远程信息，但我们也可以执行 "),_("code",[t._v("git pull")]),t._v(" 。"),_("code",[t._v("git pull")]),t._v(" 实际上是两个命令合成了一个："),_("code",[t._v("git fetch")]),t._v(" 和 "),_("code",[t._v("git merge")]),t._v(" 。")]),t._v(" "),_("p",[t._v("当我们从来源拉取修改时，我们首先是像 "),_("code",[t._v("git fetch")]),t._v(" 那样取回所有数据，然后最新的修改会自动合并到本地分支中。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-top-10-11.gif",alt:"git-top-10-11"}})]),t._v(" "),_("p",[t._v("很好，我们现在与远程分支完美同步了，并且也有了所有最新的修改！")]),t._v(" "),_("h2",{attrs:{id:"_10-reflog"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10-reflog"}},[t._v("#")]),t._v(" 10. Reflog")]),t._v(" "),_("p",[t._v("每个人都会犯错，但犯错其实没啥！有时候你可能感觉你把 git repo 完全搞坏了，让你想完全删了了事。")]),t._v(" "),_("p",[t._v("git reflog 是一个非常有用的命令，可以展示已经执行过的所有动作的日志。包括合并、重置、还原，基本上包含你对你的分支所做的任何修改。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-top-10-12.gif",alt:"git-top-10-12"}})]),t._v(" "),_("p",[t._v("如果你犯了错，你可以根据 "),_("code",[t._v("reflog")]),t._v(" 提供的信息通过重置 HEAD 来轻松地重做！")]),t._v(" "),_("p",[t._v("假设我们实际上并不需要合并原有分支。当我们执行 "),_("code",[t._v("git reflog")]),t._v(" 命令时，我们可以看到这个 repo 的状态在合并前位于 "),_("code",[t._v("HEAD@{1}")]),t._v("。那我们就执行一次 "),_("code",[t._v("git reset")]),t._v("，将 HEAD 重新指向在 "),_("code",[t._v("HEAD@{1}")]),t._v(" 的位置。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/git/img/git-top-10-13.gif",alt:"git-top-10-13"}})]),t._v(" "),_("p",[t._v("我们可以看到最新的动作已被推送给 reflog 。")])])}),[],!1,null,null,null);v.default=i.exports}}]);