(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{453:function(t,a,r){"use strict";r.r(a);var e=r(47),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"git-cherry-pick-的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick-的使用"}},[t._v("#")]),t._v(" git cherry-pick 的使用")]),t._v(" "),r("h2",{attrs:{id:"概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),r("p",[r("code",[t._v("git cherry-pick")]),t._v(" 可以理解为「"),r("strong",[t._v("挑拣")]),t._v("」提交，它会获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上。 当我们需要在本地合入其他分支的提交时，如果我们不想对整个分支进行合并，而是只想将某一次提交合入到本地当前分支上，那么就要使用 git cherry-pick 了。")]),t._v(" "),r("p",[t._v("用法：")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("options"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit-ish"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),r("p",[t._v("常用 options :")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("--quit                退出当前的 chery-pick 序列\n--continue            继续当前的 chery-pick 序列\n--abort               取消当前的 chery-pick 序列，恢复当前分支\n--no-commit, -n       不自动提交\n--edit, -e            编辑提交信息\n")])])]),r("h2",{attrs:{id:"git-cherry-pick-commit-id"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick-commit-id"}},[t._v("#")]),t._v(" git cherry-pick <commit-id>")]),t._v(" "),r("p",[t._v("在本地仓库中，有两个分支: branch1 和 branch2，我们先来查看各个分支的提交：")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到 branch2 分支")]),t._v("\n$ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout branch2\n$ Switched to branch "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'branch2'")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看最近三次提交")]),t._v("\n\n$ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline -3\n23d9422 "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Description"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":branch2 commit "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n2555c6e "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Description"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":branch2 commit "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nb82ba0f "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Description"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":branch2 commit "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到 branch1 分支")]),t._v("\n$ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout branch1\nSwitched to branch "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'branch1'")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看最近三次提交")]),t._v("\n$ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline -3\n20fe2f9 commit second\nc51adbe commit first\nae2bd14 commit 3th\n")])])]),r("p",[t._v("现在，我想要将 branch2 分支上的第一次提交内容合入到 branch1 分支上，则可以使用 "),r("code",[t._v("git cherry-pick")]),t._v(" 命令：")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("$ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick 2555c6e\nerror: could not apply 2555c6e"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Description"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":branch2 commit "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nhint: after resolving the conflicts, mark the corrected paths\nhint: with "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git add <paths>'")]),t._v(" or "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git rm <paths>'")]),t._v("\nhint: and commit the result with "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git commit'")]),t._v("\n")])])]),r("p",[t._v("当 cherry-pick 时，没有成功自动提交，这说明存在冲突，因此首先需要解决冲突,解决冲突后需要 "),r("code",[t._v("git commit")]),t._v(" 手动进行提交：")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("$ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit \n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch1 790f431"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Description"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":branch2 commit "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n Date: Fri Jul "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(":36:44 "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2018")]),t._v(" +0800\n "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" insertion"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n create mode "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" only-for-branch2.txt\n")])])]),r("p",[t._v("或者 "),r("code",[t._v("git add .")]),t._v(" 后直接使用 "),r("code",[t._v("git cherry-pick --continue")]),t._v(" 继续。\n现在查看提交信息：")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("$ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --oneline -3\n790f431 "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Description"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":branch2 commit "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n20fe2f9 commit second\nc51adbe commit first\n")])])]),r("p",[t._v("branch2 分支上的第二次提交成功合入到了 branch1 分支上。")]),t._v(" "),r("p",[t._v("以上就是 "),r("code",[t._v("git cherry-pick")]),t._v(" 的基本用法，如果没有出现冲突，该命令将自动提交。")]),t._v(" "),r("h2",{attrs:{id:"git-cherry-pick-n"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick-n"}},[t._v("#")]),t._v(" git cherry-pick -n")]),t._v(" "),r("p",[t._v("如果不想 "),r("code",[t._v("git cherry-pick")]),t._v(" 自动进行提交，则加参数 "),r("code",[t._v("-n")]),t._v(" 即可。比如将 branch2 分支上的第三次提交内容合入到 branch1 分支上：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("$ git cherry-pick 23d9422\n[branch1 2c67715] [Description]:branch2 commit 3\n Date: Fri Jul 13 18:37:05 2018 +0800\n 1 file changed, 1 insertion(+)\n")])])]),r("p",[t._v("查看提交 log,它自动合入了branch1分支：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("$ git log --oneline -3\n2c67715 [Description]:branch2 commit 3\nf8bc5db [Description]:branch2 commit 2\n20fe2f9 commit second\n")])])]),r("p",[t._v("如果不想进行自动合入，则使用 "),r("code",[t._v("git cherry-pick -n")]),t._v("：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('# 回退上次提交，再此进行cherry-pick\n$ git reset --hard HEAD~\nHEAD is now at f8bc5db [Description]:branch2 commit 2\n$ git cherry-pick -n 23d9422\n$ git status\nOn branch branch1\nChanges to be committed:\n  (use "git reset HEAD <file>..." to unstage)\n\n    modified:   only-for-branch2.txt\n')])])]),r("p",[t._v("这时通过 "),r("code",[t._v("git status")]),t._v(" 查看，发现已将 branch2 的提交获取但是没有合入。")]),t._v(" "),r("h2",{attrs:{id:"git-cherry-pick-e"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick-e"}},[t._v("#")]),t._v(" git cherry-pick -e")]),t._v(" "),r("p",[t._v("如果想要在 cherr-pick 后重新编辑提交信息，则使用 "),r("code",[t._v("git cherry-pick -e")]),t._v(" 命令，比如我们还是要将 branch2 分支上的第三次提交内容合入到 branch1 分支上，但是需要修改提交信息：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("$ git cherry-pick -e 23d9422\n\n[Description]:branch2 commit 3\n#\n# It looks like you may be committing a cherry-pick.\n# If this is not correct, please remove the file\n#       .git/CHERRY_PICK_HEAD\n# and try again.\n")])])]),r("h2",{attrs:{id:"git-cherry-pick-continue-abort-quit"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick-continue-abort-quit"}},[t._v("#")]),t._v(" git cherry-pick –continue, –abort，–quit")]),t._v(" "),r("p",[t._v("当使用 "),r("code",[t._v("git cherry-pick")]),t._v(" 发生冲突后,将会出现如下信息：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("$ git cherry-pick 23d9422\nerror: could not apply 23d9422... [Description]:branch2 commit 3\nhint: after resolving the conflicts, mark the corrected paths\nhint: with 'git add <paths>' or 'git rm <paths>'\nhint: and commit the result with 'git commit'\n")])])]),r("p",[t._v("这时如果要继续 cherry-pick，则首先需要解决冲突，通过 "),r("code",[t._v("git add .")]),t._v(" 将文件标记为已解决，然后可以使用 "),r("code",[t._v("git cherry-pick --continue")]),t._v(" 命令，继续进行 cherry-pick 操作。")]),t._v(" "),r("p",[t._v("如果要中断这次 cherry-pick，则使用 "),r("code",[t._v("git cherry-pick --quit")]),t._v("，这种情况下当前分支中未冲突的内容状态将为 modified，")]),t._v(" "),r("p",[t._v("如果要取消这次 cherry-pick，则使用 "),r("code",[t._v("git cherry-pick --abort")]),t._v("，这种情况下当前分支恢复到 cherry-pick 前的状态，没有改变。")]),t._v(" "),r("h2",{attrs:{id:"git-cherry-pick-branchname"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick-branchname"}},[t._v("#")]),t._v(" git cherry-pick <branchname>")]),t._v(" "),r("p",[t._v("如果在 git cherry-pick 后加一个分支名，则表示将该分支顶端提交进 cherry-pick，如：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("$ git cherry-pick master\n")])])]),r("ul",[r("li",[t._v("git cherry-pick ..< branchname >")]),t._v(" "),r("li",[t._v("git cherry-pick ^HEAD < branchname >")])]),t._v(" "),r("p",[t._v("以上两个命令作用相同，表示应用所有提交引入的更改，这些提交是 branchname 的祖先但不是 HEAD 的祖先，比如，现在我的仓库中有三个分支，其提交历史如下图：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("               C<---D<---E  branch2\n              /\nmaster   A<---B  \n              \\\n               F<---G<---H  branch3\n                         |\n                         HEAD\n")])])]),r("p",[t._v("如果我使用 "),r("code",[t._v("git cherry-pick ..branch2")]),t._v(" 或者 "),r("code",[t._v("git cherry-pick ^HEAD branch2")]),t._v("，那么会将属于 branch2 的祖先但不属于 branch3 的祖先的所有提交引入到当前分支 branch3 上，并生成新的提交，执行命令如下:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("$ git cherry-pick ..branch2\n[branch3 c95d8b0] [Description]:branch2  add only-for-branch2\n Date: Fri Jul 13 20:34:40 2018 +0800\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 only-for-branch2\n[branch3 7199a67] [Description]:branch2 modify for only-for-branch2--1\n Date: Fri Jul 13 20:38:35 2018 +0800\n 1 file changed, 1 insertion(+)\n[branch3 eb8ab62] [Description]:branch2 modify for only-for-branch2--2\n Date: Fri Jul 13 20:39:09 2018 +0800\n 1 file changed, 1 insertion(+)\n")])])]),r("p",[t._v("执行后的提交历史如下：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("               C<---D<---E  branch2\n              /\nmaster   A<---B  \n              \\\n               F<---G<---H<---C'<---D'<---E'  branch3\n                                          |\n                                         HEAD\n")])])]),r("h2",{attrs:{id:"常见问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[t._v("#")]),t._v(" 常见问题")]),t._v(" "),r("h3",{attrs:{id:"the-previous-cherry-pick-is-now-empty-possibly-due-to-conflict-resolution"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#the-previous-cherry-pick-is-now-empty-possibly-due-to-conflict-resolution"}},[t._v("#")]),t._v(" The previous cherry-pick is now empty, possibly due to conflict resolution.")]),t._v(" "),r("p",[t._v("原因:")]),t._v(" "),r("p",[t._v("在 cherry-pick 时出现冲突，解决冲突后本地分支中内容和 cherry-pick 之前相比没有改变，因此当在以后的步骤中继续 "),r("code",[t._v("git cherry-pick")]),t._v(" 或执行其他命令时，由于此时还处于上次 cherry-pick，都会提示该信息，表示可能是由于解决冲突造成上一次 cherry-pick内容是空的。")]),t._v(" "),r("p",[t._v("解决方案:")]),t._v(" "),r("p",[t._v("方案一： 执行 "),r("code",[t._v("git cherry-pick --abort")]),t._v(" 取消上次操作。\n方案二： 执行 "),r("code",[t._v("git commit --allow-empty")]),t._v("，表示允许空提交。")]),t._v(" "),r("h3",{attrs:{id:"fatal-you-are-in-the-middle-of-a-cherry-pick-cannot-amend"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fatal-you-are-in-the-middle-of-a-cherry-pick-cannot-amend"}},[t._v("#")]),t._v(" fatal: You are in the middle of a cherry-pick – cannot amend.")]),t._v(" "),r("p",[t._v("原因:")]),t._v(" "),r("p",[t._v("在 cherry-pick 时出现冲突，没有解决冲突就执行 "),r("code",[t._v("git commit --amend")]),t._v(" 命令，从而会提示该信息。")]),t._v(" "),r("p",[t._v("解决方案:")]),t._v(" "),r("p",[t._v("首先在 "),r("code",[t._v("git commit --amend")]),t._v(" 之前解决冲突，并完成这次 cherry-pick:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("$ git add .\n$ git cherry-pick --continue\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);