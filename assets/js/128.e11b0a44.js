(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{484:function(t,e,a){"use strict";a.r(e);var v=a(47),l=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java-集合底层原理剖析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-集合底层原理剖析"}},[t._v("#")]),t._v(" Java 集合底层原理剖析")]),t._v(" "),a("h2",{attrs:{id:"java-集合介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-集合介绍"}},[t._v("#")]),t._v(" Java 集合介绍")]),t._v(" "),a("p",[t._v("Java 集合是一个存储相同类型数据的容器，类似数组，集合可以不指定长度，但是数组必须指定长度。集合类主要从 "),a("strong",[t._v("Collection")]),t._v(" 和 "),a("strong",[t._v("Map")]),t._v(" 两个根接口派生出来，比如常用的 ArrayList、LinkedList、HashMap、HashSet、ConcurrentHashMap 等等。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Collection 根接口框架简化结构图"),a("small",[t._v("（线程不安全）")]),t._v("：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/java/img/collection-1.png",alt:"collection-1"}})])]),t._v(" "),a("li",[a("p",[t._v("Collection 根接口框架简化结构图"),a("small",[t._v("（线程安全）")]),t._v("：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/java/img/collection-2.png",alt:"collection-2"}})])]),t._v(" "),a("li",[a("p",[t._v("Map 根接口框架简化结构图（线程不安全）：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/java/img/map-1.png",alt:"map-1"}})])]),t._v(" "),a("li",[a("p",[t._v("Map 根接口框架简化结构图（线程安全）：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/java/img/map-2.png",alt:"map-2"}})])])]),t._v(" "),a("h2",{attrs:{id:"list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),a("p",[t._v("List 体系在 JDK 1.0 的时候就已经存在了。"),a("small",[t._v("作为它的兄弟，Set 接口反而是在 JDK 1.2 中才被补充进集合框架。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Collection                   (jdk 1.0)\n└── List                     (jdk 1.0)\n    |── Vector / Stack       (jdk 1.0)\n    |── ArrayList            (jdk 1.2)\n    |── LinkedList           (jdk 1.2)\n    └── CopyOnWriteArrayList (jdk 1.5)\n")])])]),a("h3",{attrs:{id:"vector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vector"}},[t._v("#")]),t._v(" Vector")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线程安全\n底层使用『动态数组』实现\n")])])]),a("p",[a("strong",[t._v("Vector")]),t._v(" 是第一波"),a("small",[t._v("（JDK 1.0）")]),t._v("出现的 List 接口的实现类，这批实现类都是线程安全的。")]),t._v(" "),a("blockquote",[a("p",[t._v("JDK 1.5 通过 J.U.C 对 JDK 1.0 的这波线程安全的实现类提出了大范围的替换。")]),t._v(" "),a("p",[t._v("在未来"),a("small",[t._v("（JDK 1.5 中）")]),t._v("，顶替 Vector 的就是 CopyOnWriteArrayList 。")])]),t._v(" "),a("p",[t._v("Vector 的底层是通过『"),a("strong",[t._v("动态数组")]),t._v("』实现的。『动态数组』是指当数组容量不足以存放新的元素时，会创建新的数组，然后把原数组中的内容复制到新数组。")]),t._v(" "),a("p",[a("strong",[t._v("特征")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("允许添加 null 值，且允许添加多个；")]),t._v(" "),a("li",[t._v("查询效率高、插入、删除效率低，因为需要移动元素；")]),t._v(" "),a("li",[t._v("默认的初始化大小为 10，默认扩容系数是 1。"),a("small",[t._v("如果扩容后还不够，则以实际需要扩容")]),t._v("；")]),t._v(" "),a("li",[t._v("线程安全。"),a("small",[t._v("带来的代价是，在单线程环境下白白付出性能损耗。")])])]),t._v(" "),a("p",[a("strong",[t._v("使用场景")]),t._v("：多线程环境")]),t._v(" "),a("h3",{attrs:{id:"stack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[t._v("#")]),t._v(" Stack")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线程安全\nVector 的子类，底层使用『动态数组』实现\n")])])]),a("p",[t._v("Stack 和 Vector 一样，也是第一批"),a("small",[t._v("（JDK 1.0）")]),t._v("出现的 List 接口实现类，而且，它还是 Vector 的子类。")]),t._v(" "),a("p",[t._v("由于 Stack 是 Vector 的子类的关系，因此，显而易见，Stack 也是线程安全的，且底层也是使用『动态数组』实现的。")]),t._v(" "),a("p",[t._v("JDK 中 Stack 的类对应的是数据结构中的『栈』的概念，实现先入先出"),a("small",[t._v("（FIFO）")]),t._v("功能。")]),t._v(" "),a("blockquote",[a("p",[t._v("在 Stack 不推荐使用之后，逻辑上，在 Java 集合框架中现在是没有现成的『栈』的。数据结构中的『队列』和『栈』，在 Java 集合框架中都是通过使用『"),a("strong",[t._v("双端队列")]),t._v("』来实现功能。")])]),t._v(" "),a("p",[a("strong",[t._v("实现原理")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("Stack 执行 push() 时，将数据推进栈，即把数据追加到数组的末尾。")]),t._v(" "),a("li",[t._v("Stack 执行 peek 时，取出栈顶数据，不删除此数据，即获取数组首个元素。")]),t._v(" "),a("li",[t._v("Stack 执行 pop 时，取出栈顶数据，在栈顶删除数据，即删除数组首个元素。")]),t._v(" "),a("li",[t._v("Stack 继承于 Vector，所以 Vector 拥有的属性和功能，Stack 都拥有，比如 add()、set() 等等。")])]),t._v(" "),a("h3",{attrs:{id:"arraylist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist"}},[t._v("#")]),t._v(" ArrayList")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线程不安全\n底层使用动态数组实现\n")])])]),a("p",[t._v("ArrayList 是第二波"),a("small",[t._v("（JDK 1.2）")]),t._v("出现的 List 接口的实现类。"),a("small",[t._v("这批接口主要都是线程不安全版的实现。")])]),t._v(" "),a("p",[t._v("由于是基于『"),a("strong",[t._v("动态数组")]),t._v("』实现的，所以，ArrayList "),a("strong",[t._v("随机访问效率高")]),t._v("，随机插入、随机删除效率低。")]),t._v(" "),a("blockquote",[a("p",[t._v("在 JDK 1.5 之前，ArrayList 对标的是 Vector，它俩一个是 List 的线程不安全实现，一个是线程安全实现。在 JDK 1.5 推出 J.U.C 之后，ArrayList 对标的就是 CopyOnWriteArrayList 。")]),t._v(" "),a("p",[t._v("另外，还可以使用 "),a("code",[t._v("Collections.synchronizedList(list)")]),t._v(" 函数返回一个线程安全的 ArrayList 类。")])]),t._v(" "),a("p",[a("strong",[t._v("特征")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("允许添加 null 值，且允许添加多个；")]),t._v(" "),a("li",[t._v("查询效率高、插入、删除效率低，因为大量 copy 原来元素；")]),t._v(" "),a("li",[t._v("线程不安全。")])]),t._v(" "),a("p",[a("strong",[t._v("使用场景")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("需要快速随机访问元素")]),t._v(" "),a("li",[t._v("单线程环境")])]),t._v(" "),a("p",[a("strong",[t._v("注意事项")]),t._v("：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("new ArrayList()")]),t._v(" 创建对象时，如果没有指定集合容量则初始化为 0；如果有指定，则按照指定的大小初始化；")]),t._v(" "),a("li",[t._v("扩容时，先将集合扩大 1.5 倍，如果还是不够，则根据实际长度来扩容，保证都能存储所有数据，比如 "),a("code",[t._v("addAll()")]),t._v(" 场景。")]),t._v(" "),a("li",[t._v("如果新扩容后数组长度大于（Integer.MAX_VALUE-8），则抛出 OutOfMemoryError。")])]),t._v(" "),a("h3",{attrs:{id:"linkedlist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist"}},[t._v("#")]),t._v(" LinkedList")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线程不安全\n底层使用『双向链表』实现\n")])])]),a("p",[t._v("LinkedList 和 ArrayList 是“双胞胎”，它和 ArrayList 都是同一波"),a("small",[t._v("（JDK 1.2）")]),t._v("出现的 List 接口的实现类。这波实现类都是线程不安全的。")]),t._v(" "),a("p",[t._v("它俩的区别仅在于底层用到的数据结构上。")]),t._v(" "),a("p",[t._v("另外，LinkedList 比 ArrayList 多实现了『别的』接口"),a("small",[t._v("（Deque 接口）")]),t._v("，因此，它的功能要比 ArrayList 要『多』。")]),t._v(" "),a("p",[t._v("因此，ArrayList 和 LinkedList 的使用上的定位有所不同：")]),t._v(" "),a("ul",[a("li",[t._v("ArrayList 更像是一个纯 List；")]),t._v(" "),a("li",[t._v("LinkedList 更多的要扮演数据结构中的『队列』和『栈』的角色。")])]),t._v(" "),a("p",[a("strong",[t._v("特征")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("允许添加 null 值，且允许添加多个；")]),t._v(" "),a("li",[t._v("插入和删除效率高，查询效率低；")]),t._v(" "),a("li",[t._v("顺序访问会非常高效，而随机访问效率"),a("small",[t._v("（比如 get 方法）")]),t._v("比较低；")]),t._v(" "),a("li",[t._v("因为还『多』实现了 Deque 接口，因此功能比兄弟 ArrayList 更多：能实现数据结构中的栈和队列的功能。")]),t._v(" "),a("li",[t._v("线程不安全。")])]),t._v(" "),a("p",[a("strong",[t._v("使用场景")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("需要快速插入，删除元素按照顺序访问其中的元素")]),t._v(" "),a("li",[t._v("单线程环境")])]),t._v(" "),a("h3",{attrs:{id:"copyonwritearraylist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyonwritearraylist"}},[t._v("#")]),t._v(" CopyOnWriteArrayList")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线程安全\n底层使用『动态数组』实现\n")])])]),a("p",[a("strong",[t._v("CopyOnWriteArrayList")]),t._v(" 是第三批"),a("small",[t._v("（JDK 1.5）")]),t._v("出现的 List 接口的实现类。这批实现类的主要目的是替换掉早期"),a("small",[t._v("（JDK 1.0）")]),t._v("的线程安全版的实现，以提供能好的并发性能。 所以，这批实现类都是线程安全的。")]),t._v(" "),a("p",[t._v("CopyOnWriteArrayList 要替换掉的对象就是 Vector 。")]),t._v(" "),a("blockquote",[a("p",[t._v("另外，除了 CopyOnWriteArrayList 和 Vector 来获得线程安全版的 List之外，你还可以使用 "),a("code",[t._v("Collections.synchronizedList(List list)")]),t._v(" 来获得线程安全版的 List 。")])]),t._v(" "),a("p",[a("strong",[t._v("特征")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("线程安全；")]),t._v(" "),a("li",[t._v("读多写少，比如缓存；")]),t._v(" "),a("li",[t._v("不能保证实时一致性，只能保证最终一致性。")])]),t._v(" "),a("p",[a("strong",[t._v("缺点")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("写操作，需要拷贝数组，比较消耗内存，如果原数组容量大的情况下，可能触发频繁的 Young GC 或者 Full GC；")]),t._v(" "),a("li",[t._v("不能用于实时读的场景，因为读取到数据可能是旧的，可以保证最终一致性。")])]),t._v(" "),a("p",[a("strong",[t._v("实现原理")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("CopyOnWriteArrayList 写操作加了锁，不然多线程进行写操作时会复制多个副本；")]),t._v(" "),a("li",[t._v("写操作"),a("small",[t._v("（add、set、remove 等等）")]),t._v("时，把原数组拷贝一份出来，然后在新数组进行写操作，操作完后，再将原数组引用指向到新数组。")]),t._v(" "),a("li",[t._v("读操作没有加锁，所以可以实现并发读，但是可能读到旧的数据，比如正在执行读操作时，同时有多个写操作在进行，遇到这种场景时，就会都到旧数据。")])]),t._v(" "),a("h3",{attrs:{id:"arraylist、linkedlist-和-vector-三者的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist、linkedlist-和-vector-三者的区别"}},[t._v("#")]),t._v(" ArrayList、LinkedList 和 Vector 三者的区别")]),t._v(" "),a("p",[t._v("历史发展层面：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("List 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("诞生")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Vector"),a("small",[t._v("（Stack）")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ArrayList")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("LinkedList")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.2")])])])]),t._v(" "),a("p",[t._v("线程安全层面：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("List 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("线程安全")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Vector"),a("small",[t._v("（Stack）")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Y")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ArrayList")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("N")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("LinkedList")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("N")])])])]),t._v(" "),a("p",[t._v("底层数据结构层面：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("List 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("底层实现")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Vector"),a("small",[t._v("（Stack）")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("动态数组")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ArrayList")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("动态数组")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("LinkedList")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("双向链表")])])])]),t._v(" "),a("p",[t._v("其它小区别：")]),t._v(" "),a("ol",[a("li",[t._v("扩容问题：ArrayList 默认扩容 1.5 倍；Vector 默认扩容 1 倍；LinkedList 不存在扩容问题。")]),t._v(" "),a("li",[t._v("效率问题：由于底层数据结构原因，ArrayList、Vector 访问更快；LinkedList 增删更快。")]),t._v(" "),a("li",[t._v("内存开销问题：由于底层数据结构原因，ArrayList、Vector 内存内开销更小，但需要是连续内存空间；LinkedList 内存开销更大，但无需连续内存空间。")])]),t._v(" "),a("h2",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),a("p",[t._v("Map 体系在 JDK 1.0 的时候就已经存在了，在当时是集合框架的两条腿之一"),a("small",[t._v("（另一条腿是 List 体系，而 Set 体系在 JDK 1.2 才出现）")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Map                    (jdk 1.0)\n|── Hashtable          (jdk 1.0)\n|── TreeMap            (jdk 1.2)\n|── HashMap            (jdk 1.2)\n|   └── LinkedHashMap  (jdk 1.4)\n└── ConcurrentHashMap  (jdk 1.5)\n")])])]),a("p",[t._v("Map 结构是以 key-value 键值对形式存储数据。")]),t._v(" "),a("h3",{attrs:{id:"hashtable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashtable"}},[t._v("#")]),t._v(" HashTable")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线程安全\n底层使用『数组+链表』实现\n")])])]),a("p",[t._v("Hashtable 是最早一批"),a("small",[t._v("（JDK 1.0）")]),t._v("出现的 Map 接口的实现类。这批实现类都是线程安全的。")]),t._v(" "),a("blockquote",[a("p",[t._v("JDK 1.5 通过 J.U.C 对 JDK 1.0 的这波线程安全的实现类提出了大范围的替换。")]),t._v(" "),a("p",[t._v("在未来"),a("small",[t._v("（JDK 1.5 中）")]),t._v("，顶替 Hashtable 的就是 ConcurrentHashMap 。")])]),t._v(" "),a("p",[t._v("除了实现 Map 接口，Hashtable 还继承了 Dictionary 类。"),a("small",[t._v("这是它的兄弟姐妹们所没有的特征。")])]),t._v(" "),a("p",[t._v("特征：")]),t._v(" "),a("ul",[a("li",[t._v("key 和 value 都不允许为 null。"),a("small",[t._v("这一点更像是设计缺点，在后面出现的 Map 实现类中，对于这一点都做出了『修正』")]),t._v("；")]),t._v(" "),a("li",[t._v("Hashtable 默认的初始大小为 11，之后每次扩充为原来的 2 倍；")]),t._v(" "),a("li",[t._v("线程安全。")])]),t._v(" "),a("h3",{attrs:{id:"hashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" HashMap")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线程不安全\n底层使用『数组+链表+红黑树』实现\n")])])]),a("p",[t._v("HashMap 是第二批"),a("small",[t._v("（JDK 1.2）")]),t._v("出现的 Map 接口的实现类。这波实现类出现的目的主要是为了填补集合框架中缺少非线程安全版的实现，因此这一批实现类主要都是线程不安全的。")]),t._v(" "),a("p",[t._v("另外，JDK 8 中对 HashMap 的底层实现做出了较大的变动"),a("small",[t._v("（升级）")]),t._v("，其中最大的改动就是引入了红黑树。当链表长度 "),a("code",[t._v(">=8")]),t._v(" 时，并且同时数组的长度 "),a("code",[t._v(">=64")]),t._v(" 时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高 HashMap 的性能。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/java/img/HashMap.png",alt:"HashMap"}})]),t._v(" "),a("p",[t._v("HashMap 使用链地址法解决哈希冲突。")]),t._v(" "),a("p",[a("strong",[t._v("特征")]),t._v("：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("认为 "),a("code",[t._v("null")]),t._v(" 是合法的 key 值；但是整个 Map 中 key 为 "),a("code",[t._v("null")]),t._v(" 的键值对最多只能有一个。")])]),t._v(" "),a("li",[a("p",[t._v("认为 "),a("code",[t._v("null")]),t._v(" 是合法的 value 值，且可以有多个键值对的 value 为 null 。")])]),t._v(" "),a("li",[a("p",[t._v("查询、插入、删除效率都高"),a("small",[t._v("（集成了多方特性）")])])]),t._v(" "),a("li",[a("p",[t._v("线程不安全")])]),t._v(" "),a("li",[a("p",[t._v("用到了一个编程小技巧：用位运算（&）来代替取模运算（%）")]),t._v(" "),a("blockquote",[a("p",[t._v("当 b 的值为 2^n 时，"),a("code",[t._v("a % b")]),t._v(" 和 "),a("code",[t._v("a ^ (b-1)")]),t._v(" 的值相等。这样效率更高，并且可以解决负数问题"),a("small",[t._v("（负数模运算取余，余数应该始终为正数）")]),t._v("。")])])])]),t._v(" "),a("p",[a("strong",[t._v("使用场景")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("快速增删改查")]),t._v(" "),a("li",[t._v("随机存取")]),t._v(" "),a("li",[t._v("缓存")])]),t._v(" "),a("h3",{attrs:{id:"concurrenthashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap"}},[t._v("#")]),t._v(" ConcurrentHashMap")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线程安全\n底层使用『数组 + 链表 + 红黑树』实现\n")])])]),a("p",[t._v("ConcurrentHashMap 是第三批"),a("small",[t._v("（JDK 1.5）")]),t._v("添加到集合框架中的 Map 接口的实现。这批实现类出现的主要目的是为了替换之前"),a("small",[t._v("（JDK 1.0）")]),t._v("中的线程安全版的实现。因此，这批实现类主要都是线程安全的。")]),t._v(" "),a("p",[t._v("ConcurrentHashMap 要替换的就是 Hashtable 。")]),t._v(" "),a("p",[t._v("在 Java 8 版本中，ConcurrentHashMap 有比较大的变动"),a("small",[t._v("（更新升级）")]),t._v("，采用 CAS + Synchronized 实现锁操作，以确保线程安全。")]),t._v(" "),a("p",[a("strong",[t._v("使用场景")]),t._v("：并发、线程不安全场景")]),t._v(" "),a("h3",{attrs:{id:"hashmap、hashtable、conccurenthashmap-三者的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap、hashtable、conccurenthashmap-三者的区别"}},[t._v("#")]),t._v(" HashMap、Hashtable、ConccurentHashMap 三者的区别")]),t._v(" "),a("p",[t._v("历史发展层面：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("List 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("诞生")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Hashtable")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ConccurentHashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.5")])])])]),t._v(" "),a("p",[t._v("线程安全层面：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Map 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("线程安全")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Hashtable")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("线程安全"),a("small",[t._v("（Synchronized 实现）")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("线程不安全")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ConccurentHashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("线程安全"),a("small",[t._v("（CAS + Synchronized 实现）")])])])])]),t._v(" "),a("p",[t._v("底层数据结构层面：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("List 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("底层实现")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Hashtable")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数组 + 链表")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数组 + 链表 + 红黑树")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ConccurentHashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数组 + 链表 + 红黑树")])])])]),t._v(" "),a("p",[t._v("其它小细节：")]),t._v(" "),a("ul",[a("li",[t._v("最早出现的 Hashtable 和它的替代者 ConccurentHashMap 不允许 key 和 value 为 "),a("code",[t._v("null")]),t._v(" ；HashMap 则可以，HashMap 允许 key 和 value 为 "),a("code",[t._v("null")]),t._v(" 。")])]),t._v(" "),a("h3",{attrs:{id:"treemap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treemap"}},[t._v("#")]),t._v(" TreeMap")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线程不安全\n底层使用『红黑树』实现\n")])])]),a("p",[t._v("TreeMap 和 HashMap 一起都是第二批"),a("small",[t._v("（JDK 1.2）")]),t._v("出现的 Map 接口的实现类。这批实现类的出现主要是为了填补集合框架体系中没有 Map 的线程不安全版的缺失。因此，它们都是线程不安全的。")]),t._v(" "),a("p",[t._v("TreeMap 除了实现了 Map 接口，它还实现了 SotredMap 接口，意味着可以排序，是一个有序的集合，你添加进 TreeMap 中的数据会被它自动排序。")]),t._v(" "),a("p",[t._v("底层数据结构是红黑树结构，TreeMap 中的每个元素都存放在红黑树的节点上，默认使用自然排序，也可以自定排序，线程不安全。")]),t._v(" "),a("h3",{attrs:{id:"linkedhashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashmap"}},[t._v("#")]),t._v(" LinkedHashMap")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线程不安全\n底层使用『数组 + 链表 + 红黑树』实现\n")])])]),a("p",[t._v("LinkedHashMap 并不是在关键节点"),a("small",[t._v("（JDK 1.0、1.2 和 1.5）")]),t._v("添加进集合框架的，它是在 JDK 1.4 的时候添加进集合框架的。"),a("small",[t._v("看起来像个补丁。")])]),t._v(" "),a("p",[t._v("LinkedHashMap 继承自 HashMap ，它在 HashMap 的基础上用链表额外去『串』起了所有的节点，这样就能记录下添加到 LinkeHashMap 中的数据的添加顺序，从而保证了迭代顺序和添加顺序的一致。")]),t._v(" "),a("h3",{attrs:{id:"hashmap-与-hashtable-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-与-hashtable-的区别"}},[t._v("#")]),t._v(" HashMap 与 Hashtable 的区别")]),t._v(" "),a("p",[t._v("历史发展层面：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Map 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("诞生")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashTable")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.2")])])])]),t._v(" "),a("p",[t._v("线程安全层面：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Map 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("线程安全")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashTable")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Yes")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("No")])])])]),t._v(" "),a("p",[t._v("底层数据结构：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Map 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("底层实现")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Hashtable")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数组 + 链表")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数组 + 链表 + 红黑树")])])])]),t._v(" "),a("p",[t._v("其它小细节：")]),t._v(" "),a("ol",[a("li",[t._v("Hashtable 除了实现 Map 接口外，还继承了 Dictionary 类；HashMap 则没有。")]),t._v(" "),a("li",[t._v("Hashtable 认为 "),a("code",[t._v("null")]),t._v(" 是非法 key；HashMap 则认为 null 作 key 合法。"),a("small",[t._v("不过，HashMap 只允许有一个 key 为 null 的键值对。")])]),t._v(" "),a("li",[t._v("Hashtable 认为 "),a("code",[t._v("null")]),t._v(" 是非法 value; HashMap 则认为 null 作 value 合法。")]),t._v(" "),a("li",[a("code",[t._v("key.hashCode()")]),t._v(" 算法中，Hashtable 用的 "),a("code",[t._v("%")]),t._v(" 运算；HashMap 用上了一个编程小技巧，使用 "),a("code",[t._v("&")]),t._v(" 运算")]),t._v(" "),a("li",[t._v("两者初始容量不同，Hashtable 默认 11；HashMap 大一点，默认 16 。")])]),t._v(" "),a("h3",{attrs:{id:"hashmap-与-treemap-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-与-treemap-的区别"}},[t._v("#")]),t._v(" HashMap 与 TreeMap 的区别")]),t._v(" "),a("p",[a("strong",[t._v("历史发展层面")]),t._v("： 它俩都是在 JDK 1.2 引入到集合框架中的。")]),t._v(" "),a("p",[a("strong",[t._v("线程安全层面")]),t._v("：它俩都是线程不安全的。")]),t._v(" "),a("p",[a("strong",[t._v("底层数据结构")]),t._v("：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Map 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("底层实现")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数组 + 链表 + 红黑树，无序")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("TreeMap")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("红黑树，有序")])])])]),t._v(" "),a("p",[a("strong",[t._v("其它小细节")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("HashMap 认为 null-key 合法；TreeMap 则认为 null-key 非法。")])]),t._v(" "),a("li",[a("p",[t._v("HashMap 效率略高；TreeMap 效率略低。")])])]),t._v(" "),a("h2",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),a("p",[t._v("整个 Set 体系是在第二波"),a("small",[t._v("（JDK 1.2）")]),t._v("才被添加进集合框架中的，看起来，它好似 List 的兄弟，但是实际上，它出现地要比 List"),a("small",[t._v("（和 Map）")]),t._v("晚。")]),t._v(" "),a("p",[t._v("由于在集合框架的第一波"),a("small",[t._v("（JDK 1.0）")]),t._v("中并没有 Set 体系，因此 Set 体系在线程安全的实现上，就没有想 List 和 Map 一样『走弯路』：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("JDK 1.2 中引入是 Set 的线程不安全实现；")])]),t._v(" "),a("li",[a("p",[t._v("在 JDK 1.5"),a("small",[t._v("（J.U.C）")]),t._v("中引入的是 Set 的线程安全实现。")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Set                     (jdk 1.2)\n|── TreeSet             (jdk 1.2)\n|── HashSet             (jdk 1.2)\n|   └── LinkedHashSet   (jdk 1.4)\n└── CopyOnWriteArraySet (jdk 1.5)\n")])])]),a("p",[t._v("一个既有意思又重要的现象：虽然 Set 看起来和 List 更亲"),a("small",[t._v("（都是 Collection 接口的子接口）")]),t._v("，但是 Set 的各种实现类底层却是『"),a("strong",[t._v("利用 Map")]),t._v("』实现的自己的功能。")]),t._v(" "),a("h3",{attrs:{id:"hashset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashset"}},[t._v("#")]),t._v(" HashSet")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线程不安全\n底层用 HashMap 实现。根本结构是数组+链表+红黑树。\n")])])]),a("p",[t._v("HashSet 是用来存储没有重复元素的集合类，并且是无序的。"),a("small",[t._v("或者说，你可以添加重复元素，但是从第二次添加开始，你加了也白加。")])]),t._v(" "),a("p",[t._v("由于 HashSet 底层利用的是 HashMap 实现，因此你添加到 HashSet 中的值，都被它添加到一个 HashMap 中作了 key：")]),t._v(" "),a("ul",[a("li",[t._v("由于 HashMap 的 key 不能重复，所以 HashSet 中的值自然也就是不能重复的；")]),t._v(" "),a("li",[t._v("由于 HashMap 允许 null-key，所以 HashSet 中也可以添加一个 null 。")])]),t._v(" "),a("p",[a("strong",[t._v("使用场景")]),t._v("：去重、不要求顺序")]),t._v(" "),a("h3",{attrs:{id:"treeset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#treeset"}},[t._v("#")]),t._v(" TreeSet")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线程不安全\n底层使用 TreeMap 实现，因此根本结构是『红黑树』。\n")])])]),a("p",[t._v("TreeSet 除了实现 Set 接口，它还实现了 SortedSet 接口，意味着可以排序，它是一个有序并且没有重复的集合类。"),a("small",[t._v("TreeMap 是有序的，因此 TreeSet 自然也就是有序的。")])]),t._v(" "),a("p",[t._v("由于 TreeSet 底层利用的是 TreeMap 实现，因此你添加到 TreeSet 中的值，都被它添加到一个 TreeMap 中作了 key：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("TreeMap 是内部有序的，TreeSet 自然也就是内部有序的；")])]),t._v(" "),a("li",[a("p",[t._v("TreeMap 不允许添加 null-key，TreeSet 自然也就不允许添加 null 值。")])])]),t._v(" "),a("p",[t._v("TreeSet 支持两种排序方式：自然排序"),a("small",[t._v("（默认）")]),t._v("和自定义排序。")]),t._v(" "),a("p",[a("strong",[t._v("使用场景")]),t._v("：去重、要求排序")]),t._v(" "),a("h3",{attrs:{id:"linkedhashset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashset"}},[t._v("#")]),t._v(" LinkedHashSet")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线程不安全\nHashSet 的子类，底层利用了 LinkedHashMap，因此根本结构是『数组+链表+红黑树』。\n")])])]),a("p",[t._v("由于 LinkedHashSet 底层利用了 LinkedHashMap，因此：")]),t._v(" "),a("ul",[a("li",[t._v("LinkedHashMap 是 JDK 1.4 中出现的；LinkedHashSet 自然也是 JDK 1.4 才出现的；")]),t._v(" "),a("li",[t._v("LinkedHashMap 能记录元素的添加次序，LinkedHashSet 自然也就能记录 元素的添加次序。")])]),t._v(" "),a("p",[a("strong",[t._v("使用场景")]),t._v("：去重、需要保证插入或者访问顺序")]),t._v(" "),a("h3",{attrs:{id:"hashset、treeset、linkedhashset-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashset、treeset、linkedhashset-的区别"}},[t._v("#")]),t._v(" HashSet、TreeSet、LinkedHashSet 的区别")]),t._v(" "),a("p",[a("strong",[t._v("历史发展层面")]),t._v("：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Set 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("诞生")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashSet")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("TreeSet")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("LinkedHashSet")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK 1.4")])])])]),t._v(" "),a("p",[a("strong",[t._v("线程安全层面")]),t._v("：他们三个都是线程不安全的。")]),t._v(" "),a("p",[t._v("底层数据结构：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Set 的实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("底层实现")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("HashSet")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("利用了 HashMap，去重")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("TreeSet")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("利用了 TreeMap，去重 + 内部有序")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("LinkedHashSet")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("利用了 LinkedHashMap，去重 + 外部有序")])])])]),t._v(" "),a("h3",{attrs:{id:"copyonwritearrayset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copyonwritearrayset"}},[t._v("#")]),t._v(" CopyOnWriteArraySet")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线程安全\n底层利用的是 CopyOnWriteArrayList \n")])])]),a("p",[t._v("CopyOnWriteArraySet 是 JDK 1.5"),a("small",[t._v("（J.U.C）")]),t._v("引入的 Set 接口的线程安全实现。")]),t._v(" "),a("p",[a("strong",[t._v("特征")]),t._v("：线程安全读多写少，比如缓存不能存储重复元素。")]),t._v(" "),a("h2",{attrs:{id:"队列-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列-queue"}},[t._v("#")]),t._v(" 队列（Queue）")]),t._v(" "),a("p",[t._v("Queue 体系比较『新』。"),a("strong",[t._v("Queue")]),t._v(" 接口在 JDK 1.5 才引入到 JDK 集合框架体系，它的子接口 "),a("strong",[t._v("Deque")]),t._v(" 接口在 JDK 1.6 的时候才补充进 JDK 。")]),t._v(" "),a("p",[t._v("Deque 继承自 Queue ，是一个既可以在头部操作元素，又可以为尾部操作元素，俗称为双端队列。")]),t._v(" "),a("blockquote",[a("p",[t._v("在数据结构领域，Queue 是一个先入先出"),a("small",[t._v("（FIFO）")]),t._v("的集合。")])]),t._v(" "),a("p",[t._v("在集合框架中它分为 3 大类：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("非阻塞队列：普通队列"),a("small",[t._v("（Queue、Deque）")])])]),t._v(" "),a("li",[a("p",[t._v("阻塞队列"),a("small",[t._v("（BlockingQueue）")])])]),t._v(" "),a("li",[a("p",[t._v("其它队列：主要是优先级队列 "),a("small",[t._v("（PriorityQueue）")])])])]),t._v(" "),a("p",[a("strong",[t._v("其它队列"),a("small",[t._v("（主要是优先级队列）")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Collection\n└── Queue\n    |── PriorityQueue\n    └── PriorityBlockingQueue\n")])])]),a("h3",{attrs:{id:"非阻塞队列-普通队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞队列-普通队列"}},[t._v("#")]),t._v(" 非阻塞队列"),a("small",[t._v("（普通队列）")])]),t._v(" "),a("p",[t._v("非阻塞队列"),a("small",[t._v("（普通队列）")]),t._v("主要指的是 Queue 接口"),a("small",[t._v("（JDK 1.5）")]),t._v("和 Deque 接口"),a("small",[t._v("（JDK 1.6）")]),t._v("的直接实现类。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Collection\n└── Queue\n    |── ConcurrentLinkedQueue       基于链表，线程安全\n    └── Deque \n        |── ArrayDeque              基于动态数组，线程不安全\n        |── LinkedList              基于链表，线程不安全\n        └── ConcurrentLinkedDeque   基于链表，线程安全\n")])])]),a("p",[a("strong",[t._v("Queue 接口定义"),a("small",[t._v("（引入）")]),t._v("的方法包括：")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Throws exception")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Returns special value")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Insert")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("add(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("offer(e)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Remove")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("remove()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("poll()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Examine")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("element()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("peek()")])])])]),t._v(" "),a("p",[a("strong",[t._v("Deque 接口定义"),a("small",[t._v("（引入）")]),t._v("的方法包括：")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Throws exception")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Special value")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Throws exception")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Special value")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Insert")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("addFirst(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("offerFirst(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("addLast(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("offerLast(e)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Remove")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("removeFirst()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("pollFirst()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("removeLast()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("pollLast()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Examine")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("getFirst()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("peekFirst()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("getLast()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("peekLast()")])])])]),t._v(" "),a("p",[t._v("在引入 Deque 接口之后，JDK 很是器重它，一方面 Deque 的功能涵盖了 Queue 的功能，另一方面，数据结构中的『栈』和『队列』都可以通过 Deque 统一实现。")]),t._v(" "),a("p",[a("strong",[t._v("Queue VS Deque：")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Queue Method")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Equivalent Deque Method")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("add(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("addLast(e)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("offer(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("offerLast(e)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("remove()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("removeFirst()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("poll()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("pollFirst()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("element()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("getFirst()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("peek()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("peekFirst()")])])])]),t._v(" "),a("p",[a("strong",[t._v("Stack VS Deque：")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Stack Method")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Equivalent Deque Method")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("push(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("addFirst(e)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("pop()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("removeFirst()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("peek()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("peekFirst()")])])])]),t._v(" "),a("h3",{attrs:{id:"阻塞队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻塞队列"}},[t._v("#")]),t._v(" 阻塞队列")]),t._v(" "),a("p",[t._v("阻塞队列在队列功能的基础上提供了『阻塞当前线程』的能力：在空队列获取元素时、或者在已存满队列存储元素时，都会被阻塞当前线程。"),a("strong",[t._v("阻塞队列全部都是线程安全的。")])]),t._v(" "),a("p",[a("strong",[t._v("阻塞队列体系")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Collection\n└── Queue\n    |── BlockingQueue \n    |   |── LinkedBlockingQueue     基于链表\n    |   |── ArrayBlockingQueue      基于动态数组\n    |   └── SynchronousQueue        基于 CAS 的阻塞队列。                     |\n    └── Deque\n        └── BlockingDeque\n            └── LinkedBlockingDeque 基于链表，双端队列\n")])])]),a("p",[t._v("BlockingQueue 接口引入了一套新的 API，它和 Queue 的那套 API 是独立的，互不影响，不要调用错了。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Throws exception")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Special value")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Blocks")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Times out")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Insert")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("add(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("offer(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("put(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("offer(e, time, unit)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Remove")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("remove()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("poll()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("take()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("poll(time, unit)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Examine")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("element()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("peek()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("not applicable")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("not applicable")])])])]),t._v(" "),a("h3",{attrs:{id:"其它队列-优先级队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其它队列-优先级队列"}},[t._v("#")]),t._v(" 其它队列（优先级队列）")]),t._v(" "),a("p",[t._v("PriorityQueue 是基于最小二叉堆实现的数据结构。内部以自然顺序排序。")]),t._v(" "),a("p",[t._v("常见的 PriorityQueue 是线程非安全的，PriorityBlockingQueue 是线程安全的。它俩底层数据结构是一样的。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Collection\n└── Queue\n    |── PriorityQueue\n    └── BlockingQueue\n        └── PriorityBlockingQueue\n")])])])])}),[],!1,null,null,null);e.default=l.exports}}]);