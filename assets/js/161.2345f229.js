(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{529:function(v,a,_){"use strict";_.r(a);var t=_(47),r=Object(t.a)({},(function(){var v=this,a=v.$createElement,_=v._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"jvm-的内存布局"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm-的内存布局"}},[v._v("#")]),v._v(" JVM 的内存布局")]),v._v(" "),_("p",[v._v("不同虚拟机实现可能略微有所不同，但都会遵从 Java 虚拟机规范，Java 8 虚拟机规范规定，Java 虚拟机所管理的内存将会包括以下几个区域：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("程序计数器（Program Counter Register）")])]),v._v(" "),_("li",[_("p",[v._v("Java 虚拟机栈（Java Virtual Machine Stacks）")])]),v._v(" "),_("li",[_("p",[v._v("本地方法栈（Native Method Stack）")])]),v._v(" "),_("li",[_("p",[v._v("Java 堆（Java Heap）")])]),v._v(" "),_("li",[_("p",[v._v("方法区（Methed Area）")])])]),v._v(" "),_("h2",{attrs:{id:"_1-程序计数器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-程序计数器"}},[v._v("#")]),v._v(" 1. 程序计数器")]),v._v(" "),_("p",[v._v("程序计数器"),_("small",[v._v("（Program Counter Register）")]),v._v("是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。")]),v._v(" "),_("p",[v._v("在 Java 虚拟机的概念模型里，字节码解析器的工作是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。")]),v._v(" "),_("p",[v._v("由于 Java 虚拟机的多线程是通过线程轮流切换、分配处理器执行时间的方式来实现的。在任意一个确定的时刻，一个处理器"),_("small",[v._v("（对于多核处理器来说就是一个内核）")]),v._v("都只会执行一条线程中的指令。因此为了线程切换后能恢复到正确的执行位置，"),_("strong",[v._v("每个线程都有独立的程序计数器")]),v._v(" 。")]),v._v(" "),_("p",[v._v("如果线程正在执行 Java 中的方法，程序计数器记录的就是正在执行虚拟机字节码指令的地址，如果是 Native 方法，这个计数器就为空"),_("small",[v._v("（undefined）")]),v._v("，因此该内存区域是唯一一个在 Java 虚拟机规范中没有规定 OutOfMemoryError 的区域。")]),v._v(" "),_("h2",{attrs:{id:"_2-java-虚拟机栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-java-虚拟机栈"}},[v._v("#")]),v._v(" 2. Java 虚拟机栈")]),v._v(" "),_("p",[v._v("与程序计数器一样，Java 虚拟机栈"),_("small",[v._v("（Java Virtual Machine Stack）")]),_("strong",[v._v("也是线程私有")]),v._v("的，它的生命周期与线程相同。")]),v._v(" "),_("p",[v._v("Java 虚拟机栈"),_("small",[v._v("（Java Virtual Machine Stacks）")]),v._v("描述的是 Java 方法执行的内存模型，每个方法在执行的同时都会创建一个栈帧"),_("small",[v._v("（Stack Frame）")]),v._v("用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每个方法从调用直至执行完成的过程，都对应着一个线帧在虚拟机栈中入栈到出栈的过程。")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("如果线程请求的栈深度大于虚拟机所允许的栈深度就会抛出 StackOverflowError 异常。")])]),v._v(" "),_("li",[_("p",[v._v("如果虚拟机是可以动态扩展的，如果扩展时无法申请到足够的内存就会抛出 OutOfMemoryError 异常。")])])]),v._v(" "),_("h2",{attrs:{id:"_3-虚拟机栈和『栈内存空间』的关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-虚拟机栈和『栈内存空间』的关系"}},[v._v("#")]),v._v(" 3. 虚拟机栈和『栈内存空间』的关系")]),v._v(" "),_("p",[v._v("我们经常会沿用 C/C++ 中的内存分布结构，将 Java 内存空间分为堆内存"),_("small",[v._v("（Heap）")]),v._v("和栈内存"),_("small",[v._v("（Stack）")]),v._v("。这种说法不算错，但不够准确。")]),v._v(" "),_("p",[v._v("上述说法中的『"),_("strong",[v._v("栈内存")]),v._v("』空间，严格说起来指的是指『"),_("strong",[v._v("虚拟机栈中局部变量表")]),v._v("』部分。")]),v._v(" "),_("p",[v._v("局部变量表存放了编译期可知的各种 Java 虚拟机 8 种基本数据类型、对象引用和 returnAddress 类型"),_("small",[v._v("（指向了一条字节码指令的地址）")]),v._v("。这些数据类型在局部变量表中的存储空间以局部变量槽"),_("small",[v._v("（Slot）")]),v._v("来表示，其中 64 位长度的 long 和 doubl e类型的数据会占用两个变量槽，其余的数据类型只占用一个。")]),v._v(" "),_("p",[v._v("局部变量表所需的内存空间在编 译期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间是完全确定 的，在方法运行期间不会改变局部变量表的大小。")]),v._v(" "),_("h2",{attrs:{id:"_4-本地方法栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-本地方法栈"}},[v._v("#")]),v._v(" 4. 本地方法栈")]),v._v(" "),_("p",[v._v("本地方法栈"),_("small",[v._v("（Native Method Stack）")]),v._v("与虚拟机栈的作用是一样的，只不过虚拟机栈是服务 Java 方法的，而本地方法栈是为虚拟机调用Native 方法服务的。")]),v._v(" "),_("p",[v._v("在 Java 虚拟机规范中对于本地方法栈没有特殊的要求，虚拟机可以自由的实现它，因此在 Sun HotSpot 虚拟机直接把本地方法栈和虚拟机栈合二为一了。")]),v._v(" "),_("p",[v._v("与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出 StackOverflowError 和 OutOfMemoryError 异常。")]),v._v(" "),_("h2",{attrs:{id:"_5-java-堆"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-java-堆"}},[v._v("#")]),v._v(" 5. Java 堆")]),v._v(" "),_("p",[v._v("Java 堆"),_("small",[v._v("（Java Heap）")]),v._v("是 JVM 中内存最大的一块，是被所有『"),_("strong",[v._v("线程共享")]),v._v("』的，在虚拟机启动时候创建。在《Java 虚拟机规范》中对 Java 堆的描述是："),_("code",[v._v("所有的对象实例以及数组都应当在堆上分配")]),v._v(" 。")]),v._v(" "),_("blockquote",[_("p",[v._v("随着 JIT 编译器的发展和逃逸分析技术的逐渐成熟，栈上分配、标量替换优化的技术将会导致一些微妙的变化，所有的对象都分配在堆上渐渐变得不那么绝对了。")])]),v._v(" "),_("p",[v._v("Java 堆是垃圾收集器管理的内存区域，因此一些资料中它也被称作“GC 堆”。")]),v._v(" "),_("blockquote",[_("p",[v._v("从回收内存的角度看，由于现代垃圾收集器大部分都是基于分代收集理论设计的，所以 Java 堆中经常会出现 "),_("em",[v._v("新生代")]),v._v("、"),_("em",[v._v("老年代")]),v._v("、"),_("em",[v._v("永久代")]),v._v("、"),_("em",[v._v("Eden 空间")]),v._v("、"),_("em",[v._v("From Survivor 空间")]),v._v("、"),_("em",[v._v("To Survivor 空间")]),v._v(" 等名词。这些区域划分仅仅是一部分垃圾收集器的共同特性或者说设计风格而已，而非某个 Java 虚拟机具体实现的固有内存布局，更不是《Java 虚拟机规范》里对 Java 堆的进一步细致划分。因此大家不要混淆了概念。")])]),v._v(" "),_("p",[v._v("如果在堆中没有内存完成实例分配，并且堆不可以再扩展时，将会抛 OutOfMemoryError 。")]),v._v(" "),_("p",[v._v("Java 虚拟机规范规定，Java 堆可以处在物理上不连续的内存空间中，只要逻辑上连续即可，就像我们的磁盘空间一样。在实现上也可以是固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是可扩展的，通过 "),_("strong",[_("code",[v._v("-Xmx")])]),v._v(" 和 "),_("strong",[_("code",[v._v("-Xms")])]),v._v(" 控制。")]),v._v(" "),_("h2",{attrs:{id:"_6-方法区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-方法区"}},[v._v("#")]),v._v(" 6. 方法区")]),v._v(" "),_("p",[v._v("方法区"),_("small",[v._v("（Method Area）")]),v._v("与 Java 堆一样，是各个线程共享的内存区域。")]),v._v(" "),_("p",[v._v("方法区与传统语言种的编译代码存储区或者操作系统进程的正文段的作用非常类似，它存储了每一个类的结构信息。例如，运行时常量池、字段和方法数据、构造函数和普通方法的字节码等。")]),v._v(" "),_("p",[v._v("当方法无法满足内存分配需求时会抛出 OutOfMemoryError 异常。")]),v._v(" "),_("p",[v._v("注意，常量池它并非一个独立的区域，它是方法区的一部分。")])])}),[],!1,null,null,null);a.default=r.exports}}]);