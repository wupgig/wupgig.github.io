(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{449:function(t,v,_){"use strict";_.r(v);var l=_(47),s=Object(l.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"git-的使用工作流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-的使用工作流"}},[t._v("#")]),t._v(" Git 的使用工作流")]),t._v(" "),_("p",[t._v("Git 最大的优点同时也是它的最大的缺点：极具灵活性。这种灵活抬高了初学者的学习门槛。为此，有经验的程序员和大型机构结合软件开发的流程为 git 总结-提炼出了固定的使用方式，这中特定的使用顺序和方法被称为 "),_("strong",[t._v("工作流")]),t._v(" 。")]),t._v(" "),_("p",[t._v("Atlassian 公司推荐一种基于 "),_("strong",[t._v("git rebase")]),t._v(" 命令的 Git 工作流，这种工作流与 github 工作流的却别在于，『处理代码冲突』的工作从项目管理者转交到了代码提交者手里，项目提交者必须要保证自己的新代码与 master 分支合并后必须是无误的"),_("small",[t._v("（至少是不耽误 master 分支原有代码运行的）")]),t._v("，再发起 pull request 。")]),t._v(" "),_("p",[t._v("这种基于 "),_("strong",[t._v("git rebase")]),t._v(" 的工作流核心准则只有 2 条：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("让你的本地的 master 和远程仓库的 master『在一起』；")]),t._v(" "),_("ol",[_("li",[t._v("切换到 master 分支")]),t._v(" "),_("li",[t._v("执行 git pull")])])]),t._v(" "),_("li",[_("p",[t._v("让你的工作分支始终保证是『基于你的本地最新 master』的。")]),t._v(" "),_("ol",[_("li",[t._v("切换到工作分支")]),t._v(" "),_("li",[t._v("执行 git rebase")])])])]),t._v(" "),_("p",[t._v("总结起来就是一句话："),_("strong",[t._v("时刻保证你当前的工作分支是『基于』最新的 master 远程分支。")])]),t._v(" "),_("p",[t._v("这种工作流的整体流程如下：")]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("[1]. git clone 下载中央仓库的项目。\n\n[2]. 创建属于自己的分支。如何创建见后续。\n\n[3]. 等待项目经理安排任务。接受到项目经理安排的任务：实现某某功能，或修改某某 bug 。\n\nwhile (true) {\n\n    [4]. 是否满足核心准则一：本地 master 是否是最新的？\n    if (不是) {\n        a. 更新（本地）master 分支。如何更新见后续。\n    }\n\n    [5]. 是否满足核心准则二：本地 xxx 是否是『基于』最新的 master ？\n    if (不是) {\n        a. 本地 xxx 分支变基。如何变基见后续。\n    }\n\n    [6]. 判断是否完成了任务？\n    if (是) {\n        a. 更新（远程）xxx 分支。如何更新见后续。\n        b. 发起和并请求（pull request），并口头通知项目经理，希望他合并。\n        c. break，跳出循环\n    } \n    else if (否) {\n        a. 写 5 分钟代码，努力完成项目经理安排的任务。 \n    }\n\n}\n\n[7]. 回到上面第 [3] 步，再次等待项目经理安排新任务，开始新的工作周期。\n")])])]),_("ul",[_("li",[_("p",[t._v("如何创建自己的分支：")]),t._v(" "),_("ol",{attrs:{start:"0"}},[_("li",[_("p",[t._v("保证是在 master 分支上")])]),t._v(" "),_("li",[_("p",[t._v("通过 git branch 命令创建分支，分支名自定义。")])]),t._v(" "),_("li",[_("p",[t._v("创建成功后，此时你是在你自己 xxx 分支上的。")])])])]),t._v(" "),_("li",[_("p",[t._v("如何更新（远程）xxx 分支：")]),t._v(" "),_("ol",{attrs:{start:"0"}},[_("li",[_("p",[t._v("保证是在本地 xxx 分支上；")])]),t._v(" "),_("li",[_("p",[t._v("通过 git add 命令提交修改（至暂存区）")])]),t._v(" "),_("li",[_("p",[t._v("通过 git commit 命令提交修改（至本地仓库）")])]),t._v(" "),_("li",[_("p",[_("small",[t._v("可选操作：")]),t._v("通过 git rebase 命令"),_("small",[t._v("（的第二个功效）")]),t._v("压缩多个提交，优化提交记录。")])]),t._v(" "),_("li",[_("p",[t._v("通过 git push 命令推送"),_("small",[t._v("（上传）")]),t._v("本地 xxx 分支代码。")])])])]),t._v(" "),_("li",[_("p",[t._v("如何更新（本地）master 分支：")]),t._v(" "),_("ol",{attrs:{start:"0"}},[_("li",[_("p",[t._v("此时你大概率是在本地 master 分支之外，例如，是在 xxx 分支上；")])]),t._v(" "),_("li",[_("p",[t._v("执行 git stash 命令暂存工作空间中的修改；")])]),t._v(" "),_("li",[_("p",[t._v("执行 git checkout 切换到 master 分支；")])]),t._v(" "),_("li",[_("p",[t._v("执行 git pull 命令拉取"),_("small",[t._v("（下载）")]),t._v("远程 master 分支；")])]),t._v(" "),_("li",[_("p",[t._v("执行 git checkout 切换回你来时的分支，例如，xxx 分支；")])]),t._v(" "),_("li",[_("p",[t._v("执行 git pop 取出曾经暂存的工作空间中的修改。")])])])])]),t._v(" "),_("p",[t._v("『完』")])])}),[],!1,null,null,null);v.default=s.exports}}]);