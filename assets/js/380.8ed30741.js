(window.webpackJsonp=window.webpackJsonp||[]).push([[380],{748:function(s,t,a){"use strict";a.r(t);var n=a(47),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"guava-中的反射工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#guava-中的反射工具"}},[s._v("#")]),s._v(" Guava 中的反射工具")]),s._v(" "),a("h2",{attrs:{id:"typetoken"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typetoken"}},[s._v("#")]),s._v(" TypeToken")]),s._v(" "),a("p",[s._v("由于类型擦除，当你在实例化泛型对象时，泛型的信息会受影响。例如：")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" stringList "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("上述代码中的 "),a("em",[s._v("stringList")]),s._v(" 的泛型类型 "),a("em",[s._v("String")]),s._v(" 会被擦除，"),a("em",[s._v("stringList")]),s._v(" 的实际类型会变为 "),a("em",[s._v("ArrayList")]),s._v("，而非 "),a("em",[s._v("ArrayList<String>")]),s._v(" 。")]),s._v(" "),a("p",[s._v("但是好消息是，类型擦除只影响被实例化的类型参数，如果你使用在类定义中，泛型信息会被保留，在运行时可用。例如：")]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringList")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringList")]),s._v(" stringList "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StringList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("当你去使用 "),a("em",[s._v("StringList")]),s._v(" 时，这里的 "),a("em",[s._v("String")]),s._v(" 信息你是可以通过反射机制获取到的。")]),s._v(" "),a("p",[s._v("Guava 就是通过这一点，提出了 TypeToken，用以在必要的场合规避泛型擦除问题。")]),s._v(" "),a("blockquote",[a("p",[s._v("Spring 框架自带的工具箱中有一个 "),a("em",[a("strong",[s._v("ResolvableType")])]),s._v(" 类，它也是基于同样的概念和方案，用以规避泛型擦除问题。")]),s._v(" "),a("p",[s._v("个人觉得，Spring 框架的 "),a("em",[a("strong",[s._v("ResolvableType")])]),s._v(" 要比 Guava 的 "),a("em",[a("strong",[s._v("TypeToken")])]),s._v(" 功能更丰富一些，使用更简便一些，建议优先考虑使用 Spring 的 "),a("em",[a("strong",[s._v("ResolvableType")])]),s._v(" 。")]),s._v(" "),a("p",[s._v("这里就不展开讲解 Guava 的 "),a("em",[a("strong",[s._v("TypeToken")])]),s._v(" 了。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);