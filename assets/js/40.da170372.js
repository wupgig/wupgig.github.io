(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{408:function(t,a,e){"use strict";e.r(a);var s=e(47),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"dockerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[t._v("#")]),t._v(" Dockerfile")]),t._v(" "),e("p",[t._v("Dockerfile 是用来描述文件的构成的文本文档，其中包含了用户可以在使用行调用以组合 Image 的所有命令，用户还可以使用Docker build 实现连续执行多个命令指今行的自动构建。")]),t._v(" "),e("p",[t._v("通过编写 Dockerfile 生成镜像，可以为开发、测试团队提供基本一致的环境，从而提升开发、测试团队的效率，不用再为环境不统一而发愁，同时运维也能更加方便地管理我们的镜像。")]),t._v(" "),e("p",[t._v("Dockerfile 的语法非常简单，常用的只有11个：")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("命令")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("FROM")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("基于哪个镜像来实现")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("MAINTAINER")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("镜像的作者")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("ENV")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("声明环境变量")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("RUN")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("执行命令")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("ADD")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("添加宿主机文件到容器里，\\n有需要解压的文件会自动解压")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("COPY")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("添加宿主机文件到容器里")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("WORKDIR")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("工作目录")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("EXPOSE")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("容器内应用可使用端口")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("CMD")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("容器启动后所执行的程序。\\n如果执行 docker run 后面跟启动命令会被覆盖掉")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("ENTRYPOINT")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("与 CMD 功能相同，但是 docker run 不会覆盖。\\n如果需要覆盖可增加参数 --entrypoint 来覆盖")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("VOLUME")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("将宿主机容器的目录挂载到容器里")])])])]),t._v(" "),e("h2",{attrs:{id:"指令说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#指令说明"}},[t._v("#")]),t._v(" 指令说明")]),t._v(" "),e("h3",{attrs:{id:"from"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#from"}},[t._v("#")]),t._v(" FROM")]),t._v(" "),e("p",[t._v("两种形式如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("FROM <IMAGE>\nFROM <IMAGE>:<TAG>\n")])])]),e("p",[t._v("通过 FROM 指定的镜像名称必须是一个已经存在的镜像，这个镜像称之为基础镜像，必须位于第一条非注释指令。")]),t._v(" "),e("h3",{attrs:{id:"maintainer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maintainer"}},[t._v("#")]),t._v(" MAINTAINER")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("MAINTAINER <NAME>\n")])])]),e("p",[t._v("指定镜像的作者信息，包含镜像的所有者和联系人信息。")]),t._v(" "),e("h3",{attrs:{id:"env"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#env"}},[t._v("#")]),t._v(" ENV")]),t._v(" "),e("p",[t._v("用于设置环境变量")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("ENV <KEY> <VALUE>\nENV <KEY>=<VALUE>\n")])])]),e("h3",{attrs:{id:"run"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[t._v("#")]),t._v(" RUN")]),t._v(" "),e("p",[t._v("用于指定构建镜像时运行的命令，两种模式：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('shell 模式：\nRUN <command> \n\nexec 模式：\nRUN [ "executable", "param1", "param2" ] \n')])])]),e("p",[t._v("在 shell 模式下，是使用 "),e("strong",[t._v("/bin/sh -c COMMAND")]),t._v(" 来运行命令的在 exec 模式下可以指定其他的 shell 来运行命令 "),e("strong",[t._v("RUN [“/bin/bash”, “-c”, “echo hello”]")]),t._v(" 。")]),t._v(" "),e("p",[t._v("多条 RUN 指令可以合并为一条，例如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("RUN yum install httpd && yum install ftp\n")])])]),e("p",[t._v("这样在构建的时候会减少产生中间层镜像。")]),t._v(" "),e("h3",{attrs:{id:"add-和-copy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add-和-copy"}},[t._v("#")]),t._v(" ADD 和 COPY")]),t._v(" "),e("p",[t._v("作用都是将文件或目录复制到 Dockerfile 构建的镜像中。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('ADD <src> <dest>\nADD ["<src>" "<dest>"] \n适用于文件路径包含空格的情况\n\nCOPY <src> <dest>\nADD ["<src>" "<dest>"] \n适用于文件路径包含空格的情况\n')])])]),e("p",[t._v("ADD 包含了类似 tar 的解压功能，如果只是单纯复制文件，建议使用 COPY，而且，两者的源文件路径使用Dockerfile相对路径，目标路径使用绝对路径。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("COPY index.html /var/www/html\n")])])]),e("h3",{attrs:{id:"workdir"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#workdir"}},[t._v("#")]),t._v(" WORKDIR")]),t._v(" "),e("p",[t._v("在容器内部设置工作目录，这样 ENTRYPOINT 和 CMD 指定的命令都会在容器中这个目录下进行。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("WORKDIR /path/to/workdir\n")])])]),e("h3",{attrs:{id:"expose"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expose"}},[t._v("#")]),t._v(" EXPOSE")]),t._v(" "),e("p",[t._v("指定运行该镜像的容器使用的端口，可以是多个。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("EXPOSE <PORT>\n")])])]),e("p",[t._v("使用这个指令的目的是告诉应用程序容器内应用程序会使用的端口，在运行时还需要使用 -p 参数指定映射端口。这是 docker 处于安全的目的，不会自动打开端口。")]),t._v(" "),e("h3",{attrs:{id:"cmd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[t._v("#")]),t._v(" CMD")]),t._v(" "),e("p",[t._v("用于提供容器运行的默认命令，如果在 docker run 时指定了运行的命令，则 CMD 命令不会执行。")]),t._v(" "),e("p",[t._v("CMD 有三种模式：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('CMD <command> (shell模式)\n\nexec 模式\nCMD [ "executable", "param1", "param2" ] \n\n通常与 ENTRYPOINT 搭配指定 ENTRYPOINT 的默认参数\nCMD [ \'param1\', \'param2\'] \n')])])]),e("h3",{attrs:{id:"entrypoint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint"}},[t._v("#")]),t._v(" ENTRYPOINT")]),t._v(" "),e("p",[t._v("与 CMD 类似，ENTRYPOINT 不会被 "),e("strong",[t._v("docker run")]),t._v(" 中指定的命令覆盖，如果想覆盖 ENTRYPOINT，则需要在 "),e("strong",[t._v("docker run")]),t._v(" 中指定 --entrypoint 选项。")]),t._v(" "),e("p",[t._v("它有两种模式：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('shell 模式\nENTRYPOINT <command> \n\nexec 模式\nENTRYPOINT [ "executable", "param1", "param2" ] \n')])])]),e("p",[t._v("###0 VOLUME")]),t._v(" "),e("p",[t._v("用于向容器添加卷，可以提供共享存储等功能")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("VOLUME ['/data']\n")])])]),e("h2",{attrs:{id:"示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),e("p",[t._v("Dockerfile 文件格式如下：")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##Dockerfile 文件格式")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This dockerfile uses the ubuntu image")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# VERSION 2 - EDITION 1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Author: docker_user")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Command format: Instruction [arguments / command] ..")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (1) 第⼀行必须指定基础镜像信息")]),t._v("\nFROM ubuntu\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (2) 维护者信息")]),t._v("\nMAINTAINER docker_user docker_user@email.com\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (3) 镜像操作指令")]),t._v("\nRUN "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deb http://archive.ubuntu.com/ubuntu/ raring main universe"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" /etc/apt/sources.list\nRUN "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" update "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -y nginx\nRUN "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('daemon off;"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" /etc/nginx/nginx.conf\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (4) 容器启动执行指令")]),t._v("\nCMD /usr/sbin/nginx\n")])])]),e("p",[t._v("Dockerfile 分为四部分："),e("strong",[t._v("基础镜像信息")]),t._v("、"),e("strong",[t._v("维护者信息")]),t._v("、"),e("strong",[t._v("镜像操作指令")]),t._v("、"),e("strong",[t._v("容器启动执行指令")]),t._v(" 。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("⼀开始必须要指明所基于的镜像名称，")])]),t._v(" "),e("li",[e("p",[t._v("接下来⼀般会说明维护者信息；")])]),t._v(" "),e("li",[e("p",[t._v("后面则是镜像操作指令，如 RUN 指令。每执行⼀条 RUN 指令，镜像添加新的⼀层，并提交；")])]),t._v(" "),e("li",[e("p",[t._v("最后是 CMD 指令，来指明运行容器时的操作命令。")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);