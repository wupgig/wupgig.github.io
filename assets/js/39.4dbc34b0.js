(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{406:function(t,s,a){"use strict";a.r(s);var e=a(47),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"docker-compose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[t._v("#")]),t._v(" Docker-Compose")]),t._v(" "),a("p",[t._v("Compose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。使用前面介绍的 Dockerfile 我们很容易定义一个单独的应用容器。然而在日常开发工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器；再比如在分布式应用一般包含若干个服务，每个服务一般都会部署多个实例。如果每个服务都要手动启停，那么效率之低、维护量之大可想而知。这时候就需要一个工具能够管理一组相关联的的应用容器，这就是 Docker Compose 。")]),t._v(" "),a("p",[t._v("Compose 有 2 个重要的概念：")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("项目")]),a("small",[t._v("（Project）")]),t._v("：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("服务")]),a("small",[t._v("（Service）")]),t._v("：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。")])])]),t._v(" "),a("h2",{attrs:{id:"docker-compose-安装与卸载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-安装与卸载"}},[t._v("#")]),t._v(" docker compose 安装与卸载")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("step 1:")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('sudo curl -L "https://github.com/docker/compose/releases/download/1.29.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose\n或者\ncp docker-compose-Linux-x86_64 /usr/local/bin/docker-compose\n')])])])]),t._v(" "),a("li",[a("p",[t._v("step 2:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +x /usr/local/bin/docker-compose\n")])])])]),t._v(" "),a("li",[a("p",[t._v("step 3:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ln")]),t._v(" -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n")])])])]),t._v(" "),a("li",[a("p",[t._v("step 4:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker-compose --version\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"docker-compose-重要命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-重要命令"}},[t._v("#")]),t._v(" docker compose 重要命令")]),t._v(" "),a("h3",{attrs:{id:"命令选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令选项"}},[t._v("#")]),t._v(" 命令选项")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("命令选项")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("-f")]),t._v(" <FILE>")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指定使用的 Compose 模板文件，默认为 docker-compose.yml")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("-p <NAME>")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指定项目名称，"),a("br"),t._v("默认将使用所在目录名称作为项目名")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("–verbose")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("输出更多调试信息")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("-v")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("打印版本并退出")])])])]),t._v(" "),a("h3",{attrs:{id:"常用-重要命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用-重要命令"}},[t._v("#")]),t._v(" 常用 & 重要命令")]),t._v(" "),a("p",[a("strong",[t._v("docker-compose")]),t._v(" 等同于 "),a("strong",[t._v("docker-compose -f docker-compose.yml")]),t._v(" 命令，很显然，默认的编排文件的文件名是 docker-compose.yml 。"),a("small",[t._v("如果你的编排文件的文件名不是 docker-compose.yml，那么你就需要使用 -f 选项给指定。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("docker-compose -f xxx.yml")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("config")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。"),a("br"),t._v("此命令不会执行真正的操作，而是显示 docker-compose 程序解析到的配置文件内容。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("images")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("列出 Compose 文件中包含的镜像。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("ps")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("列出项目中目前的所有容器。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("build")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("构建"),a("small",[t._v("（重新构建）")]),t._v("项目中的服务容器。"),a("br"),t._v(" 一般搭配自定义镜像，比如编写的 Dockfile ，功能类似于 "),a("code",[t._v("docker build .")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("up")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("该命令十分强大"),a("small",[t._v("（"),a("strong",[t._v("重点掌握")]),t._v("）")]),t._v("，它将尝试自动完成包括构建镜像，"),a("small",[t._v("（重新）")]),t._v("创建服务，启动服务，并关联服务相关容器的一系列操作。具体见下章。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("down")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("此命令停止用 up 命令所启动的容器并移除网络。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("stop")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("停止已经处于运行状态的容器，但不删除它。通过 "),a("strong",[t._v("docker-compose start")]),t._v(" 可以再次启动这些容器。"),a("br"),t._v("如果不指定 service 时是默认停止所有的容器。如 docker-compose -f skywalking.yml stop elasticsearch"),a("br"),t._v(" 选项：-t, --timeout <TIMEOUT> 停止容器时候的超时"),a("small",[t._v("（默认为 10 秒）")]),t._v("。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("start")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("启动已经存在的服务容器。用法跟上面的 stop 刚好相反。如果不指定 service 时是默认启动所有的容器。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("restart")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("重启项目中的服务。用法跟上面的 stop，start 一样。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("logs")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 "),a("code",[t._v("--no-color")]),t._v(" 来关闭颜色。该命令在调试问题的时候十分有用。如"),a("br"),t._v(" "),a("strong",[t._v("docker-compose -f xxx.yml logs")]),t._v(" 查看整体的日志"),a("br"),t._v(" "),a("strong",[t._v("docker-compose -f xxx.yml logs elasticsearch")]),t._v(" 查看单独容器的日志"),a("br")])])])]),t._v(" "),a("h3",{attrs:{id:"docker-up-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-up-命令"}},[t._v("#")]),t._v(" docker up 命令")]),t._v(" "),a("p",[a("strong",[t._v("docker-compose -f xxx.yml up")]),t._v(" 命令十分强大"),a("small",[t._v("（"),a("strong",[t._v("重点掌握")]),t._v("）")]),t._v("，它将尝试自动完成包括构建镜像，"),a("small",[t._v("（重新）")]),t._v("创建服务，启动服务，并关联服务相关容器的一系列操作。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("docker-compose -f xxx.yml up -d")])]),t._v(" "),a("p",[t._v("默认情况，"),a("strong",[t._v("docker-compose up")]),t._v(" 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。")]),t._v(" "),a("p",[t._v("如果使用"),a("strong",[t._v("docker-compose up -d")]),t._v(" 将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("docker-compose -f xxx.yml up --no-recreate")])]),t._v(" "),a("p",[t._v("默认情况，如果服务容器已经存在，"),a("strong",[t._v("docker-compose up")]),t._v(" 将会尝试停止容器，然后重新创建"),a("small",[t._v("（保持使用 volumes-from 挂载的卷）")]),t._v("，以保证新启动的服务匹配 docker-compose.yml 文件的最新内容。")]),t._v(" "),a("p",[t._v("如果用户不希望容器被停止并重新创建，可以使用 "),a("strong",[t._v("docker-compose up --no-recreate")]),t._v(" 。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("docker-compose -f xxx.yml up --no-deps -d <SERVICE_NAME>")])]),t._v(" "),a("p",[t._v("如果用户只想重新部署某个服务，可以使用 "),a("strong",[t._v("docker-compose up --no-deps -d <SERVICE_NAME>")]),t._v(" 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。")])])]),t._v(" "),a("p",[t._v("docker-compose -f xxx.yml up 命令总结")]),t._v(" "),a("ol",[a("li",[t._v("-d 在后台运行服务容器。")]),t._v(" "),a("li",[t._v("--no-color 不使用颜色来区分不同的服务的控制台输出。")]),t._v(" "),a("li",[t._v("--no-deps 不启动服务所链接的容器。")]),t._v(" "),a("li",[t._v("--force-recreate 强制重新创建容器，不能与 --no-recreate 同时使用。")]),t._v(" "),a("li",[t._v("--no-recreate 如果容器已经存在了，则不重新创建，不能与 --force-recreate 同时使用。")]),t._v(" "),a("li",[t._v("--no-build 不自动构建缺失的服务镜像。")]),t._v(" "),a("li",[t._v("-t, --timeout TIMEOUT 停止容器时候的超时"),a("small",[t._v("（默认为 10 秒）")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"docker-compose-yml-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml-文件"}},[t._v("#")]),t._v(" docker-compose.yml 文件")]),t._v(" "),a("p",[t._v("默认的模板文件名称为 docker-compose.yml，格式为 YAML 格式。其内容例如：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mysql-3306")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3306")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("8.0.16\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("network_mode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bridge"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# restart: always")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" MYSQL_ROOT_PASSWORD=123456\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./3306/conf.d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/etc/mysql/conf.d\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./3306/mysql.conf.d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/etc/mysql/mysql.conf.d\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./3306/data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/var/lib/mysql\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3306:3306"')]),t._v("\n")])])]),a("p",[t._v("注意每个服务都必须通过 image 指令指定镜像或 build 指令"),a("small",[t._v("（需要 Dockerfile）")]),t._v("等来自动构建生成镜像。如果使用 build 指令，在 Dockerfile 中设置的选项"),a("small",[t._v("（例如：CMD, EXPOSE, VOLUME, ENV 等）")]),t._v("将会自动被获取，无需在 docker-compose.yml 中重复设置。")]),t._v(" "),a("h3",{attrs:{id:"docker-compose-yml-文件内容详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml-文件内容详解"}},[t._v("#")]),t._v(" docker-compose.yml 文件内容详解")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("images")]),t._v(" "),a("p",[t._v("指定为镜像名称或镜像 ID 。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("image: apache/skywalking-oap-server:6.5.0\nimage: apache/skywalking-ui:6.5.0\n")])])])]),t._v(" "),a("li",[a("p",[t._v("ports")]),t._v(" "),a("p",[t._v("暴露端口信息。使用 "),a("code",[t._v("宿主端口:容器端口")]),t._v(" "),a("small",[t._v("(HOST:CONTAINER)")]),t._v("格式，或者仅仅指定容器的端口"),a("small",[t._v("（宿主将会随机选择端口）")]),t._v("都可以，端口字符串都使用引号包括起来的字符串格式。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3000"')]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8080:8080"')]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"127.0.0.1:8001:8001"')]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("volumes")]),t._v(" "),a("p",[t._v("数据卷所挂载路径设置。可以设置为宿主机路径"),a("small",[t._v("（"),a("code",[t._v("HOST:CONTAINER")]),t._v("）")]),t._v("或者数据卷名称"),a("small",[t._v("（"),a("code",[t._v("VOLUME:CONTAINER")]),t._v("）")]),t._v("，并且可以设置访问模式"),a("small",[t._v("（"),a("code",[t._v("HOST:CONTAINER:ro")]),t._v("）")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /app/skywalking/elasticsearch/data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/usr/share/elasticsearch/data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("rw\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" conf/elasticsearch.yml"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/usr/share/elasticsearch/config/elasticsearch.yml\n")])])])]),t._v(" "),a("li",[a("p",[t._v("ulimits")]),t._v(" "),a("p",[t._v("指定容器的 ulimits 限制值。例如，指定最大进程数为 65535 ，指定文件句柄数为 20000"),a("small",[t._v("（软限制，应用可以随时修改，不能超过硬限制）")]),t._v("和 40000"),a("small",[t._v("（系统硬限制，只能 root 用户提高）")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ulimits")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nproc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65535")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nofile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("soft")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20000")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("hard")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("40000")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("depends_on")]),t._v(" "),a("p",[t._v("解决容器的依赖、启动先后的问题。以下例子中会先启动 redis mysql 再启动 web")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("web")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" .\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("depends_on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" db\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" redis\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("db")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql\n")])])])]),t._v(" "),a("li",[a("p",[t._v("environment")]),t._v(" "),a("p",[t._v("设置环境变量。你可以使用数组或字典两种格式。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("SW_STORAGE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" elasticsearch\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("SW_STORAGE_ES_CLUSTER_NODES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" elasticsearch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9200")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" SW_STORAGE=elasticsearch\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" SW_STORAGE_ES_CLUSTER_NODES=elasticsearch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9200")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("restart")]),t._v(" "),a("p",[t._v("指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 always 或者 unless-stopped 。")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"docker-compose-yml-的-volumes-的第二种写法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-yml-的-volumes-的第二种写法"}},[t._v("#")]),t._v(" docker-compose.yml 的 volumes 的第二种写法")]),t._v(" "),a("p",[t._v("docker-compose 里 2 种设置方式都是可以持久化的。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("绝对路径的")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ghost")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ghost\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./ghost/config.js"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/var/lib/ghost/config.js\n")])])])]),t._v(" "),a("li",[a("p",[t._v("卷标的")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mysql")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mysql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/var/lib/mysql\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mysql")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n")])])])])]),t._v(" "),a("p",[t._v("第一种情况路径直接挂载到本地，比较直观，但需要管理本地的路径，而第二种使用卷标的方式，比较简洁，但你不知道数据存在本地什么位置。")]),t._v(" "),a("p",[t._v("下面说明如何查看 docker 的卷标：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("查看所有卷标")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker volume "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" \n")])])])]),t._v(" "),a("li",[a("p",[t._v("查看批量的卷标")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker volume "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" mysql\n")])])]),a("p",[t._v("其结果类似如下：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("local     docker_mysql-3306-data\n")])])])]),t._v(" "),a("li",[a("p",[t._v("查看具体的 volume 对应的真实地址")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker volume inspect docker_mysql-3306-data\n")])])]),a("p",[t._v("其结果类似如下：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"CreatedAt"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2021-04-20T05:32:02+08:00"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Driver"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"local"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Labels"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"com.docker.compose.project"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"com.docker.compose.version"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.29.0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"com.docker.compose.volume"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mysql-3306-data"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Mountpoint"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/var/lib/docker/volumes/docker_mysql-3306-data/_data"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker_mysql-3306-data"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Options"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"Scope"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"local"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])])]),t._v(" "),a("p",[t._v("另外， 如果使用到了 volumes一定要注意，在进行 "),a("code",[t._v("docker-compose down")]),t._v(" 时，会自动删除原有容器以及虚拟网。但是其中定义的 volumes 会保留。如果要 down 的同时清理干净，就直接加参数 "),a("code",[t._v("--volumes")]),t._v(" 。")])])}),[],!1,null,null,null);s.default=n.exports}}]);