(window.webpackJsonp=window.webpackJsonp||[]).push([[237],{605:function(t,s,a){"use strict";a.r(s);var e=a(47),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"redis-常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-常用命令"}},[t._v("#")]),t._v(" Redis 常用命令")]),t._v(" "),a("h2",{attrs:{id:"通用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用命令"}},[t._v("#")]),t._v(" 通用命令")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("#")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("命令")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("keys")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("查看所有的 key")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("dbsize")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("统计键值对的数量")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("exists")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("判断指定键值对是否存在")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("4")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("del")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("删除指定键值对")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("5")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("expire")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("设置过期自动删除")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("6")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("type")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("查看键值对数据模型类型")])])])]),t._v(" "),a("hr"),t._v(" "),a("ol",[a("li",[a("p",[t._v("keys 命令")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" keys *\n")])])]),a("p",[t._v("遍历所有的 key。keys 命令一般不在生产环境中使用"),a("small",[t._v("（因为生产环境中键值对极多）")])])]),t._v(" "),a("li",[a("p",[t._v("dbsize 命令")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" dbsize\n")])])]),a("p",[t._v("计算 key 的总数。")])]),t._v(" "),a("li",[a("p",[t._v("exists 命令")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" exists "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("存在则返回 1，不存在返回 0")])]),t._v(" "),a("li",[a("p",[t._v("del 命令")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" del "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("删除指定的键值对")])]),t._v(" "),a("li",[a("p",[t._v("expire 命令")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" expire "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("seconds"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("key 在 seconds 秒后过期。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ttl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("查询 key 的剩余过期时间。返回 -1 表示没有过期设置；返回 -2 表示过期删除。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" persist key\n")])])]),a("p",[t._v("去掉 key 的过期设置")])]),t._v(" "),a("li",[a("p",[t._v("type 命令")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("返回 key 的数据模型，即值的类型。")])])]),t._v(" "),a("h2",{attrs:{id:"字符串命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串命令"}},[t._v("#")]),t._v(" 字符串命令")]),t._v(" "),a("p",[t._v("Redis 中的键"),a("small",[t._v("（key）")]),t._v("都是字符串，但是值可以有多种类型"),a("small",[t._v("（常见五种）")]),t._v("。")]),t._v(" "),a("p",[t._v("字符串类型的值（Value）最大不能超过 512M"),a("small",[t._v("（已经足够大了）")]),t._v("。")]),t._v(" "),a("p",[t._v("一般情况下，考虑到并发、流量等问题，通常字符串类型的值最大也只是『百K』级别。")]),t._v(" "),a("p",[t._v("主要命令：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("命令")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("语法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("get")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("get <key>")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("set")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("set <key> <value>")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("del")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("del <key>")])])])])]),t._v(" "),a("h3",{attrs:{id:"set-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-命令"}},[t._v("#")]),t._v(" set 命令")]),t._v(" "),a("p",[t._v("set 命令用于新增或更新键值对。具体是新增还是更新，取决于该键值对原本是否存在。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("SET <key> <value>\n")])])]),a("p",[t._v("SET 执行成功时返回 OK 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对不存在的键进行设置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SET key "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),t._v("\nOK\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" GET key\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对已存在的键进行设置")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SET key "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"new-value"')]),t._v("\nOK\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" GET key\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"new-value"')]),t._v("\n")])])]),a("ul",[a("li",[a("p",[t._v("set 一个『不存在』的 key ，就是『新增』一个键值对；")])]),t._v(" "),a("li",[a("p",[t._v("set 一个『已存在』的 key ，就是『更新』这个键值对。")])])]),t._v(" "),a("h3",{attrs:{id:"带参数的-set-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#带参数的-set-命令"}},[t._v("#")]),t._v(" 带参数的 set 命令")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("无论 key 是否存在，都进行设置")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("key 不存在，才设置；等同于 "),a("strong",[t._v("setnx <key> <val>")]),t._v(" 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" NX\n")])])]),a("p",[t._v("这是真正意义上的『新增』操作，因为要求之前是必须没有的。")])]),t._v(" "),a("li",[a("p",[t._v("key 存在，才设置。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" XX\n")])])]),a("p",[t._v("这是真正意义上的『更新』操作，因为要求之前是必须有的。")])])]),t._v(" "),a("h3",{attrs:{id:"get"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[t._v("#")]),t._v(" get")]),t._v(" "),a("p",[t._v("Get 命令用于获取某个键值对的值"),a("small",[t._v("（String）")]),t._v("，具体是哪个键值对由参数 "),a("code",[t._v("key")]),t._v(" 决定。")]),t._v(" "),a("p",[t._v("如果键值对不存在，则返回 "),a("code",[t._v("nil")]),t._v(" 。")]),t._v(" "),a("p",[t._v("如果键值对的值部分并非字符串"),a("small",[t._v("（String）")]),t._v("类型，则返回一个错误。"),a("small",[t._v("简而言之，redis 在告诉你 get 命令用错地方了。")])]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("get <key>\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对不存在的 *key* 或字符串类型 *key* 进行 Get")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" GET db\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SET db redis\nOK\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" GET db\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"redis"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对不是字符串类型的 *key* 进行 GET")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" DEL db\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 redis 中添加一个 list 类型的键值对")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LPUSH db redis mongodb mysql\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" GET db\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ERR Operation against a key holding the wrong kind of value\n")])])]),a("h3",{attrs:{id:"del-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#del-命令"}},[t._v("#")]),t._v(" del 命令")]),t._v(" "),a("p",[t._v("del 命令用于删除某个键值对。")]),t._v(" "),a("p",[t._v("如果 "),a("em",[t._v("key")]),t._v(" 代表的键值对不存在，则该操作无任何效果。")]),t._v(" "),a("p",[t._v("实际上 del 命令是一个通用命令，各种类型结构都有这个命令。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("del <key>\n")])])]),a("p",[t._v("del 命令将返回被删除的键值对的数量。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SET w3ckey redis\nOK\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除已创建的 *key* 。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" DEL w3ckey\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),a("h2",{attrs:{id:"哈希命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哈希命令"}},[t._v("#")]),t._v(" 哈希命令")]),t._v(" "),a("p",[t._v("Hash 结构与 String 结构有一定的相似性。")]),t._v(" "),a("p",[t._v("在 Hash 结构中，键值对的值又分为两个部分："),a("strong",[t._v("field")]),t._v(" 和 "),a("strong",[t._v("value")]),t._v(" 。例如：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("key："),a("strong",[t._v("users:1")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("field: "),a("strong",[t._v("id")]),t._v(" ，value: ...")])]),t._v(" "),a("li",[a("p",[t._v("field: "),a("strong",[t._v("name")]),t._v(" ，value: ...")])]),t._v(" "),a("li",[a("p",[t._v("field: "),a("strong",[t._v("age")]),t._v(" ，value: ...")])]),t._v(" "),a("li",[a("p",[t._v("field: "),a("strong",[t._v("address")]),t._v(" ，value: ...")])]),t._v(" "),a("li",[a("p",[t._v("field: "),a("strong",[t._v("email")]),t._v(" ，value: ...")])])])])]),t._v(" "),a("p",[t._v("Hash 类型的价值在于，在 Redis 中存储了一个对象的信息后，可以单独更新该对象的某个属性的值，而不需要：取出-更新-序列化-存入 。")]),t._v(" "),a("p",[t._v("注意，与数据库中的列不同，Hash 结构中不强求两个键值对中必须有同样数量/名称的 field 。")]),t._v(" "),a("h3",{attrs:{id:"hset-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hset-命令"}},[t._v("#")]),t._v(" hset 命令")]),t._v(" "),a("p",[t._v("hset 命令用于向某个 HashTable 中添加新的键值对 "),a("small",[a("em",[t._v("field - value")])]),t._v("。至于是哪个哈希表则取决与参数 "),a("em",[t._v("key")]),t._v(" 。")]),t._v(" "),a("p",[a("code",[t._v("注意")]),t._v("，这里有两层键值对。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("首先，整个 Redis 中的数据内容就是一对一对键值对"),a("small",[t._v("（ key - hashtable ）")]),t._v("，其中，每个键值对的值部分都是一个 HashTable"),a("small",[t._v("（HashTable 是 HashMap 的“高级”版本）")])])]),t._v(" "),a("li",[a("p",[t._v("其次，HashTable 中存放的又是一对一对的键值对"),a("small",[t._v("（ filed - value ）")]),t._v("。")])])]),t._v(" "),a("p",[t._v("如果 "),a("em",[t._v("哈希表")]),t._v(" 不存在，这个哈希表会被创建，并添加至 Redis 中，然后再进行 Hset 操作。")]),t._v(" "),a("p",[t._v("如果 将要添加进哈希表中的 "),a("em",[t._v("键值对")]),t._v(" 已经存在，则该 "),a("em",[t._v("键值对")]),t._v(" 的旧值将被覆盖。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("hset key field value \n")])])]),a("p",[t._v("如果 "),a("em",[t._v("field-value")]),t._v(" 是哈希表中的一个新建键值对，并且值设置成功，返回 1 。")]),t._v(" "),a("p",[t._v("如果在哈希表中 "),a("em",[t._v("field - value")]),t._v(" 字段已经存在，则旧值被新值覆盖，返回 0 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HSET myhash field1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\nOK\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HGET myhash field1\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置一个新域   ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HSET website google "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"www.g.cn"')]),t._v("       \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 覆盖一个旧域   ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("HSET website google "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"www.google.com"')]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("h3",{attrs:{id:"hsetnx-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hsetnx-命令"}},[t._v("#")]),t._v(" hsetnx 命令")]),t._v(" "),a("p",[t._v("Hsetnx 命令用于向某个哈希表中添加新的 "),a("em",[t._v("field - value")]),t._v(" ，具体是哪个 HashTable 取决于参数 "),a("em",[t._v("key")]),t._v(" 。")]),t._v(" "),a("p",[t._v("这里要求 "),a("em",[t._v("filed - value")]),t._v(" 原本不存在于该 HashTable 中 。")]),t._v(" "),a("p",[t._v("如果 "),a("em",[t._v("filed - value")]),t._v(" 不存在，则这个 "),a("em",[t._v("filed - value")]),t._v(" 将被添加到 HashTable 中。")]),t._v(" "),a("p",[t._v("如果 "),a("em",[t._v("filed - value")]),t._v(" 已经存在于哈希表中，操作无效。")]),t._v(" "),a("p",[t._v("如果 HashTable 不存在，一个新哈希表将被创建，并执行 HSETNX 命令。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("hsetnx <key> <field> <value>\n")])])]),a("p",[t._v("hsetnx 命令设置成功时，返回 1 。如果给定 "),a("em",[t._v("filed - value")]),t._v(" 已经存在，则没有操作被执行，返回 0 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# key 或 field 不存在时，才进行设值操作。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HSETNX myhash field1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不存在，操作成功")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HSETNX myhash field1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 存在，操作失败")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HGET myhash field1\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不会有『覆盖』情况出现")]),t._v("\n")])])]),a("h3",{attrs:{id:"hmset-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hmset-命令"}},[t._v("#")]),t._v(" Hmset 命令")]),t._v(" "),a("p",[t._v("Hmset 命令用于同时将多个 "),a("em",[t._v("field - value")]),t._v(" 设置到某个哈希表中，至于具体是哪个哈希表则取决于参数 "),a("em",[t._v("key")]),t._v(" 。")]),t._v(" "),a("p",[t._v("如果 "),a("em",[t._v("field - value")]),t._v(" 在 HashTable 中已存在，此命令会覆盖其旧值。")]),t._v(" "),a("p",[t._v("如果 HashTable 不存在，会创建一个空HashTable，再执行 Hmset 操作。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Hmset <key> <field1> <value1> [field2 value2] ... \n")])])]),a("p",[t._v("如果命令执行成功，返回 OK 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一次性设置 2 个 filed-value 。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HSET myhash field1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v(" field2 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\nOK\n")])])]),a("h3",{attrs:{id:"hdel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hdel"}},[t._v("#")]),t._v(" Hdel")]),t._v(" "),a("p",[t._v("Hdel 命令用于从某个 HashTable 中删除一个或多个 "),a("em",[t._v("filed - value")]),t._v(" ，具体从哪个HashTable中删除，取决于参数 "),a("em",[t._v("key")]),t._v(" ，具体删除那一个/些个 "),a("em",[t._v("filed - value")]),t._v(" 取决于参数 "),a("em",[t._v("filed1 ...")]),t._v(" 。")]),t._v(" "),a("p",[t._v("不存在的 "),a("em",[t._v("filed - value")]),t._v(" 将被忽略。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("HDEL <key> <field1> [ field2 ... ]\n")])])]),a("p",[t._v("HDEL 命令返回被成功删除 "),a("em",[t._v("field - value")]),t._v(" 的数量，其中不包括被忽略的 "),a("em",[t._v("filed - value")]),t._v(" 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HSET myhash field1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HDEL myhash field1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HDEL myhash field2\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("h3",{attrs:{id:"hexists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hexists"}},[t._v("#")]),t._v(" Hexists")]),t._v(" "),a("p",[t._v("Hexists 命令用于查看某个HashTable中是否存在某个 "),a("em",[t._v("filed - values")]),t._v(" 。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Hexists key field\n")])])]),a("p",[t._v("如果哈希表含有给定 "),a("em",[t._v("field - value")]),t._v(" ，返回 1 ； 果哈希表不含有给定 "),a("em",[t._v("field - value")]),t._v(" ，返回 0 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HSET myhash field1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HEXISTS myhash field1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HEXISTS myhash field2\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("h3",{attrs:{id:"hget"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hget"}},[t._v("#")]),t._v(" Hget")]),t._v(" "),a("p",[t._v("Hget 命令用于返回某个哈希表中某个 "),a("em",[t._v("field - value")]),t._v(" 的值。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Hget <key> <field>\n")])])]),a("p",[t._v("返回给定 "),a("em",[t._v("filed - value")]),t._v(" 的值。如果给定的 HashTable 或 "),a("em",[t._v("field - value")]),t._v(" 不存在，则返回 nil 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 字段存在")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HSET site redis redis.com\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HGET site redis\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"redis.com"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 字段不存在")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" HGET site mysql\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"链表命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链表命令"}},[t._v("#")]),t._v(" 链表命令")]),t._v(" "),a("h3",{attrs:{id:"lpush-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lpush-命令"}},[t._v("#")]),t._v(" Lpush 命令")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("增")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("删")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("改")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("查")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("lpush")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("lpop")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("lset")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("lrange")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("linsert")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("rpop")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("lindex")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("lrem")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("llen")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("ltrim")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}}),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})])])]),t._v(" "),a("p",[t._v("Lpush 命令将一个或多个值插入到某个列表头部"),a("small",[t._v("（左侧）")]),t._v("，具体是哪个链表由参数 "),a("em",[t._v("key")]),t._v(" 决定。")]),t._v(" "),a("p",[t._v("如果链表不存在，一个空列表会被创建，而后再执行 Lpush 操作。")]),t._v(" "),a("p",[t._v("当 key 对应的类型不是列表类型时，返回一个错误。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Lpush <key> <value> [ value ... ]\n")])])]),a("p",[t._v("执行 Lpush 命令后，将返回列表的长度。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LPUSH "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9527")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LPUSH "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9527")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LRANGE "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9527")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"20"')]),t._v("\n")])])]),a("h3",{attrs:{id:"rpush-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rpush-命令"}},[t._v("#")]),t._v(" Rpush 命令")]),t._v(" "),a("p",[t._v("Rpush 命令用于将一个或多个值插入到某个列表的尾部（最右边），具体是哪个列表由参数 "),a("em",[t._v("key")]),t._v(" 决定。")]),t._v(" "),a("p",[t._v("如果列表不存在，一个空列表会被创建，然后再执行 Rpush 操作。")]),t._v(" "),a("p",[t._v("当 key 对应的类型不是列表类型时，返回一个错误。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Rpush <key> <value> [ value ... ]\n")])])]),a("p",[t._v("执行 Rpush 操作后，将返回列表的长度。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9528")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9528")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9528")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"goodbye"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LRANGE "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9528")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"goodbye"')]),t._v("\n")])])]),a("h3",{attrs:{id:"lindex-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lindex-命令"}},[t._v("#")]),t._v(" Lindex 命令")]),t._v(" "),a("p",[t._v("Lindex 命令用于通过索引获取某个列表中的元素，具体是哪个列表由参数 "),a("em",[t._v("key")]),t._v(" 决定。")]),t._v(" "),a("p",[t._v("索引都是从头向尾（从左到右）的方向算，从 0 开始。")]),t._v(" "),a("p",[t._v("你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Lindex <key> <index>\n")])])]),a("p",[t._v("Lindex 命令返回列表中下标所指定的位置的值。如果指定索引值不在列表的区间范围内，返回 nil 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LPUSH list_1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LPUSH list_1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LINDEX list_1 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LINDEX list_1 -1\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LINDEX list_1 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# index不在 mylist 的区间范围内")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"llen-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#llen-命令"}},[t._v("#")]),t._v(" Llen 命令")]),t._v(" "),a("p",[t._v("Llen 命令用于返回某个列表的长度。")]),t._v(" "),a("p",[t._v("如果列表不存在，则返回 0 。")]),t._v(" "),a("p",[t._v("如果 key 对应的不是列表类型，则返回一个错误。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Llen <key>\n")])])]),a("p",[t._v("Llen 返回列表的长度。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH list1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH list1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LLEN list1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),a("h3",{attrs:{id:"lpop-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lpop-命令"}},[t._v("#")]),t._v(" Lpop 命令")]),t._v(" "),a("p",[t._v("Lpop 命令用于移除，并返回某个列表的第一个元素（最左侧的元素）。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Lpop <key>\n")])])]),a("p",[t._v("Lpop 将返回列表的第一个元素；当列表不存在时，返回 nil 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH list1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH list1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LPOP list1\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n")])])]),a("h3",{attrs:{id:"rpop-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rpop-命令"}},[t._v("#")]),t._v(" Rpop 命令")]),t._v(" "),a("p",[t._v("Rpop 命令用于移除，并返回某个列表的最后一个元素（最右侧的元素）。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("RPOP key\n")])])]),a("p",[t._v("Rpop 命令将会返回列表的最后一个元素；当列表不存在时，返回 nil 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH mylist "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH mylist "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH mylist "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH mylist "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPOP mylist\nOK\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LRANGE mylist "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n")])])]),a("h3",{attrs:{id:"linsert-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linsert-命令"}},[t._v("#")]),t._v(" Linsert 命令")]),t._v(" "),a("p",[t._v("Linsert 命令用于在某个列表的元素（锚点元素）前或者后插入元素。")]),t._v(" "),a("p",[t._v("当列表不存在时，被视为空列表，不执行任何操作。")]),t._v(" "),a("p",[t._v("如果 key 对应的不是列表类型，返回一个错误。")]),t._v(" "),a("p",[t._v("当指定的锚点元素不存在于列表中时，不执行任何操作。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Linsert <key> [before | after] <pivot> <value>\n")])])]),a("p",[t._v("如果 Linsert 命令执行成功，返回插入操作完成之后，列表的长度；如果没有找到指定元素 ，返回 -1；如果类表不存在或为空列表，返回 0 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH list1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH list1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LINSERT list1 BEFORE "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Yes"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LRANGE mylist "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Yes"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n")])])]),a("h3",{attrs:{id:"lrange-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lrange-命令"}},[t._v("#")]),t._v(" Lrange 命令")]),t._v(" "),a("p",[t._v("Lrange 返回某个列表中指定区间内的元素，区间以参数 "),a("em",[t._v("start")]),t._v(" 和 "),a("em",[t._v("end")]),t._v(" 指定。其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。")]),t._v(" "),a("p",[t._v("你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Lrange <key> <start> <end>\n")])])]),a("p",[t._v("Lrange 命令返回一个列表，包含指定区间内的元素。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LPUSH list1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LPUSH list1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LPUSHX list1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LRANGE list1 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n")])])]),a("h3",{attrs:{id:"lrem-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lrem-命令"}},[t._v("#")]),t._v(" Lrem 命令")]),t._v(" "),a("p",[t._v("Lrem 根据参数 "),a("em",[t._v("count")]),t._v(" 的值，移除某个列表中与参数 "),a("em",[t._v("value")]),t._v(" 相等的元素。")]),t._v(" "),a("p",[a("em",[t._v("count")]),t._v(" 的值可以是以下几种：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("count > 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 "),a("em",[t._v("count")]),t._v(" 。")])]),t._v(" "),a("li",[a("p",[t._v("count < 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 "),a("em",[t._v("count")]),t._v(" 的绝对值。")])]),t._v(" "),a("li",[a("p",[t._v("count = 0 : 移除表中所有与 VALUE 相等的值。")])])]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Lrem <key> <count> <value>\n")])])]),a("p",[t._v("Lrem 命令返回被移除元素的数量。 列表不存在时返回 0 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH mylist "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH mylist "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH mylist "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" RPUSH mylist "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LREM mylist -2 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),a("h2",{attrs:{id:"集合-set-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集合-set-命令"}},[t._v("#")]),t._v(" 集合（Set）命令")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("无序")]),t._v(" "),a("li",[t._v("无重复")]),t._v(" "),a("li",[t._v("集合间操作")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("集合内 API")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("集合间 API")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("sadd")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("sdiff")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("srem")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("sinter")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("scard")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("sunion")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("sismember")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("srandmember")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("smembers")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("spop")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})])])]),t._v(" "),a("h3",{attrs:{id:"sadd-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sadd-命令"}},[t._v("#")]),t._v(" Sadd 命令")]),t._v(" "),a("p",[t._v("Sadd 命令将一个或多个成员元素加入到某个集合中，已经存在于集合的成员元素将被忽略。")]),t._v(" "),a("p",[t._v("假如集合不存在，则创建一个新的集合，而后再执行 Sadd 操作。")]),t._v(" "),a("p",[t._v("当 "),a("em",[t._v("key")]),t._v(" 对应的并非集合类型时，返回一个错误。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Sadd <key> <value> [ value ... ]\n")])])]),a("p",[t._v("Sadd 命令将被添加到集合中的新元素的数量，不包括被忽略的元素。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SMEMBERS myset\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n")])])]),a("h3",{attrs:{id:"scard-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scard-命令"}},[t._v("#")]),t._v(" Scard 命令")]),t._v(" "),a("p",[t._v("Scard 命令返回某个集合中元素的数量。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("SCARD <key>\n")])])]),a("p",[t._v("Scard 命令将返回集合中元素的数量；当集合 key 不存在时，返回 0 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SCARD myset\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),a("h3",{attrs:{id:"sismember-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sismember-命令"}},[t._v("#")]),t._v(" Sismember 命令")]),t._v(" "),a("p",[t._v("Sismember 命令判断成员元素是否是某个集合的成员。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Sismember <key> <value>\n")])])]),a("p",[t._v("如果成员元素是集合的成员，Sismsmber 将返回 1 ；如果成员元素不是集合的成员，或集合不存在，返回 0 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SISMEMBER myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SISMEMBER myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("h3",{attrs:{id:"smembers-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#smembers-命令"}},[t._v("#")]),t._v(" Smembers 命令")]),t._v(" "),a("p",[t._v("Smembers 命令返回某个集合中的所有的成员。")]),t._v(" "),a("p",[t._v("如果集合不存在，则视其为一个空集合。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Smembers <key>\n")])])]),a("p",[t._v("Smembers 命令将返回集合中的所有成员。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SMEMBERS myset1\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n")])])]),a("h3",{attrs:{id:"srandmember-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#srandmember-命令"}},[t._v("#")]),t._v(" Srandmember 命令")]),t._v(" "),a("p",[t._v("Srandmember 命令用于从某个集合中返回一个或多个随机元素。")]),t._v(" "),a("p",[t._v("从 Redis 2.6 版本开始， Srandmember 命令接受可选的 "),a("em",[t._v("count")]),t._v(" 参数：")]),t._v(" "),a("p",[t._v("如果 "),a("em",[t._v("count")]),t._v(" 为正数，且小于集合基数，那么命令返回一个包含 "),a("em",[t._v("count")]),t._v(" 个元素的数组，数组中的元素各不相同。如果 "),a("em",[t._v("count")]),t._v(" 大于等于集合基数，那么返回整个集合。")]),t._v(" "),a("p",[t._v("如果 "),a("em",[t._v("count")]),t._v(" 为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为 count 的绝对值。")]),t._v(" "),a("p",[t._v("返回的元素并不会从集合中移除。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Srandmember <key> [ count ]\n")])])]),a("p",[t._v("如果没有 "),a("em",[t._v("count")]),t._v(" 参数，Srandmember 将返回一个元素；如果提供了 "),a("em",[t._v("count")]),t._v(" 参数，那么返回一个数组；如果集合为空，返回空数组；如果集合为空，返回 nil 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SRANDMEMBER myset1\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SRANDMEMBER myset1 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n")])])]),a("h3",{attrs:{id:"smove-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#smove-命令"}},[t._v("#")]),t._v(" Smove 命令")]),t._v(" "),a("p",[t._v("Smove 命令将指定成员 "),a("em",[t._v("member")]),t._v(" 元素从 "),a("em",[t._v("source")]),t._v(" 集合移动到 "),a("em",[t._v("destination")]),t._v(" 集合。")]),t._v(" "),a("p",[t._v("SMOVE 是原子性操作。")]),t._v(" "),a("p",[t._v("如果 source 集合不存在或不包含指定的 member 元素，则 SMOVE 命令不执行任何操作，仅返回 0 。")]),t._v(" "),a("p",[t._v("否则， member 元素从 source 集合中被移除，并添加到 destination 集合中去。")]),t._v(" "),a("p",[t._v("当 destination 集合已经包含 member 元素时， SMOVE 命令只是简单地将 source 集合中的 member 元素删除。")]),t._v(" "),a("p",[t._v("当 source 或 destination 不是集合类型时，返回一个错误。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("SMOVE <source> <destination> <member>\n")])])]),a("p",[t._v("如果成员元素被成功移除，SMOVE 返回 1 。")]),t._v(" "),a("p",[t._v("如果成员元素不是 source 集合的成员，并且没有任何操作对 destination 集合执行，那么返回 0 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset2 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SMOVE myset1 myset2 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\ninteger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SMEMBERS myset1\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SMEMBERS myset2\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n")])])]),a("h3",{attrs:{id:"spop-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spop-命令"}},[t._v("#")]),t._v(" Spop 命令")]),t._v(" "),a("p",[t._v("Spop 命令用于『"),a("strong",[t._v("随机")]),t._v("』移除，并返回集合中的一个元素。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Spop key\n")])])]),a("p",[t._v("被移除的随机元素。 当集合不存在或是空集时，返回 nil 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SPOP myset1\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SMEMBERS myset1\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n")])])]),a("h3",{attrs:{id:"srem-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#srem-命令"}},[t._v("#")]),t._v(" Srem 命令")]),t._v(" "),a("p",[t._v("Srem 命令用于移除集合中的一个或多个成员元素，不存在的成员元素会被忽略。")]),t._v(" "),a("p",[t._v("当 key 对应的不是集合类型时，返回一个错误。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Srem <key> <member> [ member ... ]\n")])])]),a("p",[t._v("Srem 返回被成功、实际移除的元素的数量，不包括被忽略的元素。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SADD myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SREM myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SREM myset1 "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" SMEMBERS myset1\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n")])])]),a("h2",{attrs:{id:"有序集合命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有序集合命令"}},[t._v("#")]),t._v(" 有序集合命令")]),t._v(" "),a("p",[t._v("和『哈希』有点类似，有序集合中的键值对的值中，也是有两个部分："),a("strong",[t._v("score")]),t._v(" 和 "),a("strong",[t._v("value")]),t._v(" 。")]),t._v(" "),a("p",[t._v("score 的值决定了与之对应的 value 的顺序")]),t._v(" "),a("ul",[a("li",[t._v("zadd")]),t._v(" "),a("li",[t._v("zrem")]),t._v(" "),a("li",[t._v("zscore")]),t._v(" "),a("li",[t._v("zincrby")]),t._v(" "),a("li",[t._v("zcard")]),t._v(" "),a("li",[t._v("zrange")]),t._v(" "),a("li",[t._v("zrangebyscore")]),t._v(" "),a("li",[t._v("zcount")]),t._v(" "),a("li",[t._v("zremrangebyrank")]),t._v(" "),a("li",[t._v("zremrangebyscore")])]),t._v(" "),a("h3",{attrs:{id:"zadd-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zadd-命令"}},[t._v("#")]),t._v(" Zadd 命令")]),t._v(" "),a("p",[t._v("Zadd 命令用于将一个或多个成员元素及其分数值加入到某个有序集当中。")]),t._v(" "),a("p",[t._v("如果某个成员已经是有序集的成员，那么更新这个成员的分数值。"),a("small",[t._v("有序集合内部会重新调整成员元素的位置，来保证这个集合的有序性。")])]),t._v(" "),a("p",[t._v("分数值可以是整数值或双精度浮点数。通常使用整数值。")]),t._v(" "),a("p",[t._v("如果有序集合不存在，则创建一个空的有序集并执行 Zadd 操作。")]),t._v(" "),a("p",[t._v("当 key 所对应的并非有序集类型时，返回一个错误。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Zadd <key> <score> <value> [scoren value ... ]\n")])])]),a("p",[t._v("Zadd 命令将被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD set1 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD set1 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD set1 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGE set1 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1 WITHSCORES\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),t._v("\n")])])]),a("h3",{attrs:{id:"zcard-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zcard-命令"}},[t._v("#")]),t._v(" Zcard 命令")]),t._v(" "),a("p",[t._v("Zcard 命令用于计算某个集合中元素的数量。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Zcard <key>\n")])])]),a("p",[t._v("当集合存在时，Zcard 返回有序集的基数；当集合不存在时，返回 0 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD myset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD myset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD myset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZCARD myzset\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])]),a("h3",{attrs:{id:"zcount-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zcount-命令"}},[t._v("#")]),t._v(" Zcount 命令")]),t._v(" "),a("p",[t._v("Zcount 命令用于计算某有序集合中指定分数区间的成员数量。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Zcount <key> <min> <max>\n")])])]),a("p",[t._v("Zcount 返回分数值在 "),a("em",[t._v("min")]),t._v(" 和 "),a("em",[t._v("max")]),t._v(" 之间的成员的数量。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD myzset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD myzset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD myzset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZCOUNT myzset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])]),a("h3",{attrs:{id:"zincrby-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zincrby-命令"}},[t._v("#")]),t._v(" Zincrby 命令")]),t._v(" "),a("p",[t._v("Zincrby 命令对某有序集合中指定成员的分数加上增量 "),a("em",[t._v("increment")])]),t._v(" "),a("p",[t._v("可以通过传递一个负数值 "),a("em",[t._v("increment")]),t._v(" ，让分数减去相应的值，比如 ZINCRBY key -5 member ，就是让 member 的 score 值减去 5 。")]),t._v(" "),a("p",[t._v("当有序集合不存在，或有序集合中不存在指定分数时， Zincrby 等同于 Zadd 。")]),t._v(" "),a("p",[t._v("当 key 对应的不是有序集时，返回一个错误。")]),t._v(" "),a("p",[t._v("分数值可以是整数值或双精度浮点数。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Zincrby <key> <increment> <member>\n")])])]),a("p",[t._v("Zincrby 命令返回参数 "),a("code",[t._v("member")]),t._v(" 的新的分数值"),a("small",[t._v("（以字符串形式表示）")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD myzset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZADD myzset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZINCRBY myzset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGE myzset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1 WITHSCORES\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),t._v("\n")])])]),a("h3",{attrs:{id:"zrem-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zrem-命令"}},[t._v("#")]),t._v(" Zrem 命令")]),t._v(" "),a("p",[t._v("Zrem 命令用于移除某个有序集中的一个或多个成员，不存在的成员将被忽略。")]),t._v(" "),a("p",[t._v("如果 key 对应的并非是有序集类型，则返回一个错误。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Zrem <key> <member>\n")])])]),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基本示例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGE page_rank "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1 WITHSCORES\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bing.com"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"baidu.com"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"9"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"google.com"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 移除单个元素")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZREM page_rank google.com\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGE page_rank "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1 WITHSCORES\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bing.com"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"baidu.com"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"9"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 移除多个元素")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZREM page_rank baidu.com bing.com\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGE page_rank "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1 WITHSCORES\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty list or "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 移除不存在元素")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZREM page_rank non-exists-element\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("h3",{attrs:{id:"zrange-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zrange-命令"}},[t._v("#")]),t._v(" Zrange 命令")]),t._v(" "),a("p",[t._v("Zrange 返回某有序集中，指定区间内的成员。")]),t._v(" "),a("p",[t._v("如果需要逆序显示，请使用 Zrevrange 命令。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Zrange <key> <start> <stop> [ WITHSCORES ]\n")])])]),a("p",[t._v("Zrange 命令将指定区间内，带有分数值"),a("small",[t._v("（可选）")]),t._v("的有序集成员的列表。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示整个有序集成员")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGE salary "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1 WITHSCORES\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jack"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3500"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5000"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"boss"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10086"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示有序集下标区间 1 至 2 的成员")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGE salary "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" WITHSCORES\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5000"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"boss"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10086"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 测试 end 下标超出最大下标时的情况")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGE salary "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200000")]),t._v(" WITHSCORES\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jack"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3500"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5000"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"boss"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10086"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 测试当给定区间不存在于有序集时的情况")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGE salary "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000000")]),t._v(" WITHSCORES\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty list or "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"zrank-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zrank-命令"}},[t._v("#")]),t._v(" Zrank 命令")]),t._v(" "),a("p",[t._v("Zrank 返回有序集中指定成员的排名。其中有序集成员按分数值递增"),a("small",[t._v("（从小到大）")]),t._v("顺序排列。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("ZRANK <key> <member>\n")])])]),a("p",[t._v("如果成员是有序集的成员，ZRANK 返回 member 的排名；如果成员不是有序集的成员，返回 nil 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示所有成员及其 score 值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGE salary "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1 WITHSCORES\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"peter"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3500"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4000"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jack"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5000"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示 tom 的薪水排名，第二")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANK salary tom\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),a("h3",{attrs:{id:"zrevrank-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zrevrank-命令"}},[t._v("#")]),t._v(" Zrevrank 命令")]),t._v(" "),a("p",[t._v("Zrevrank 命令返回有序集中成员的排名。其中有序集成员按分数值降序排序。")]),t._v(" "),a("p",[t._v("使用 Zrank 命令可以获得成员按分数值升序排序。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Zrevrank <key> <member>\n")])])]),a("p",[t._v("如果成员是有序集的成员，Zrevrank 返回成员的排名；如果成员不是有序集的成员，返回 nil 。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGE salary "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1 WITHSCORES     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 测试数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jack"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2000"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"peter"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3500"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5000"')]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZREVRANK salary peter     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# peter 的工资排第二")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZREVRANK salary tom       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tom 的工资最高")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("h3",{attrs:{id:"zscore-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zscore-命令"}},[t._v("#")]),t._v(" Zscore 命令")]),t._v(" "),a("p",[t._v("Zscore 命令返回有序集中，成员的分数值。")]),t._v(" "),a("p",[t._v("如果成员元素不是有序集的成员，或有序集合不存在，返回 nil 。")]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("Zscore <key> <member>\n")])])]),a("p",[t._v("Zscore 返回成员的分数值"),a("small",[t._v("（以字符串形式表示）")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZRANGE salary "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" -1 WITHSCORES    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 测试数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2000"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"peter"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3500"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jack"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5000"')]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ZSCORE salary peter              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意返回值是字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3500"')]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);