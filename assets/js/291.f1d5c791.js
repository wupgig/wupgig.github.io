(window.webpackJsonp=window.webpackJsonp||[]).push([[291],{660:function(t,a,s){"use strict";s.r(a);var n=s(47),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"配置中心-spring-cloud-config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置中心-spring-cloud-config"}},[t._v("#")]),t._v(" 配置中心：Spring Cloud Config")]),t._v(" "),s("p",[t._v("在实际使用场景中，集群中会存在多个微服务，而每个服务又有可能存在多个实例。如果每一个微服务都是靠自己的 "),s("strong",[t._v("application.properties")]),t._v(" 或 "),s("strong",[t._v("application.yml")]),t._v(" 进行配置，那么整个项目的配置就会繁琐为混乱。例如：")]),t._v(" "),s("p",[t._v("多个 Service Producer 使用的是用一个数据库。理论上，可以在各个项目中配置数据库连接相关配置。但是，如果一旦有变动，如数据库所在主机的 IP 变动了，那么你需要改很多处地方，而且还必须确保无一遗漏。")]),t._v(" "),s("p",[t._v("因此 Spring Cloud 为我们集成了『"),s("strong",[t._v("配置中心")]),t._v("』："),s("strong",[t._v("spring-cloud-config")]),t._v(" 组件。")]),t._v(" "),s("p",[t._v("Spring Cloud Config 是一个高可用的分布式配置中心，专门用于管理系统的所有配置，也就是我们将所有配置文件放到统一的地方进行管理。")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("Config Server")]),t._v("：负责向各个子系统提供配置信息；")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Config Client")]),t._v("：各个子系统。各个项目各自从 "),s("strong",[t._v("Config Server")]),t._v(" 去『拉取』属于自己的配置信息。")]),t._v(" "),s("p",[s("strong",[t._v("注意")]),t._v("：和 Eureka Client 拉取注册表不一样，各个子系统『拉取自己的配置』只拉取一次，一旦拉取成功后这些配置信息就缓存在了各个子系统的本地。")])])]),t._v(" "),s("h2",{attrs:{id:"_1-config-server-本地存储配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-config-server-本地存储配置文件"}},[t._v("#")]),t._v(" 1. Config Server 本地存储配置文件")]),t._v(" "),s("p",[t._v("最简单的注册中心的配置管理方式是各个微服务的相关配置以 .properties 或 .yml 配置文件的形式存储在 Config Server 的磁盘上。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("加依赖")]),t._v(" "),s("p",[t._v("在 spring starter 中引入："),s("em",[t._v("Spring Web")]),t._v(" 和 "),s("strong",[t._v("Config Server")]),t._v(" 。")]),t._v(" "),s("p",[t._v("这个扮演 "),s("strong",[t._v("Config Server")]),t._v(" 角色的 Spring Boot 项目负责在它的本地维护一批配置文件。")])]),t._v(" "),s("li",[s("p",[t._v("加注解")]),t._v(" "),s("p",[t._v("在启动类上加入 "),s("strong",[t._v("@EnableConfigServer")]),t._v(" 注解，标识本项目的『身份』是 Config Server，并激活相关配置。")])]),t._v(" "),s("li",[s("p",[t._v("加配置")]),t._v(" "),s("p",[t._v("编写 Config Server 的 "),s("strong",[t._v("application.yml")]),t._v(" 配置文件，并写入如下内容：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3301")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("native")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("search-locations")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" classpath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/xxx\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("profiles")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("active")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" native\n")])])]),s("p",[t._v("在 Config Server 项目的 classpath"),s("small",[t._v("（resources）")]),t._v("下，创建 "),s("code",[t._v("xxx")]),t._v(" 文件夹，并在下面创建一个名为 "),s("code",[t._v("xxx-service-dev.yml")]),t._v(" 的配置文件。这个配置文件的文件名有 2 处需要我们注意的："),s("code",[t._v("xxx-sesrvice")]),t._v(" 和 "),s("code",[t._v("dev")]),t._v("，后面我们会用到它们两个。")])])]),t._v(" "),s("p",[t._v("以特定规则的 URI 访问 Config Server，可以看到它对外『暴露』出来的配置信息：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("/<子系统-application-name>/<profile-name>\n")])])]),s("p",[t._v("你所看到的 JSON 内容中就会有 application-name-profile.yml 配置文件中的配置信息。")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx-service"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"profiles"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dev"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"label"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"version"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bcbf31dfa30218c9282f6d5eca23364188b803cf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"state"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"propertySources"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://gitee.com/hemiao3020/config-only-a-demo.git/config/config-single-client-dev.yml"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"source"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"logging.level.root"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"WARN"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            ...\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"_2-简单的-config-client"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-简单的-config-client"}},[t._v("#")]),t._v(" 2. 简单的 Config Client")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("加依赖")]),t._v(" "),s("p",[t._v("在 Spring Initializer 中引入："),s("em",[t._v("Spring Web")]),t._v(" 和 "),s("strong",[t._v("Config Client")]),t._v(" 。")]),t._v(" "),s("p",[t._v("这里注意的有 2 点：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("如果是在 Initializer 界面上选择，"),s("strong",[t._v("不要错选成了 Config Client (PCF)")]),t._v(" 。")])]),t._v(" "),s("li",[s("p",[t._v("如果是手写 pom 中的依赖，Config Client 引入的依赖『"),s("strong",[t._v("不是想当然的 spring-cloud-config-client")]),t._v("』 。")])])])]),t._v(" "),s("li",[s("p",[t._v("加配置")]),t._v(" "),s("p",[t._v("Config Client 是要去『"),s("strong",[t._v("连接")]),t._v("』Config Server，从中去取属于自己"),s("small",[t._v("（指定）")]),t._v("的配置项。因此，与连接相关的配置，必须要写在 Config Client 的 "),s("strong",[t._v("bootstrap")]),t._v(" 配置文件中。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" xxx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//127.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3301")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("profile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dev\n")])])])])]),t._v(" "),s("p",[t._v("毫无疑问，它所取到的配置，就是 "),s("a",{attrs:{href:"http://127.0.0.1:3301/xxx-service/dev",target:"_blank",rel:"noopener noreferrer"}},[s("em",[t._v("http://127.0.0.1:3301/xxx-service/dev")]),s("OutboundLink")],1),t._v(" 中所记录的。")]),t._v(" "),s("h2",{attrs:{id:"_3-git-服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-git-服务器"}},[t._v("#")]),t._v(" 3. Git 服务器")]),t._v(" "),s("p",[t._v("Config Server 还支持将配置文件存储与 Git Server 和 SVN Server 上。")]),t._v(" "),s("p",[t._v("当然这就是 Config Server 和 Git Server、SVN Server 之间的事情，和 Config Client 无关。Config Client 并不关系 Config Server 上的配置信息来源于哪里。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/config-01.png",alt:""}})]),t._v(" "),s("blockquote",[s("p",[t._v("由于 github 网速较慢，因此，这里使用的是 gitee 。不过，实际中可能会是使用 gitlab、gogs、gitea 等搭建局域网的 Git 服务器。")])]),t._v(" "),s("p",[t._v("创建的仓库地址为："),s("a",{attrs:{href:"https://gitee.com/hemiao3000/config-only-a-demo.git",target:"_blank",rel:"noopener noreferrer"}},[t._v("配置中心仓库"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("目录结构如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("仓库\n│── config\n│   │── xxx-service-dev.yml\n│   │── xxx-service-test.yml\n│   │── xxx-service-prod.yml\n│   │── xxx-service-test.yml\n│   │── yyy-service-dev.yml\n│   │── yyy-service-test.yml\n│   └── yyy-service-prod.yml\n│── 其他文件...\n└── 其它目录...\n")])])]),s("p",[t._v("很显然，上面的 "),s("code",[t._v("xxx-service")]),t._v(" 和 "),s("code",[t._v("yyy-service")]),t._v(" 是两个子系统的 application name 。")]),t._v(" "),s("p",[t._v("以最常见的日志格式为例，这些配置文件中的内容，可以是日志的级别和格式设置：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("logging")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("level")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("root")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" WARN\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("com.woniu")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" DEBUG\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("com.example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" DEBUG\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("pattern")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(' "$'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("CONSOLE_LOG_PATTERN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\\\n      "),s("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%clr(${LOG_LEVEL_PATTERN:%5p}) \\")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%clr(|){faint} \\")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%clr(%-40.40logger{39}){cyan} \\")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token directive important"}},[t._v("%clr(:){faint} \\")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token directive important"}},[t._v('%m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}"')]),t._v("\n")])])]),s("p",[t._v("配置文件的内容大致如下，用于区分，略有不同。")]),t._v(" "),s("p",[s("strong",[t._v("注意")]),t._v("：并非必须是 "),s("strong",[t._v(".yml")]),t._v(" 文件，配置文件格式为 "),s("strong",[t._v(".properties")]),t._v(" 文件也行。")]),t._v(" "),s("h2",{attrs:{id:"_4-config-server-和-git-远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-config-server-和-git-远程仓库"}},[t._v("#")]),t._v(" 4. Config Server 和 Git 远程仓库")]),t._v(" "),s("p",[t._v("现在扮演 "),s("strong",[t._v("Config Server")]),t._v(" 角色的 spring-boot 项目就要负责连接到 Git 中央仓库，并从中下载所有子项目的配置项。")]),t._v(" "),s("p",[t._v("因此，显而易见，Config Server 要配置连接 Git 中央仓库的一些必要属性：")]),t._v(" "),s("p",[t._v("编写 "),s("code",[t._v("application.yml")]),t._v(" 配置文件，并写入如下内容：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3301")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("server")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("git")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" https"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//gitee.com/woniuwh/woniu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config.git\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("username")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" woniuwh\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("password")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 123456abc\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("default-label")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" master\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("search-paths")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" config\n")])])]),s("p",[t._v("上面的配置所表达的意思是： 以 "),s("code",[t._v("<username>")]),t._v(" 和 "),s("code",[t._v("<password>")]),t._v(" 登录到 Git 仓库，，从 "),s("code",[t._v("<uri>")]),t._v(" 下载一个 Git 版本库。并且，从它的 "),s("code",[t._v("<default-label>")]),t._v(" 分支下的 "),s("code",[t._v("<search-paths>")]),t._v(" 目录下找配置文件，并加载它们所记录的配置项。")]),t._v(" "),s("p",[t._v("这里需要说明 2 点：")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("default-label")]),t._v(" 配置的作用")]),t._v(" "),s("p",[t._v("由于 Git 仓库是有『"),s("strong",[t._v("分支")]),t._v("』的概念，因此，逻辑上 xxx 文件在 Git 仓库中是可能有多份的。所以，这里要指定分支。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("search-paths")]),t._v(" 配置的作用")]),t._v(" "),s("p",[t._v("Config Server 不强求这个 Git 仓库是专用于它的，也就是说，Git 仓库中可以有其它的、和 Config Server 功能不相关的其它文件夹和文件。因此，你要明确指出 Git 仓库中的哪个文件夹是用于 Config Server 的。")])])]),t._v(" "),s("p",[t._v("在 Config Server 项目的启动类上加入 "),s("strong",[t._v("@EnableConfigServer")]),t._v(" 注解，标识本项目的『"),s("strong",[t._v("身份")]),t._v("』是 Config Server，并激活相关配置 。")]),t._v(" "),s("p",[t._v("现在以特定规则的 URI 访问 Config Server 项目，可以看到它从 Git 中央仓库拉下来的各个子系统的配置项：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("/<子系统-application-name>/<profile-name>[/{分支-name}]\n")])])]),s("p",[t._v("其中 "),s("strong",[t._v("分支-name")]),t._v(" 不是必须的，默认是 "),s("strong",[t._v("master")]),t._v(" 分支。")]),t._v(" "),s("p",[t._v("例如：")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("http://127.0.0.1:3301/xxx-service/dev\n")])])]),s("p",[t._v("这意味着你要向 Config Server 查看 "),s("strong",[t._v("config-single-client")]),t._v(" 子系统的 "),s("strong",[t._v("dev")]),t._v(" 环境的配置。")]),t._v(" "),s("p",[t._v("在 "),s("strong",[t._v("propertySources")]),t._v(" > "),s("strong",[t._v("source")]),t._v(" 下就是对应的配置文件的内容。")]),t._v(" "),s("blockquote",[s("p",[t._v("实际上除了上述规则，URL 还可以使用如下规则：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/{application}-{profile}.yml\n/{application}-{profile}.properties\n/{label}/{application}-{profile}.yml\n/{label}/{application}-{profile}.properties\n")])])])]),t._v(" "),s("h2",{attrs:{id:"_5-访问-git-config-server-的-config-client"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-访问-git-config-server-的-config-client"}},[t._v("#")]),t._v(" 5. 访问 Git Config Server 的 Config Client")]),t._v(" "),s("p",[t._v("Config Client 是要去『"),s("strong",[t._v("连接")]),t._v("』Config Server，从中去取属于 Config Client 自己的配置项。")]),t._v(" "),s("p",[t._v("与连接相关的配置，必须要写在 Config Client 的 "),s("strong",[t._v("bootstrap")]),t._v(" 配置文件中。")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("single"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("client\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//127.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3301")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("label")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" master\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("profile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dev\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("/<子系统-application-name>/<profile-name>[/{分支-name}]\n")])])]),s("p",[t._v("毫无疑问，它所取到的配置，就是 "),s("a",{attrs:{href:"http://127.0.0.1:3301/config-single-client/dev/master",target:"_blank",rel:"noopener noreferrer"}},[s("em",[t._v("http://127.0.0.1:3301/config-single-client/dev/master")]),s("OutboundLink")],1),t._v(" 中所记录的。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("另外，Config Client 可以将 "),s("strong",[t._v("bootstrap.yml")]),t._v(" 写成如下形式，方便未来切换配置：")]),t._v(" "),s("blockquote",[s("p",[t._v("在 yml 文件中，以 "),s("strong",[t._v("---")]),t._v(" 作为配置段的开始的标识。")])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("profiles")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("active")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dev\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("---")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("profiles")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" prod\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("single"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("client\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//127.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3301")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("label")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" master\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("profile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" prod\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("---")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("profiles")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dev\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("single"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("client\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//127.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3301")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("label")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" master\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("profile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dev\n")])])]),s("p",[t._v("在 Config Client 中可以通过属性注入来验证是否获取到了配置项的值。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${spring.datasource.driver-class-name}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" driverClassName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("hr"),t._v(" "),s("p",[t._v("另外，你还可以在 "),s("strong",[t._v("application.yml")]),t._v(" 的配置文件中编写同名配置，这样，当 Config Client 无法访问 Config Server 时，就会以 "),s("strong",[t._v("application.yml")]),t._v(" 中的配置项的值为准。")]),t._v(" "),s("h2",{attrs:{id:"_6-刷新配置-了解、自学"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-刷新配置-了解、自学"}},[t._v("#")]),t._v(" 6. 刷新配置（了解、自学）")]),t._v(" "),s("p",[t._v("Spring Cloud Config 在项目启动时加载配置内容这一机制，导致了它存在一个缺陷：修改配置文件内容后，不会自动刷新。")]),t._v(" "),s("p",[t._v("例如我们上面的项目，当服务已经启动的时候，去修改 gitee 上的配置文件内容，这时候，再次刷新页面，对不起，还是旧的配置内容，新内容不会主动刷新过来。")]),t._v(" "),s("p",[t._v("但是，总不能每次修改了配置后重启服务吧。因此 Spring Config 提供了一个刷新机制，但是需要我们主动触发。那就是 "),s("strong",[t._v("@RefreshScope")]),t._v(" 注解并结合 "),s("em",[t._v("spring-boot-actuator")]),t._v(" 。")]),t._v(" "),s("ol",[s("li",[t._v("在 config client 端配置中增加 actuator 配置。")])]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-actuator"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("application.properties")]),t._v(" "),s("div",{staticClass:"language-properties extra-class"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("management.endpoints.web.exposure.include")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[t._v("*")]),t._v("\n")])])]),s("p",[t._v("这里开放了 config client 端的 actuator 的所有端点/功能，不过实际上我们要用到的仅仅是 "),s("em",[t._v("/actuator/refresh")]),t._v(" 。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("在 config client 端的类上增加 "),s("strong",[t._v("@RefreshScope")]),t._v(" 注解，我们是 controller 中使用配置，所以加在 controller 中。")])]),t._v(" "),s("p",[t._v("再次说明，以上都是在 config client 端做的修改。与 config server 无关。")]),t._v(" "),s("p",[t._v("之后，重启 client 端，重启后，我们修改 gitee 上的配置文件内容，并提交更改，"),s("strong",[t._v("再次刷新页面，没有反应")]),t._v(" 。")]),t._v(" "),s("p",[t._v("接下来，我们发送 "),s("strong",[t._v("POST")]),t._v(" 请求到 "),s("code",[t._v("http://localhost:3302/actuator/refresh")]),t._v(" 这个接口。"),s("small",[t._v("用 postman 之类的工具即可")]),t._v("。")]),t._v(" "),s("p",[t._v("此接口就是用来触发加载新配置的，返回内容如下:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"config.client.version"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<变动过的配置项名>"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h2",{attrs:{id:"_7-结合-eureka-使用-spring-cloud-config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-结合-eureka-使用-spring-cloud-config"}},[t._v("#")]),t._v(" 7. 结合 Eureka 使用 Spring Cloud Config")]),t._v(" "),s("p",[t._v("我们可以将 Config Server 注册到 Eureka Server 注册中心，这样，各个 Config Client 就可以自己去 注册中心『"),s("strong",[t._v("获取")]),t._v("』到 Config Server 的访问方式，而不用它们自己去记忆、配置。")]),t._v(" "),s("p",[t._v("注意，这里有两种关系：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Eureka Server 和 Eureka Client；")])]),t._v(" "),s("li",[s("p",[t._v("Config Server 和 Config Client。")])])]),t._v(" "),s("p",[t._v("Config Server 在 Eureka 关系中是 Eureka Client 。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Config Server")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("添加 Eurek Client 依赖；")])]),t._v(" "),s("li",[s("p",[t._v("添加连接到 Eureka Server 的配置；")])]),t._v(" "),s("li",[s("p",[t._v("留意 Config Server 的 application name，未来，Config Client 就是通过这个 name 来获取 Config Server 的访问方式。")])])])]),t._v(" "),s("li",[s("p",[t._v("Config Client")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("添加 Eurek Client 依赖;")])]),t._v(" "),s("li",[s("p",[t._v("添加连接到 Eureka Server 的配置；")])]),t._v(" "),s("li",[s("p",[t._v("注意，这里使用的是 "),s("strong",[t._v("@EnableDiscoveryClient")]),t._v(" 注解，不是 "),s("em",[t._v("@EnableEurekaClient")]),t._v(" 。"),s("small",[t._v("它们两者的功能是独立的，不冲突。")])])]),t._v(" "),s("li",[s("p",[t._v("用新的配置项替换到 "),s("strong",[t._v("spring.cloud.config.uri")]),t._v(" 配置项：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("discovery")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("enabled")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("service-id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" git"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server\n")])])])])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);