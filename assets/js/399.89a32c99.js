(window.webpackJsonp=window.webpackJsonp||[]).push([[399],{765:function(v,_,t){"use strict";t.r(_);var i=t(47),l=Object(i.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[t("span",{staticClass:"title"},[v._v("Spring Statemachine")])]),v._v(" "),t("h2",{attrs:{id:"有限状态机概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有限状态机概念"}},[v._v("#")]),v._v(" 有限状态机概念")]),v._v(" "),t("p",[v._v("有限状态机简称状态机，它表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。")]),v._v(" "),t("p",[v._v("通俗的描述状态机就是定义了一套状态変更的流程：状态机包含一个状态集合，定义当状态机处于某一个状态的时候它所能接收的事件以及可执行的行为，执行完成后，状态机所处的状态。")]),v._v(" "),t("p",[v._v("状态机会包含以下几个重要的元素：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("State：状态")]),v._v(" "),t("ul",[t("li",[v._v("一个标准的状态机最少包含两个状态：初始和终态。")]),v._v(" "),t("li",[v._v("初态是状态机初始化后所处的状态，而终态顾名思义就是状态机结束时所处的状态。")]),v._v(" "),t("li",[v._v("其他的状态都是一些流转中停留的状态。")])])]),v._v(" "),t("li",[t("p",[v._v("Event：事件")]),v._v(" "),t("ul",[t("li",[v._v("还有中描述叫 Trigger，就是要执行某个操作的触发器或口令")]),v._v(" "),t("li",[v._v("当状态机处于某个状态时，只有外界告诉状态机要干什么事情的时候，状态机才会去执行具体的行为，来完成外界想要它完成的操作。")])])]),v._v(" "),t("li",[t("p",[v._v("Action：行为")]),v._v(" "),t("ul",[t("li",[v._v("状态变更索要执行的具体行为。")])])]),v._v(" "),t("li",[t("p",[v._v("Transition：变更")]),v._v(" "),t("ul",[t("li",[v._v("一个状态接收一个事件执行了某些行为到达了另外一个状态的过程就是一个Transition。")]),v._v(" "),t("li",[v._v("定义Transition就是在定义状态机的运转流程。")])])])]),v._v(" "),t("p",[v._v("状态机主要的应用场景就是流程控制：")]),v._v(" "),t("ul",[t("li",[v._v("一个状态机定义以后，在某个状态下就只接收固定的Event，也就是执行指定的操作")]),v._v(" "),t("li",[v._v("一个很典型的应用就是工作流引擎")])]),v._v(" "),t("h2",{attrs:{id:"目标状态机功能介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目标状态机功能介绍"}},[v._v("#")]),v._v(" 目标状态机功能介绍")]),v._v(" "),t("p",[v._v("状态机的定义：通过定义 State，Event，Action，Transition 来实现状态机的流转，摒弃标准状态机中那些较复杂的概念（通过其他方式来实现所谓的较复杂的操作）")]),v._v(" "),t("ul",[t("li",[v._v("状态持久化：数据持久化到数据库，实现状态机的中断重启")]),v._v(" "),t("li",[v._v("上下文保存与传递：提供一套流程流转过程中参数的传递机制")]),v._v(" "),t("li",[v._v("并发控制：提供不同状态机隔离，同一状态机单实例运行机制")]),v._v(" "),t("li",[v._v("功能增强：接口或注解的形式实现自触发，重试，定时执行")])]),v._v(" "),t("h1",{attrs:{id:"squirrel-foundation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#squirrel-foundation"}},[v._v("#")]),v._v(" squirrel-foundation")]),v._v(" "),t("p",[v._v("squirrel-foundation 是一款轻量级的java有限状态机。既支持流式API又支持声明式创建状态机，允许用户以一种简单方式定义操作方法。")]),v._v(" "),t("p",[v._v("简单操作介绍")]),v._v(" "),t("ul",[t("li",[v._v("machine（T） 代表实现的状态机类型。")]),v._v(" "),t("li",[v._v("state（S） 代表实现的状态类型。")]),v._v(" "),t("li",[v._v("event（E） 代表实现的事件类型。")]),v._v(" "),t("li",[v._v("context（C） 代表实现的外部上下文类型。")])]),v._v(" "),t("p",[v._v("『未完待续 ... 』")])])}),[],!1,null,null,null);_.default=l.exports}}]);