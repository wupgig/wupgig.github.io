(window.webpackJsonp=window.webpackJsonp||[]).push([[324],{692:function(t,s,a){"use strict";a.r(s);var e=a(47),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"userdetailsservice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#userdetailsservice"}},[t._v("#")]),t._v(" UserDetailsService")]),t._v(" "),a("h2",{attrs:{id:"_1-基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本概念"}},[t._v("#")]),t._v(" 1. 基本概念")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("AuthenticationManager，类似于 Shiro 中的 SecurityManager 。")]),t._v(" "),a("p",[t._v("它是『表面上』的做认证和鉴权比对工作的那个人，它是认证和鉴权比对工作的起点。ProvierderManager 是 AuthenticationManager 的具体实现。")])]),t._v(" "),a("li",[a("p",[t._v("AuthenticationProvider，类似于 Shiro 中的 Authenticator 和 Authorizer")]),t._v(" "),a("p",[t._v("它是『实际上』的做认证和鉴权比对工作的那个人。从命名上很容易看出，Provider 受 ProviderManager 的管理，ProviderManager 调用 Provider 进行认证和鉴权的比对工作。我们最常用到 DaoAuthenticationProvider 是 AuthenticationProvider 的具体实现。")])]),t._v(" "),a("li",[a("p",[t._v("UserDetailService，类似于 Shiro 中的 Realm 。")]),t._v(" "),a("p",[t._v("虽然 AuthenticationProvider 负责进行用户名和密码的比对工作，但是它并不清楚用户名和密码的『标准答案』，而标准答案则是由 UserDetailService 来提供。简单来说，"),a("strong",[t._v("UserDetailService 负责提供标准答案")]),t._v("，以供 AuthenticationProvider 使用。")])]),t._v(" "),a("li",[a("p",[t._v("UserDetails，类似于 Shiro 中的 AuthenticationInfo + AuthorizationInfo")]),t._v(" "),a("p",[t._v("UserDetails 它是存放用户认证信息和权限信息的标准答案的『容器』，它也是 UserDetailService『应该』返回的内容。和 Shiro 不同的是，Shiro 中是把认证和权限信息分开放的，而 UserDetails 则是『塞』到了一起。")])]),t._v(" "),a("li",[a("p",[t._v("PasswordEncoder，类似于 Shiro 中的 CredentialsMatcher 。")]),t._v(" "),a("p",[t._v("Spring Security 要求密码不能是明文，必须经过加密器加密。这样，AuthenticationProvider 在做比对时，就必须知道『当初』密码时使用哪种加密器加密的。所以，AuthenticationProvider 除了要向 UserDetailsService 『要』用户名密码的标准答案之外，它还需要知道配套的加密算法"),a("small",[t._v("（加密器）")]),t._v("是什么。")])])]),t._v(" "),a("p",[t._v("AuthenticationProvider 和它们两个的关系如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-security/img/spring-boot-security-AuthenticationProvider-01.png",alt:"AuthenticationProvider"}})]),t._v(" "),a("h2",{attrs:{id:"_2-userdetailsservice-和-userdetails"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-userdetailsservice-和-userdetails"}},[t._v("#")]),t._v(" 2. UserDetailsService 和 UserDetails")]),t._v(" "),a("p",[t._v("之前有提到过，UserDetailsService 类似于 Shiro 中的 Realm，负责提供用户信息的『标准答案』，供 AuthenticationProvider 来比对。")]),t._v(" "),a("p",[t._v("Spring Security 提供了 2 个 UserDetailsService 的实现类："),a("strong",[t._v("InMemoryUserDetailsManager")]),t._v(" 和 "),a("strong",[t._v("JdbcDaoImpl")]),t._v(" 。不过，通常我们并不会使用到它俩。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("这是非常操蛋的第一点：从名字上，你根本看不出 "),a("strong",[t._v("InMemoryUserDetailsManager")]),t._v(" 和 "),a("strong",[t._v("JdbcDaoImpl")]),t._v(" 是 UserDetailsService 的实现类。")])]),t._v(" "),a("p",[t._v("如果说 UserDetailsService 的职责类似于 Shiro 中的 Realm，那么 UserDetails 的职责就是 Shiro 中的 AuthenticationInfo + AuthorizationInfo 。")]),t._v(" "),a("p",[t._v("Spring Security 要求 UserDetailsService 将用户信息的『标准答案』必须封装到一个 "),a("strong",[t._v("UserDetails")]),t._v(" 对象中，返回给 AuthenticationProvider 使用"),a("small",[t._v("（做比对工作）")]),t._v("。")]),t._v(" "),a("p",[t._v("我们可以直接使用 Spring Security 内置的 UserDetails 的实现类："),a("strong",[t._v("User")]),t._v(" 。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDetailsServiceImpl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDetailsService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDetails")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadUserByUsername")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UsernameNotFoundException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模拟注册时的加密效果。")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" password "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NoOpPasswordEncoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 硬编码用户名、密码、角色权限信息。现实工作中并非如此。")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthorityUtils")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commaSeparatedStringToAuthorityList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ADMIN"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  这里 admin 的大小写有区别")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("AuthenticationProvider 在向 UserDetailsService『询问』某人的认证与授权信息的标准答案时，会将他的『"),a("strong",[t._v("用户名")]),t._v("』传入 UserDetailsService 的 "),a("code",[t._v("loadUserByUsername()")]),t._v(" 方法中"),a("small",[t._v("（作为参数）")]),t._v("。")]),t._v(" "),a("p",[t._v("UserDetails 中封装了用户登录过程中所需的全部信息：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("isAccountNonExpired")]),t._v(" "),a("br"),t._v(" "),a("strong",[t._v("isAccountNonLocked")]),t._v(" "),a("br"),t._v(" "),a("strong",[t._v("isCredentialsNonExpired")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("暂时用不到，统一返回 "),a("code",[t._v("true")]),t._v(" ，否则 Spring Security 会认为账号异常。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("isEnabled")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("逻辑上用来表示当前用户是否可用。"),a("br"),t._v("可用来实现 "),a("strong",[t._v("冻结账户")]),t._v(" 功能。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("getPassword")]),t._v(" "),a("br"),t._v(" "),a("strong",[t._v("getUsername")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("需要返回的内容显而易见。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("getAuthorities")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("用于返回用户的权限信息。这里的权限就这是指用户的角色。它的返回值类型是 "),a("strong",[t._v("Collection<? extends GrantedAuthority>")]),t._v("，具体形式通常是："),a("strong",[t._v("List<GrantedAuthority>")]),t._v("，里面用来存储角色信息"),a("small",[t._v("（或权限信息）")])])])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthorityUtils")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("commaSeparatedStringToAuthorityList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ROLE_ADMIN"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("SimpleGrantedAuthority")]),t._v(" 是 GrantedAuthority 的一个实现类，也是最常见最常用的和实现类。如果直接使用的话那就是 "),a("code",[t._v('new SimpleGrantedAuthority("ROLE_USER")')]),t._v(" 。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("另外需要注意的一点是，在一套配置中如果你存在多个 UserDetailsService 的 Spring Bean将会影响 DaoAuthenticationProvider 的注入和使用，从而导致出现 "),a("code",[t._v("No Provider ...")]),t._v(" 的异常。")])]),t._v(" "),a("h2",{attrs:{id:"_3-spring-security-和-rbac"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-spring-security-和-rbac"}},[t._v("#")]),t._v(" 3. Spring Security 和 RBAC")]),t._v(" "),a("p",[t._v("和『Shiro 一开始就奔着 RBAC 模型去』不同，考虑到一部分"),a("small",[t._v("（大部分？）")]),t._v("项目都用不到 RBAC 这么复杂的权限控制模型，Spring Security 的鉴权没有细化到 RBAC 三级结构。")]),t._v(" "),a("p",[t._v("简单来说，默认情况下，Shiro 中的权限体现出 "),a("code",[t._v("User - Role - Permission")]),t._v(" 三级结构；而默认情况下，Spring Security 的权限只有两级，只体现在 "),a("code",[t._v("User - Authority")]),t._v("。")]),t._v(" "),a("p",[t._v("在使用中，你"),a("small",[t._v("（程序员）")]),t._v("可以将 "),a("strong",[t._v("Authority")]),t._v(" 等价为 Role，也可以等价为 Permission 。")]),t._v(" "),a("p",[t._v("另外，Spring Security 有个重要的『人为约定』：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果你的 Authority 指的是角色，那么角色字符串就需要以 "),a("code",[t._v("ROLE_")]),t._v(" 开头；")])]),t._v(" "),a("li",[a("p",[t._v("如果你的 Authority 指的是权限，那么权限字符串则不需要特定的开头。")])])]),t._v(" "),a("p",[t._v("在后续很多涉及『角色』的地方，Spring Security 都会对 "),a("code",[t._v("ROLE_")]),t._v(" 做额外处理。")]),t._v(" "),a("h2",{attrs:{id:"_4-配置使用自定义-userdetailsservice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-配置使用自定义-userdetailsservice"}},[t._v("#")]),t._v(" 4. 配置使用自定义 UserDetailsService")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Slf4j")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Configuration")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SuppressWarnings")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deprecation"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SecurityConfig")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSecurityConfigurerAdapter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 依赖注入")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyUserDetailsService")]),t._v(" userDetailsService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Bean")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PasswordEncoder")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("passwordEncoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NoOpPasswordEncoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("configure")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthenticationManagerBuilder")]),t._v(" auth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这一步和 Shiro 中的 Realm 和 CredentialsMatcher 的绑定很像，让两者关联。")]),t._v("\n        auth\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配置 UserDetailService")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("userDetailsService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("userDetailsService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配置 PasswordEncoder")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("passwordEncoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("passwordEncoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_5-最后的说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-最后的说明"}},[t._v("#")]),t._v(" 5. 最后的说明")]),t._v(" "),a("p",[t._v("这里有 2 点需要说明：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("截至目前为止，我们暂时只涉及到了『认证』，还没有涉及到『鉴权』。")])]),t._v(" "),a("li",[a("p",[t._v("截至目前为止，我们还有一些配置没有自定义，仍然使用的是默认配置。")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);