(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{380:function(t,a,s){"use strict";s.r(a);var n=s(47),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"通过-jquery-发起-ajax-请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过-jquery-发起-ajax-请求"}},[t._v("#")]),t._v(" 通过 JQuery 发起 AJAX 请求")]),t._v(" "),s("h2",{attrs:{id:"_1-使用-jquery-实现-ajax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用-jquery-实现-ajax"}},[t._v("#")]),t._v(" 1. 使用 jQuery 实现 AJAX")]),t._v(" "),s("p",[t._v("在 JavaScript 中直接使用 "),s("strong",[t._v("XMLHttpRequest")]),t._v(" 类实现 Ajax 技术仍显得十分繁琐，而 jQuery 吸引人的原因之一就是它提供了大量关于 Ajax 的工具方法。")]),t._v(" "),s("p",[t._v("由于各种浏览器对 "),s("strong",[t._v("XMLHttpRequest")]),t._v(" 对象的实现有些不同，所以要通过 JavaScript 来实现原生的 AJAX 功能需要编写大量的平台相关的判断处理代码来处理同一份代码的跨平台问题。这大大降低了开发效率和出错概率。而现今通用的解决方案是使用 jQuery 库来实现 AJAX 功能。jQuery 库封装了各个平台的 AJAX 功能，对外提供了统一的接口。")]),t._v(" "),s("h3",{attrs:{id:"常见的四个工具方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的四个工具方法"}},[t._v("#")]),t._v(" 常见的四个工具方法")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("param")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象转请求参数字符串（query-string）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#form_id'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("serialize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表单数据转请求参数字符串")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象转 json 格式字符串（json-string）")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("json_str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// json 格式字符串转对象")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[s("strong",[t._v("query-string")]),s("small",[t._v("（请求参数字符串）")]),t._v("格式更常见，配合 content-type:appliction/x-www-form-urlencoded 使用。其格式形如：")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("name=tom&amp;age=20&amp;email=123456@qq.com\n")])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("json-string")]),t._v(" 格式较少见一些，通常是有些在 AJAX 请求中会见到，配合 content-type:application/json 使用。其格式形如：")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tom, "')]),t._v("age"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('":20, "')]),t._v("email"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('": "')]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123456")]),t._v('@qq.com"'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"核心方法-ajax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心方法-ajax"}},[t._v("#")]),t._v(" 核心方法：$.ajax()")]),t._v(" "),s("p",[s("strong",[t._v("$.ajax()")]),t._v(" 方法是 jQuery 最底层的 AJAX 实现，也就是说 jQuery 的其他 AJAX 方法（例如："),s("strong",[t._v("$.get()")]),t._v(" 和 "),s("strong",[t._v("$.post()")]),t._v("）都是基于此方法实现的。使用的语法如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("$.ajax(options)\n")])])]),s("p",[t._v("该方法只有一个参数，但这个参数包含了 "),s("strong",[t._v("$.ajax()")]),t._v(" 方法所需要的请求设置以及回调函数等信息，参数以 key-value 的形式存在，所有参数都是 "),s("strong",[t._v("可选的")]),t._v(" 。")]),t._v(" "),s("p",[t._v("$.ajax() 参数很多，其中最常见的有：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("参数名称")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("参数类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("参数说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("url")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("默认值当前页地址，发送请求的地址")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("type")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("默认值为 "),s("strong",[t._v("get")]),t._v("，表示请求方式。除了 "),s("strong",[t._v("post")]),t._v(" 外，还支持 "),s("strong",[t._v("put")]),t._v(" 和 "),s("strong",[t._v("delete")]),s("small",[t._v("（依赖于浏览器）")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("contentType")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("默认值为 "),s("code",[t._v("application/x-www-form-urlencode")]),t._v("。这个属性表示发送给服务器的内容的编码类型。默认值适用大多数情况。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("data")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("string 或"),s("br"),t._v("对象")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("发送到服务器的请求参数。本质上 "),s("code",[t._v("$.ajax()")]),t._v(" 需要的是字符串，如果你传入的是 Object，jQuery 会将它自动转换成 Query String 格式（"),s("small",[s("code",[t._v("?aaa=bbb&ccc=ddd")]),t._v(" 形式")]),t._v("）。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("dataType")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("预期服务器返回的数据类型。如果不指定，jQuery 会根据 HTTP 中的 MIME 信息进行推测。常见有："),s("code",[t._v("xml")]),t._v("、"),s("code",[t._v("html")]),t._v("、"),s("code",[t._v("json")]),t._v("、"),s("code",[t._v("Text")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("success")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("function")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("请求成功"),s("small",[t._v("（响应状态码为 200）")]),t._v("后调用此函数。参数是由服务器返回的数据（具体数据类型与 dataType 有关）；描述状态的字符串")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("async")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("默认 "),s("strong",[t._v("true")]),t._v("，表示异步请求。"),s("br"),t._v("设置为 false 则表示使用同步方式发起请求。")])])])]),t._v(" "),s("p",[t._v("$.ajax() 方法『"),s("strong",[t._v("有且仅有 2 种")]),t._v("』标准使用形式：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("标准使用形式一（"),s("small",[t._v("Query String")]),t._v("）")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  url"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请求路径'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get or post"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  contentType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/x-www-form-urlencoded'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n  data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Query String 形式的请求参数字符串'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("success")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("result")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上述形式，有一种简写形式：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  url"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请求路径'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get or post"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 对象"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("success")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("result")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这里 $.ajax 方法帮我们简化了 2 处地方：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("省略了 "),s("strong",[t._v("contentType")]),t._v("，缺省时，它的默认值就是 "),s("strong",[t._v("application/x-www-form-urlencoded")])])]),t._v(" "),s("li",[s("p",[t._v("data 属性本来需要一个 Query String，我们传的是一个对象。$.ajax 方法内部会自己调用 $.param 方法将对象转换为 Query String 。")])])])]),t._v(" "),s("li",[s("p",[t._v("标准使用形式二（"),s("small",[t._v("JSON String")]),t._v("）")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  url"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请求路径'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"post"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  contentType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/json'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n  data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'JSON String 形式的请求参数字符串'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("success")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("result")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),s("p",[t._v("除此之外，"),s("code",[t._v("$.ajax()")]),t._v(" 方法，还可以设定 "),s("strong",[t._v("beforeSend")]),s("small",[t._v("（提交前回调）")]),t._v("、"),s("strong",[t._v("error")]),s("small",[t._v("（请求失败后回调）")]),t._v("、"),s("strong",[t._v("success")]),s("small",[t._v("（请求成功返回后回调）")]),t._v("以及 "),s("strong",[t._v("complete")]),s("small",[t._v("（请求完成回调，无论成功失败后 ）")]),t._v("回调函数。")]),t._v(" "),s("p",[t._v("其他参数：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("参数名称")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("参数类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("参数说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("beforeSend(XHR)")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("function")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("发送前回调函数。可以修改 xmlHttpRequest 对象。"),s("br"),t._v("如果返回false，则可以取消本次请求。"),s("br"),t._v(" XMLHttpRequest 对象是该方法唯一参数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("context")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("object")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("用于设置 AJAX 回调函数的上下文。也就是说，让回调函数内的 this 指向这个对象。"),s("br"),t._v("如果没有设置它，那么回调函数中的 this 指向的是本次 AJAX 请求时传递的 options 参数。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("error")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("function")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("失败时调用此函数"),s("br"),t._v("有三个参数：XMLHttpRequest对象、错误信息、可选的异常对象"),s("br")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("complete(XHR, TS)")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("function")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("请求完成后调用此函数（成功或失败都调用）。参数：：XMLHttpRequest对象 和 一个描述请求类型的字符串")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("timeout")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("number")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("设置请求超时时间（毫秒）")])])])]),t._v(" "),s("h3",{attrs:{id:"get-方法-和-post-方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-方法-和-post-方法"}},[t._v("#")]),t._v(" $.get() 方法 和 $.post() 方法")]),t._v(" "),s("p",[s("strong",[t._v("$.get()")]),t._v(" 和 "),s("strong",[t._v("$.post()")]),t._v(" 方法是对 $.ajax() 方法的包装，专门用于发送 GET 请求和 POST 请求。")]),t._v(" "),s("p",[t._v("具体细节略。"),s("small",[t._v("我个人还是比较偏好 "),s("strong",[t._v("$.ajax()")]),t._v(" 方法。")])]),t._v(" "),s("h2",{attrs:{id:"_2-一个常见的碰巧能对的错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-一个常见的碰巧能对的错误"}},[t._v("#")]),t._v(" 2. 一个常见的碰巧能对的错误")]),t._v(" "),s("p",[t._v("有初学者会将 AJAX 请求和 JSON 划上等号，认为从 JS 代码中向后台传送一个 JS 对象就是发出了 AJAX 请求，或者认为，发送 JS 对象是 AJAX 请求中最核心、最关键的一步。")]),t._v(" "),s("p",[t._v("基于上述"),s("small",[t._v("（错误的）")]),t._v("思路，他们会写出如下代码：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  url"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'...'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"post"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  dataType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'json'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("success")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("result")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("并且，由于上述代码是对的！通过上述代码，你确实是向后台发出了 AJAX 请求，因此，他们反过来越发认为自己的『思路』是完全正确的。")]),t._v(" "),s("p",[s("small",[t._v("无论你清楚，还是不清楚：有意，还是无意，")]),t._v("上述代码实际上省略了一些东西，在省略了这些东西的情况下，$.ajax 方法会启用默认值。")]),t._v(" "),s("p",[t._v("如果将上述代码省略掉的部分不全，它的完整形式如下：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  url"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'...'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"post"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  contentType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/x-www-form-urlencoded'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n  data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("param")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  dataType"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'json'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("success")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("result")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上述代码向后台发出了 AJAX 请求，请求参数是 Query String 形式，而非初学者『心里以为』的 JSON 。")]),t._v(" "),s("p",[t._v("引起初学者误解的原因在于 2 个参数："),s("strong",[t._v("data")]),t._v(" 和 "),s("strong",[t._v("dataType")]),t._v(" 。")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("data")]),t._v(" 属性：")]),t._v(" "),s("p",[t._v("$.ajax 方法的 data 属性需要的本质上是字符串！字符串！字符串！不是对象！不是对象！不是对象！")]),t._v(" "),s("p",[t._v("只不过，$.ajax 方法考虑到你的懒惰，决定帮你『转换』一下：将你传入的对象转换为 Query String 格式字符串，即，$.param 方法的逻辑。")]),t._v(" "),s("p",[t._v("只不过，初学者压根不知道 $.ajax 帮了我们一把，更不知道 $.ajax 方法帮我们把对象转换成了啥格式。就误以为 $.ajax 能向后台传个 JS 对象。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("dataType")]),t._v(" 属性：")]),t._v(" "),s("p",[s("strong",[t._v("dataType")]),t._v(" 属性和 "),s("strong",[t._v("data")]),t._v(" 属性长得很像，常常『"),s("strong",[t._v("被误解用于")]),t._v("』表明 "),s("strong",[t._v("data")]),t._v(" 属性的值的类型，再加上初学者满脑子都是『通过 data 属性向后台传 JS 对象』，所以，看见 "),s("strong",[t._v("dataType")]),t._v(" 属性的值是 "),s("strong",[t._v("json")]),t._v(" 时就特别亲切。"),s("small",[t._v("傻得可爱")])]),t._v(" "),s("p",[s("strong",[t._v("dateType")]),t._v(" 是你预期的服务器返回的数据格式/类型。理论上，它应该和服务器的响应的 content-type 是一致的。在 AJAX 请求中，它通常就是 "),s("code",[t._v("json")]),t._v(" 。")]),t._v(" "),s("p",[t._v("为它赋值为 "),s("code",[t._v("json")]),t._v(" 的作用是让 、$.ajax 方法『帮』我们后台响应给我们的 JSON 格式字符串转换为 JS 对象，方便你后续在 success 方法中操作。")]),t._v(" "),s("p",[s("strong",[t._v("dataType")]),t._v(" 属性是和 AJAX 响应有关的属性，和请求过程无关！")]),t._v(" "),s("p",[t._v("另外，基于同样的思路，有人本来能『瞎猫碰死耗子』似得碰巧发出 AJAX 请求，但是基于同样的错误的思路，将 dataType 属性值赋值为 application/json，这样，就彻底不对了：$.ajax 方法总是进入 error 部分，无论如何，都不会走 success 。")])])]),t._v(" "),s("h2",{attrs:{id:"_3-ajax-方法的-error-参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-ajax-方法的-error-参数"}},[t._v("#")]),t._v(" 3. ajax 方法的 error 参数")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("提前说明，在有的 API 设计方案中，永远都不会进入 error 。所以，.ajax() 方法的 error fanction 总不会执行。")])]),t._v(" "),s("p",[t._v("当 http 响应的状态码不是 "),s("strong",[t._v("200")]),t._v(" 的时候，就会执行 "),s("code",[t._v("error function")]),t._v(" 。")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("一个常见的 Bug 是 "),s("strong",[t._v("data")]),t._v(" 属性值本应是 "),s("strong",[s("code",[t._v("json")])]),t._v("，但是不小心错写成 "),s("strong",[s("code",[t._v("applicaiton/json")])]),t._v(" 。初学者大多都会误用 data 属性。")]),t._v(" "),s("p",[t._v("这种情况下，ajax 方法"),s("strong",[t._v("总是会")]),t._v("进入 error 部分。因为你的预期的返回的数据类型（"),s("em",[s("code",[t._v("application/json")])]),t._v("）与实际类型（"),s("em",[s("code",[t._v("json")])]),t._v("）并不一致，也算是 error 。")])]),t._v(" "),s("p",[t._v("一般 error 函数返回的参数有三个："),s("code",[t._v("function(XMLHttpRequest, textStatus, errorThrown)")]),t._v("。我们关注的是第一个 "),s("code",[t._v("XMLHttpRequest")]),t._v(" 。")]),t._v(" "),s("p",[t._v("从第一个参数 "),s("code",[t._v("XMLHttpRequest")]),t._v(" 中我们可以获得服务端返回的错误相关的信息：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("XMLHttpRequest.status")])]),t._v(" "),s("p",[t._v("返回的 HTTP 状态码，例如 "),s("code",[t._v("404")]),t._v("、"),s("code",[t._v("500")]),t._v(" 等错误代码。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("XMLHttpRequest.statusText")])]),t._v(" "),s("p",[t._v("对应状态码的错误信息。比如 "),s("code",[t._v("404")]),t._v(" 错误信息是 "),s("code",[t._v("not found")]),t._v("；"),s("code",[t._v("500")]),t._v(" 是 "),s("code",[t._v("Internal Server Error")]),t._v(" 。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("XMLHttpRequest.responseText")])]),t._v(" "),s("p",[t._v("服务器响应返回的文本信息，即，Response 的 body 的内容。")])])]),t._v(" "),s("p",[t._v("『完』")])])}),[],!1,null,null,null);a.default=e.exports}}]);