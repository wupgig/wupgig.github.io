(window.webpackJsonp=window.webpackJsonp||[]).push([[297],{665:function(t,s,a){"use strict";a.r(s);var n=a(47),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"repository-构建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#repository-构建"}},[t._v("#")]),t._v(" Repository 构建")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("提前声明")]),t._v(" "),a("p",[t._v("如果要在 JUnit 中测试 Repository，记得使用 "),a("strong",[t._v("@Transactionl")]),t._v(" 注解。否则会报错：no session 。")])]),t._v(" "),a("p",[t._v("自定义的 "),a("strong",[t._v("Repository")]),t._v(" 只要继承 "),a("strong",[t._v("JpaRepository")]),t._v(" 即可，就会帮我们自动生成很多内置方法。这是 spring-data-jpa 为我们带来的便利！")]),t._v(" "),a("p",[t._v("父接口 JpaRepository 要求传入两个泛型参数：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("第一个泛型参数是自定义的 Repository 所操作的 "),a("strong",[t._v("@Entity")]),t._v(" ；")])]),t._v(" "),a("li",[a("p",[t._v("第二个泛型参数是 Entity 的 "),a("strong",[t._v("@Id")]),t._v(" 属性类型。")])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Repository")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserRepository")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JpaRepository")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-boot/img/spring-boot-data-jpa-JpaRepository.png",alt:"JpaRepository"}})]),t._v(" "),a("p",[a("strong",[t._v("JpaRepository")]),t._v(" 继承 PagingAndSortingRepository 和 QueryByExampleExecutor。PagingAndSortingRepository 又继承了 CrudRepository 。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("祖先")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("作用")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("CrudRepository")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("内置了我们最常用的增、删、改、查的方法。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("PagingAndSortingRepository")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("在 CrudRepository 基础上负责排序和分⻚")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("QueryByExampleExecutor")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("提供了很多示例的查询方法。")])])])]),t._v(" "),a("p",[t._v("因此使用 JPA 操作数据库时，只需要构建的 Repository 继承了 "),a("strong",[t._v("JpaRepository")]),t._v("，就会拥有了很多常用的数据库操作方法。常用的方法有：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("增/改")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("repository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("save")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("添加和修改功能都是使用 "),a("code",[t._v(".save()")]),t._v(" 方法。")]),t._v(" "),a("p",[t._v("有一点需要注意的是，对于修改而言，要先执行查询，再对查询到的 Entity 进行修改，而后再调用 "),a("code",[t._v(".save()")]),t._v(" 方法。")])]),t._v(" "),a("li",[a("p",[t._v("删")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("repository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nrepository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("删除常见两种：先执行查询，再对查询到的 Entity 调用 "),a("code",[t._v(".delete")]),t._v(" 方法进行删除；另一种是直接提供 Entity 的 ID 进行删除。")])]),t._v(" "),a("li",[a("p",[t._v("查")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("repository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOne")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nrepository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nrepository"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v(".getOne()")]),t._v(" 和 "),a("code",[t._v("findById()")]),t._v(" 都是根据 ID 进行查询。区别在于：查不到时，"),a("code",[t._v(".getOne()")]),t._v(" 抛出 "),a("strong",[t._v("EntityNotFoundException")]),t._v(" 异常，而 "),a("code",[t._v(".findById()")]),t._v(" 查不查得到都是返回 "),a("code",[t._v("Optional<>")]),t._v(" 。")]),t._v(" "),a("p",[t._v("补充一点，在 Repository 的继承体系中 QueryByExampleExecutor 提供了通过 Example 对象进行条件查询。不过，它用起来还是相对比较繁琐，因此，通常使用的是其它方案来实现各种条件查询。这也是 spring-data-jpa 对 JPA 的改进之处。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);